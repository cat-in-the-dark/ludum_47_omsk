

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};



// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

  if (!Module.expectedDataFileDownloads) {
    Module.expectedDataFileDownloads = 0;
  }
  Module.expectedDataFileDownloads++;
  (function() {
   var loadPackage = function(metadata) {
  
    function runWithFS() {
  
      function assert(check, msg) {
        if (!check) throw msg + new Error().stack;
      }
  var fileData0 = [];
fileData0.push.apply(fileData0, [60, 33, 100, 111, 99, 116, 121, 112, 101, 32, 72, 84, 77, 76, 62, 10, 60, 104, 116, 109, 108, 32, 108, 97, 110, 103, 61, 34, 101, 110, 45, 117, 115, 34, 62, 10, 60, 104, 101, 97, 100, 62, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 99, 104, 97, 114, 115, 101, 116, 61, 34, 117, 116, 102, 45, 56, 34, 62, 10, 32, 32, 32, 32, 60, 116, 105, 116, 108, 101, 62, 76, 111, 111, 112, 109, 97, 110, 60, 47, 116, 105, 116, 108, 101, 62, 10, 32, 32, 32, 32, 60, 115, 116, 121, 108, 101, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 104, 116, 109, 108, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 100, 116, 104, 58, 32, 49, 48, 48, 37, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 104, 101, 105, 103, 104, 116, 58, 32, 49, 48, 48, 37, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 100, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 100, 105, 115, 112, 108, 97, 121, 58, 32, 45, 119, 101, 98, 107, 105, 116, 45, 102, 108, 101, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 100, 105, 115, 112, 108, 97, 121, 58, 32, 102, 108, 101, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 119, 101, 98, 107, 105, 116, 45, 102, 108, 101, 120, 45, 100, 105, 114, 101, 99, 116, 105, 111, 110, 58, 32, 99, 111, 108, 117, 109, 110, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 108, 101, 120, 45, 100, 105, 114, 101, 99, 116, 105, 111, 110, 58, 32, 99, 111, 108, 117, 109, 110, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 100, 116, 104, 58, 32, 49, 48, 48, 37, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 104, 101, 105, 103, 104, 116, 58, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 111, 118, 101, 114, 102, 108, 111, 119, 58, 32, 104, 105, 100, 100, 101, 110, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 35, 99, 97, 110, 118, 97, 115, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 119, 101, 98, 107, 105, 116, 45, 102, 108, 101, 120, 58, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 108, 101, 120, 58, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 100, 116, 104, 58, 32, 55, 54, 56, 112, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 104, 101, 105, 103, 104, 116, 58, 32, 53, 49, 50, 112, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 35, 115, 116, 97, 116, 117, 115, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 104, 115, 108, 40, 54, 48, 44, 50, 48, 37, 44, 57, 48, 37, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 101, 120, 116, 45, 97, 108, 105, 103, 110, 58, 32, 99, 101, 110, 116, 101, 114, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 104, 101, 105, 103, 104, 116, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 35, 111, 117, 116, 112, 117, 116, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 104, 115, 108, 97, 40, 50, 52, 48, 44, 49, 48, 37, 44, 49, 48, 37, 44, 48, 46, 48, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 108, 111, 114, 58, 32, 98, 108, 97, 99, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 114, 100, 101, 114, 58, 32, 110, 111, 110, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 48, 32, 49, 101, 109, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 111, 115, 105, 116, 105, 111, 110, 58, 32, 97, 98, 115, 111, 108, 117, 116, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 105, 103, 104, 116, 58, 32, 48, 59, 32, 119, 105, 100, 116, 104, 58, 32, 53, 48, 37, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 116, 116, 111, 109, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 60, 47, 115, 116, 121, 108, 101, 62, 10, 60, 47, 104, 101, 97, 100, 62, 10, 60, 98, 111, 100, 121, 62, 10, 60, 100, 105, 118, 32, 105, 100, 61, 34, 115, 116, 97, 116, 117, 115, 34, 62, 68, 111, 119, 110, 108, 111, 97, 100, 105, 110, 103, 46, 46, 46, 60, 47, 100, 105, 118, 62, 10, 10, 60, 99, 97, 110, 118, 97, 115, 32, 105, 100, 61, 34, 99, 97, 110, 118, 97, 115, 34, 32, 111, 110, 99, 111, 110, 116, 101, 120, 116, 109, 101, 110, 117, 61, 34, 101, 118, 101, 110, 116, 46, 112, 114, 101, 118, 101, 110, 116, 68, 101, 102, 97, 117, 108, 116, 40, 41, 34, 62, 60, 47, 99, 97, 110, 118, 97, 115, 62, 10, 10, 60, 116, 101, 120, 116, 97, 114, 101, 97, 32, 105, 100, 61, 34, 111, 117, 116, 112, 117, 116, 34, 32, 114, 111, 119, 115, 61, 34, 56, 34, 62, 60, 47, 116, 101, 120, 116, 97, 114, 101, 97, 62, 10, 10, 60, 115, 99, 114, 105, 112, 116, 32, 116, 121, 112, 101, 61, 39, 116, 101, 120, 116, 47, 106, 97, 118, 97, 115, 99, 114, 105, 112, 116, 39, 62, 10, 32, 32, 32, 32, 118, 97, 114, 32, 77, 111, 100, 117, 108, 101, 32, 61, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 114, 105, 110, 116, 58, 32, 40, 102, 117, 110, 99, 116, 105, 111, 110, 40, 116, 101, 120, 116, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 114, 32, 101, 108, 101, 109, 101, 110, 116, 32, 61, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 39, 111, 117, 116, 112, 117, 116, 39, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 101, 108, 101, 109, 101, 110, 116, 41, 32, 101, 108, 101, 109, 101, 110, 116, 46, 118, 97, 108, 117, 101, 32, 61, 32, 39, 39, 59, 32, 47, 47, 32, 99, 108, 101, 97, 114, 32, 98, 114, 111, 119, 115, 101, 114, 32, 99, 97, 99, 104, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 116, 101, 120, 116, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 97, 114, 103, 117, 109, 101, 110, 116, 115, 46, 108, 101, 110, 103, 116, 104, 32, 62, 32, 49, 41, 32, 116, 101, 120, 116, 32, 61, 32, 65, 114, 114, 97, 121, 46, 112, 114, 111, 116, 111, 116, 121, 112, 101, 46, 115, 108, 105, 99, 101, 46, 99, 97, 108, 108, 40, 97, 114, 103, 117, 109, 101, 110, 116, 115, 41, 46, 106, 111, 105, 110, 40, 39, 32, 39, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 110, 115, 111, 108, 101, 46, 108, 111, 103, 40, 116, 101, 120, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 101, 108, 101, 109, 101, 110, 116, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 101, 109, 101, 110, 116, 46, 118, 97, 108, 117, 101, 32, 43, 61, 32, 116, 101, 120, 116, 32, 43, 32, 34, 92, 110, 34, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 101, 109, 101, 110, 116, 46, 115, 99, 114, 111, 108, 108, 84, 111, 112, 32, 61, 32, 101, 108, 101, 109, 101, 110, 116, 46, 115, 99, 114, 111, 108, 108, 72, 101, 105, 103, 104, 116, 59, 32, 47, 47, 32, 102, 111, 99, 117, 115, 32, 111, 110, 32, 98, 111, 116, 116, 111, 109, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 41, 40, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 114, 105, 110, 116, 69, 114, 114, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 116, 101, 120, 116, 41, 32, 123, 32, 99, 111, 110, 115, 111, 108, 101, 46, 101, 114, 114, 111, 114, 40, 116, 101, 120, 116, 41, 59, 32, 125, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 116, 83, 116, 97, 116, 117, 115, 58, 32, 40, 102, 117, 110, 99, 116, 105, 111, 110, 40, 116, 101, 120, 116, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 114, 32, 101, 108, 101, 109, 101, 110, 116, 32, 61, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 39, 115, 116, 97, 116, 117, 115, 39, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 101, 108, 101, 109, 101, 110, 116, 41, 32, 101, 108, 101, 109, 101, 110, 116, 46, 116, 101, 120, 116, 67, 111, 110, 116, 101, 110, 116, 32, 61, 32, 39, 39, 59, 32, 47, 47, 32, 99, 108, 101, 97, 114, 32, 98, 114, 111, 119, 115, 101, 114, 32, 99, 97, 99, 104, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 116, 101, 120, 116, 41, 32, 123, 32, 101, 108, 101, 109, 101, 110, 116, 46, 116, 101, 120, 116, 67, 111, 110, 116, 101, 110, 116, 32, 61, 32, 116, 101, 120, 116, 59, 32, 125, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 41, 40, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 110, 118, 97, 115, 58, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 39, 99, 97, 110, 118, 97, 115, 39, 41, 10, 32, 32, 32, 32, 125, 59, 10, 60, 47, 115, 99, 114, 105, 112, 116, 62, 10, 60, 115, 99, 114, 105, 112, 116, 32, 97, 115, 121, 110, 99, 32, 116, 121, 112, 101, 61, 34, 116, 101, 120, 116, 47, 106, 97, 118, 97, 115, 99, 114, 105, 112, 116, 34, 32, 115, 114, 99, 61, 34, 108, 111, 111, 112, 109, 97, 110, 46, 106, 115, 34, 62, 60, 47, 115, 99, 114, 105, 112, 116, 62, 10, 60, 47, 98, 111, 100, 121, 62, 10, 60, 47, 104, 116, 109, 108, 62]);
Module['FS_createDataFile']('/', 'index.html', fileData0, true, true, false);
var fileData1 = [];
fileData1.push.apply(fileData1, [137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 3, 192, 0, 0, 2, 32, 8, 6, 0, 0, 0, 74, 229, 0, 173, 0, 0, 4, 25, 105, 67, 67, 80, 107, 67, 71, 67, 111, 108, 111, 114, 83, 112, 97, 99, 101, 71, 101, 110, 101, 114, 105, 99, 82, 71, 66, 0, 0, 56, 141, 141, 85, 93, 104, 28, 85, 20, 62, 187, 115, 103, 35, 36, 206, 83, 108, 52, 133, 116, 168, 63, 13, 37, 13, 147, 86, 52, 161, 180, 186, 127, 221, 221, 54, 110, 150, 73, 54, 218, 34, 232, 100, 246, 238, 206, 152, 201, 206, 56, 51, 187, 253, 161, 79, 69, 80, 124, 49, 234, 155, 20, 196, 191, 183, 128, 32, 40, 245, 15, 219, 62, 180, 47, 149, 10, 37, 218, 212, 32, 40, 62, 180, 248, 131, 80, 232, 139, 166, 235, 153, 59, 51, 153, 105, 186, 177, 222, 101, 238, 124, 243, 157, 239, 158, 123, 238, 185, 103, 239, 5, 232, 185, 170, 88, 150, 145, 20, 1, 22, 154, 174, 45, 23, 50, 226, 115, 135, 143, 136, 61, 43, 144, 132, 135, 160, 23, 6, 161, 87, 81, 29, 43, 93, 169, 76, 2, 54, 79, 11, 119, 181, 91, 223, 67, 194, 123, 95, 217, 213, 221, 254, 159, 173, 183, 70, 29, 21, 32, 113, 31, 98, 179, 230, 168, 11, 136, 143, 1, 240, 167, 85, 203, 118, 1, 122, 250, 145, 31, 63, 234, 90, 30, 246, 98, 232, 183, 49, 64, 196, 47, 122, 184, 225, 99, 215, 195, 115, 62, 126, 141, 105, 102, 228, 44, 226, 211, 136, 5, 85, 83, 106, 136, 151, 16, 143, 204, 197, 248, 70, 12, 251, 49, 176, 214, 95, 160, 77, 106, 235, 170, 232, 229, 162, 98, 155, 117, 221, 160, 177, 112, 239, 97, 254, 159, 109, 193, 104, 133, 243, 109, 195, 167, 207, 153, 159, 62, 132, 239, 97, 92, 251, 43, 53, 37, 231, 225, 81, 196, 75, 170, 146, 159, 70, 252, 8, 226, 107, 109, 125, 182, 28, 224, 219, 150, 155, 145, 17, 63, 6, 144, 220, 222, 154, 175, 166, 17, 239, 68, 92, 172, 219, 7, 170, 190, 159, 164, 173, 181, 138, 33, 126, 231, 132, 54, 243, 44, 226, 45, 136, 207, 55, 231, 202, 83, 193, 216, 171, 170, 147, 197, 156, 193, 118, 196, 183, 53, 90, 242, 242, 59, 4, 192, 137, 186, 91, 154, 241, 199, 114, 251, 109, 83, 158, 242, 231, 229, 234, 53, 154, 203, 123, 121, 68, 252, 250, 188, 121, 72, 246, 125, 114, 159, 57, 237, 233, 124, 232, 243, 132, 150, 45, 7, 252, 165, 151, 148, 131, 21, 196, 131, 136, 127, 161, 70, 65, 246, 231, 226, 254, 177, 220, 74, 16, 3, 25, 106, 26, 229, 73, 127, 46, 146, 163, 14, 91, 47, 227, 93, 109, 166, 232, 207, 75, 12, 23, 55, 212, 31, 75, 22, 235, 250, 129, 82, 160, 255, 68, 179, 139, 114, 128, 175, 89, 6, 171, 81, 140, 141, 79, 218, 45, 185, 234, 235, 249, 81, 197, 206, 23, 124, 159, 124, 133, 54, 171, 129, 127, 190, 13, 179, 9, 5, 40, 152, 48, 135, 189, 10, 77, 88, 3, 17, 100, 40, 64, 6, 223, 22, 216, 104, 169, 131, 14, 6, 50, 20, 173, 20, 25, 138, 95, 161, 102, 23, 27, 231, 192, 60, 242, 58, 180, 153, 205, 193, 190, 194, 148, 254, 200, 200, 95, 131, 249, 184, 206, 180, 42, 100, 135, 62, 130, 22, 178, 26, 252, 142, 172, 22, 211, 101, 241, 171, 133, 92, 99, 19, 63, 126, 44, 55, 2, 63, 38, 25, 32, 18, 217, 131, 207, 94, 50, 73, 246, 145, 113, 50, 1, 34, 121, 138, 60, 77, 246, 147, 28, 178, 19, 100, 239, 250, 216, 74, 108, 69, 94, 60, 55, 214, 253, 188, 140, 51, 82, 166, 155, 69, 221, 57, 180, 187, 160, 96, 255, 51, 42, 76, 92, 83, 215, 172, 44, 14, 182, 134, 35, 203, 41, 251, 5, 93, 189, 252, 198, 95, 177, 92, 233, 44, 55, 81, 182, 226, 25, 157, 186, 87, 206, 249, 95, 249, 235, 252, 50, 246, 43, 252, 106, 164, 224, 127, 228, 87, 241, 183, 114, 199, 90, 204, 187, 178, 76, 195, 236, 108, 88, 115, 119, 85, 26, 109, 6, 227, 22, 240, 209, 153, 197, 137, 197, 29, 243, 113, 241, 228, 87, 15, 70, 126, 150, 201, 153, 231, 175, 244, 93, 60, 89, 111, 46, 14, 70, 172, 151, 5, 250, 106, 249, 86, 25, 78, 141, 68, 172, 244, 131, 244, 135, 180, 44, 189, 39, 125, 40, 253, 198, 189, 205, 125, 202, 125, 205, 125, 206, 125, 193, 93, 2, 145, 59, 203, 157, 227, 190, 225, 46, 112, 31, 115, 95, 198, 246, 106, 243, 26, 90, 223, 123, 22, 121, 24, 183, 103, 233, 150, 107, 172, 74, 33, 35, 108, 21, 30, 22, 114, 194, 54, 225, 81, 97, 50, 242, 39, 12, 8, 99, 66, 81, 216, 129, 150, 173, 235, 251, 22, 159, 47, 158, 61, 29, 14, 99, 31, 230, 167, 251, 92, 190, 46, 86, 1, 137, 251, 177, 2, 244, 77, 254, 85, 85, 84, 233, 112, 148, 41, 29, 86, 111, 77, 56, 190, 65, 19, 140, 36, 67, 100, 140, 148, 54, 84, 247, 184, 87, 243, 161, 34, 149, 79, 229, 82, 105, 16, 83, 59, 83, 19, 169, 177, 212, 65, 15, 135, 179, 166, 118, 160, 109, 2, 251, 252, 29, 213, 169, 110, 178, 82, 234, 210, 99, 222, 125, 2, 89, 211, 58, 110, 235, 13, 205, 21, 119, 75, 210, 147, 98, 26, 175, 54, 42, 150, 154, 234, 232, 136, 168, 24, 134, 200, 76, 142, 104, 83, 135, 218, 109, 90, 27, 5, 239, 222, 244, 143, 244, 155, 50, 187, 15, 19, 91, 46, 71, 156, 251, 12, 192, 190, 63, 241, 236, 251, 46, 226, 142, 180, 0, 150, 28, 128, 129, 199, 35, 110, 24, 207, 202, 7, 222, 5, 56, 243, 132, 218, 178, 219, 193, 29, 145, 72, 124, 11, 224, 212, 247, 236, 246, 191, 250, 50, 120, 126, 253, 212, 233, 220, 196, 115, 172, 231, 45, 128, 181, 55, 59, 157, 191, 223, 239, 116, 214, 62, 64, 255, 171, 0, 103, 141, 127, 1, 160, 159, 124, 85, 3, 92, 11, 239, 0, 0, 0, 214, 101, 88, 73, 102, 77, 77, 0, 42, 0, 0, 0, 8, 0, 7, 1, 18, 0, 3, 0, 0, 0, 1, 0, 1, 0, 0, 1, 26, 0, 5, 0, 0, 0, 1, 0, 0, 0, 98, 1, 27, 0, 5, 0, 0, 0, 1, 0, 0, 0, 106, 1, 40, 0, 3, 0, 0, 0, 1, 0, 3, 0, 0, 1, 49, 0, 2, 0, 0, 0, 12, 0, 0, 0, 114, 1, 50, 0, 2, 0, 0, 0, 20, 0, 0, 0, 126, 135, 105, 0, 4, 0, 0, 0, 1, 0, 0, 0, 146, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 1, 0, 0, 0, 72, 0, 0, 0, 1, 71, 73, 77, 80, 32, 50, 46, 49, 48, 46, 54, 0, 50, 48, 49, 57, 58, 48, 52, 58, 50, 57, 32, 49, 53, 58, 49, 48, 58, 48, 52, 0, 0, 3, 146, 134, 0, 7, 0, 0, 0, 25, 0, 0, 0, 188, 160, 2, 0, 4, 0, 0, 0, 1, 0, 0, 3, 192, 160, 3, 0, 4, 0, 0, 0, 1, 0, 0, 2, 32, 0, 0, 0, 0, 65, 83, 67, 73, 73, 0, 0, 0, 67, 114, 101, 97, 116, 101, 100, 32, 119, 105, 116, 104, 32, 71, 73, 77, 80, 0, 17, 33, 60, 174, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 11, 19, 0, 0, 11, 19, 1, 0, 154, 156, 24, 0, 0, 11, 124, 105, 84, 88, 116, 88, 77, 76, 58, 99, 111, 109, 46, 97, 100, 111, 98, 101, 46, 120, 109, 112, 0, 0, 0, 0, 0, 60, 120, 58, 120, 109, 112, 109, 101, 116, 97, 32, 120, 109, 108, 110, 115, 58, 120, 61, 34, 97, 100, 111, 98, 101, 58, 110, 115, 58, 109, 101, 116, 97, 47, 34, 32, 120, 58, 120, 109, 112, 116, 107, 61, 34, 88, 77, 80, 32, 67, 111, 114, 101, 32, 53, 46, 52, 46, 48, 34, 62, 10, 32, 32, 32, 60, 114, 100, 102, 58, 82, 68, 70, 32, 120, 109, 108, 110, 115, 58, 114, 100, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 119, 51, 46, 111, 114, 103, 47, 49, 57, 57, 57, 47, 48, 50, 47, 50, 50, 45, 114, 100, 102, 45, 115, 121, 110, 116, 97, 120, 45, 110, 115, 35, 34, 62, 10, 32, 32, 32, 32, 32, 32, 60, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 114, 100, 102, 58, 97, 98, 111, 117, 116, 61, 34, 34, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 109, 108, 110, 115, 58, 120, 109, 112, 77, 77, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 120, 97, 112, 47, 49, 46, 48, 47, 109, 109, 47, 34, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 109, 108, 110, 115, 58, 115, 116, 69, 118, 116, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 120, 97, 112, 47, 49, 46, 48, 47, 115, 84, 121, 112, 101, 47, 82, 101, 115, 111, 117, 114, 99, 101, 69, 118, 101, 110, 116, 35, 34, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 109, 108, 110, 115, 58, 73, 112, 116, 99, 52, 120, 109, 112, 69, 120, 116, 61, 34, 104, 116, 116, 112, 58, 47, 47, 105, 112, 116, 99, 46, 111, 114, 103, 47, 115, 116, 100, 47, 73, 112, 116, 99, 52, 120, 109, 112, 69, 120, 116, 47, 50, 48, 48, 56, 45, 48, 50, 45, 50, 57, 47, 34, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 109, 108, 110, 115, 58, 71, 73, 77, 80, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 103, 105, 109, 112, 46, 111, 114, 103, 47, 120, 109, 112, 47, 34, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 109, 108, 110, 115, 58, 101, 120, 105, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 101, 120, 105, 102, 47, 49, 46, 48, 47, 34, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 109, 108, 110, 115, 58, 116, 105, 102, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 116, 105, 102, 102, 47, 49, 46, 48, 47, 34, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 109, 108, 110, 115, 58, 112, 108, 117, 115, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 117, 115, 101, 112, 108, 117, 115, 46, 111, 114, 103, 47, 108, 100, 102, 47, 120, 109, 112, 47, 49, 46, 48, 47, 34, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 109, 108, 110, 115, 58, 100, 99, 61, 34, 104, 116, 116, 112, 58, 47, 47, 112, 117, 114, 108, 46, 111, 114, 103, 47, 100, 99, 47, 101, 108, 101, 109, 101, 110, 116, 115, 47, 49, 46, 49, 47, 34, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 109, 108, 110, 115, 58, 120, 109, 112, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 120, 97, 112, 47, 49, 46, 48, 47, 34, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 120, 109, 112, 77, 77, 58, 73, 110, 115, 116, 97, 110, 99, 101, 73, 68, 62, 120, 109, 112, 46, 105, 105, 100, 58, 51, 99, 98, 49, 53, 55, 53, 53, 45, 99, 52, 49, 54, 45, 52, 57, 97, 49, 45, 97, 51, 98, 52, 45, 102, 98, 55, 48, 56, 98, 54, 51, 51, 55, 102, 52, 60, 47, 120, 109, 112, 77, 77, 58, 73, 110, 115, 116, 97, 110, 99, 101, 73, 68, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 120, 109, 112, 77, 77, 58, 72, 105, 115, 116, 111, 114, 121, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 114, 100, 102, 58, 83, 101, 113, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 114, 100, 102, 58, 108, 105, 32, 114, 100, 102, 58, 112, 97, 114, 115, 101, 84, 121, 112, 101, 61, 34, 82, 101, 115, 111, 117, 114, 99, 101, 34, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 115, 116, 69, 118, 116, 58, 99, 104, 97, 110, 103, 101, 100, 62, 47, 60, 47, 115, 116, 69, 118, 116, 58, 99, 104, 97, 110, 103, 101, 100, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 115, 116, 69, 118, 116, 58, 115, 111, 102, 116, 119, 97, 114, 101, 65, 103, 101, 110, 116, 62, 71, 105, 109, 112, 32, 50, 46, 49, 48, 32, 40, 77, 97, 99, 32, 79, 83, 41, 60, 47, 115, 116, 69, 118, 116, 58, 115, 111, 102, 116, 119, 97, 114, 101, 65, 103, 101, 110, 116, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 115, 116, 69, 118, 116, 58, 119, 104, 101, 110, 62, 50, 48, 49, 57, 45, 48, 52, 45, 50, 57, 84, 49, 53, 58, 49, 48, 58, 49, 50, 43, 48, 51, 58, 48, 48, 60, 47, 115, 116, 69, 118, 116, 58, 119, 104, 101, 110, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 115, 116, 69, 118, 116, 58, 105, 110, 115, 116, 97, 110, 99, 101, 73, 68, 62, 120, 109, 112, 46, 105, 105, 100, 58, 49, 54, 52, 97, 55, 52, 54, 101, 45, 51, 57, 102, 101, 45, 52, 98, 98, 57, 45, 97, 98, 49, 98, 45, 52, 100, 97, 55, 54, 57, 100, 56, 50, 98, 49, 97, 60, 47, 115, 116, 69, 118, 116, 58, 105, 110, 115, 116, 97, 110, 99, 101, 73, 68, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 115, 116, 69, 118, 116, 58, 97, 99, 116, 105, 111, 110, 62, 115, 97, 118, 101, 100, 60, 47, 115, 116, 69, 118, 116, 58, 97, 99, 116, 105, 111, 110, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 47, 114, 100, 102, 58, 108, 105, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 47, 114, 100, 102, 58, 83, 101, 113, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 47, 120, 109, 112, 77, 77, 58, 72, 105, 115, 116, 111, 114, 121, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 120, 109, 112, 77, 77, 58, 79, 114, 105, 103, 105, 110, 97, 108, 68, 111, 99, 117, 109, 101, 110, 116, 73, 68, 62, 120, 109, 112, 46, 100, 105, 100, 58, 52, 54, 98, 49, 51, 48, 101, 101, 45, 54, 53, 49, 50, 45, 52, 98, 98, 100, 45, 97, 53, 54, 54, 45, 51, 53, 100, 56, 100, 100, 101, 56, 53, 49, 100, 50, 60, 47, 120, 109, 112, 77, 77, 58, 79, 114, 105, 103, 105, 110, 97, 108, 68, 111, 99, 117, 109, 101, 110, 116, 73, 68, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 120, 109, 112, 77, 77, 58, 68, 111, 99, 117, 109, 101, 110, 116, 73, 68, 62, 103, 105, 109, 112, 58, 100, 111, 99, 105, 100, 58, 103, 105, 109, 112, 58, 53, 57, 99, 54, 53, 48, 56, 50, 45, 55, 102, 99, 51, 45, 52, 56, 53, 52, 45, 56, 56, 57, 53, 45, 99, 55, 98, 56, 52, 54, 54, 48, 52, 98, 98, 102, 60, 47, 120, 109, 112, 77, 77, 58, 68, 111, 99, 117, 109, 101, 110, 116, 73, 68, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 73, 112, 116, 99, 52, 120, 109, 112, 69, 120, 116, 58, 65, 114, 116, 119, 111, 114, 107, 79, 114, 79, 98, 106, 101, 99, 116, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 114, 100, 102, 58, 66, 97, 103, 47, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 47, 73, 112, 116, 99, 52, 120, 109, 112, 69, 120, 116, 58, 65, 114, 116, 119, 111, 114, 107, 79, 114, 79, 98, 106, 101, 99, 116, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 73, 112, 116, 99, 52, 120, 109, 112, 69, 120, 116, 58, 76, 111, 99, 97, 116, 105, 111, 110, 67, 114, 101, 97, 116, 101, 100, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 114, 100, 102, 58, 66, 97, 103, 47, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 47, 73, 112, 116, 99, 52, 120, 109, 112, 69, 120, 116, 58, 76, 111, 99, 97, 116, 105, 111, 110, 67, 114, 101, 97, 116, 101, 100, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 73, 112, 116, 99, 52, 120, 109, 112, 69, 120, 116, 58, 82, 101, 103, 105, 115, 116, 114, 121, 73, 100, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 114, 100, 102, 58, 66, 97, 103, 47, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 47, 73, 112, 116, 99, 52, 120, 109, 112, 69, 120, 116, 58, 82, 101, 103, 105, 115, 116, 114, 121, 73, 100, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 73, 112, 116, 99, 52, 120, 109, 112, 69, 120, 116, 58, 76, 111, 99, 97, 116, 105, 111, 110, 83, 104, 111, 119, 110, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 114, 100, 102, 58, 66, 97, 103, 47, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 47, 73, 112, 116, 99, 52, 120, 109, 112, 69, 120, 116, 58, 76, 111, 99, 97, 116, 105, 111, 110, 83, 104, 111, 119, 110, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 71, 73, 77, 80, 58, 65, 80, 73, 62, 50, 46, 48, 60, 47, 71, 73, 77, 80, 58, 65, 80, 73, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 71, 73, 77, 80, 58, 80, 108, 97, 116, 102, 111, 114, 109, 62, 77, 97, 99, 32, 79, 83, 60, 47, 71, 73, 77, 80, 58, 80, 108, 97, 116, 102, 111, 114, 109, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 71, 73, 77, 80, 58, 84, 105, 109, 101, 83, 116, 97, 109, 112, 62, 49, 53, 53, 54, 53, 51, 57, 56, 49, 50, 56, 56, 56, 49, 50, 52, 60, 47, 71, 73, 77, 80, 58, 84, 105, 109, 101, 83, 116, 97, 109, 112, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 71, 73, 77, 80, 58, 86, 101, 114, 115, 105, 111, 110, 62, 50, 46, 49, 48, 46, 54, 60, 47, 71, 73, 77, 80, 58, 86, 101, 114, 115, 105, 111, 110, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 101, 120, 105, 102, 58, 85, 115, 101, 114, 67, 111, 109, 109, 101, 110, 116, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 114, 100, 102, 58, 65, 108, 116, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 114, 100, 102, 58, 108, 105, 32, 120, 109, 108, 58, 108, 97, 110, 103, 61, 34, 120, 45, 100, 101, 102, 97, 117, 108, 116, 34, 62, 67, 114, 101, 97, 116, 101, 100, 32, 119, 105, 116, 104, 32, 71, 73, 77, 80, 60, 47, 114, 100, 102, 58, 108, 105, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 47, 114, 100, 102, 58, 65, 108, 116, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 47, 101, 120, 105, 102, 58, 85, 115, 101, 114, 67, 111, 109, 109, 101, 110, 116, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 116, 105, 102, 102, 58, 82, 101, 115, 111, 108, 117, 116, 105, 111, 110, 85, 110, 105, 116, 62, 51, 60, 47, 116, 105, 102, 102, 58, 82, 101, 115, 111, 108, 117, 116, 105, 111, 110, 85, 110, 105, 116, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 116, 105, 102, 102, 58, 79, 114, 105, 101, 110, 116, 97, 116, 105, 111, 110, 62, 49, 60, 47, 116, 105, 102, 102, 58, 79, 114, 105, 101, 110, 116, 97, 116, 105, 111, 110, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 112, 108, 117, 115, 58, 76, 105, 99, 101, 110, 115, 111, 114, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 114, 100, 102, 58, 83, 101, 113, 47, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 47, 112, 108, 117, 115, 58, 76, 105, 99, 101, 110, 115, 111, 114, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 112, 108, 117, 115, 58, 67, 111, 112, 121, 114, 105, 103, 104, 116, 79, 119, 110, 101, 114, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 114, 100, 102, 58, 83, 101, 113, 47, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 47, 112, 108, 117, 115, 58, 67, 111, 112, 121, 114, 105, 103, 104, 116, 79, 119, 110, 101, 114, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 112, 108, 117, 115, 58, 73, 109, 97, 103, 101, 67, 114, 101, 97, 116, 111, 114, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 114, 100, 102, 58, 83, 101, 113, 47, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 47, 112, 108, 117, 115, 58, 73, 109, 97, 103, 101, 67, 114, 101, 97, 116, 111, 114, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 112, 108, 117, 115, 58, 73, 109, 97, 103, 101, 83, 117, 112, 112, 108, 105, 101, 114, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 114, 100, 102, 58, 83, 101, 113, 47, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 47, 112, 108, 117, 115, 58, 73, 109, 97, 103, 101, 83, 117, 112, 112, 108, 105, 101, 114, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 100, 99, 58, 70, 111, 114, 109, 97, 116, 62, 105, 109, 97, 103, 101, 47, 112, 110, 103, 60, 47, 100, 99, 58, 70, 111, 114, 109, 97, 116, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 120, 109, 112, 58, 67, 114, 101, 97, 116, 111, 114, 84, 111, 111, 108, 62, 71, 73, 77, 80, 32, 50, 46, 49, 48, 46, 54, 60, 47, 120, 109, 112, 58, 67, 114, 101, 97, 116, 111, 114, 84, 111, 111, 108, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 120, 109, 112, 58, 77, 111, 100, 105, 102, 121, 68, 97, 116, 101, 62, 50, 48, 49, 57, 45, 48, 52, 45, 50, 57, 84, 49, 53, 58, 49, 48, 58, 48, 52, 60, 47, 120, 109, 112, 58, 77, 111, 100, 105, 102, 121, 68, 97, 116, 101, 62, 10, 32, 32, 32, 32, 32, 32, 60, 47, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 62, 10, 32, 32, 32, 60, 47, 114, 100, 102, 58, 82, 68, 70, 62, 10, 60, 47, 120, 58, 120, 109, 112, 109, 101, 116, 97, 62, 10, 37, 60, 195, 75, 0, 0, 64, 0, 73, 68, 65, 84, 120, 1, 236, 221, 9, 128, 28, 101, 157, 255, 255, 111, 31, 51, 211, 61, 247, 76, 102, 50, 73, 72, 72, 2, 225, 190, 197, 8, 34, 200, 162, 220, 32, 40, 168, 172, 138, 160, 226, 234, 122, 187, 226, 79, 197, 93, 119, 189, 254, 94, 187, 30, 235, 186, 174, 235, 170, 63, 116, 253, 137, 186, 160, 171, 160, 160, 194, 174, 130, 40, 202, 165, 156, 225, 8, 1, 18, 114, 77, 146, 153, 204, 221, 211, 71, 253, 63, 79, 245, 116, 50, 51, 153, 233, 204, 213, 103, 189, 11, 50, 125, 85, 61, 199, 235, 169, 234, 170, 111, 61, 79, 85, 135, 204, 204, 211, 63, 38, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 170, 90, 32, 92, 213, 181, 163, 114, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 140, 9, 16, 0, 179, 42, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 4, 66, 128, 0, 56, 16, 205, 76, 37, 17, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 8, 128, 89, 7, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 2, 33, 64, 0, 28, 136, 102, 166, 146, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 4, 192, 172, 3, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 129, 16, 32, 0, 14, 68, 51, 83, 73, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 2, 96, 214, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 129, 64, 8, 16, 0, 7, 162, 153, 169, 36, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 1, 48, 235, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 32, 4, 8, 128, 3, 209, 204, 84, 18, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 128, 0, 152, 117, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 32, 16, 2, 4, 192, 129, 104, 102, 42, 137, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 64, 0, 204, 58, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 16, 8, 1, 2, 224, 64, 52, 51, 149, 68, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 32, 0, 102, 29, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 8, 132, 0, 1, 112, 32, 154, 153, 74, 34, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 16, 0, 179, 14, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 4, 66, 128, 0, 56, 16, 205, 76, 37, 17, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 8, 128, 89, 7, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 2, 33, 64, 0, 28, 136, 102, 166, 146, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 4, 192, 172, 3, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 129, 16, 32, 0, 14, 68, 51, 83, 73, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 2, 96, 214, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 129, 64, 8, 16, 0, 7, 162, 153, 169, 36, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 1, 48, 235, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 32, 4, 8, 128, 3, 209, 204, 84, 18, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 128, 0, 152, 117, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 32, 16, 2, 4, 192, 129, 104, 102, 42, 137, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 64, 0, 204, 58, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 16, 8, 1, 2, 224, 64, 52, 51, 149, 68, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 32, 0, 102, 29, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 8, 132, 0, 1, 112, 32, 154, 153, 74, 34, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 16, 0, 179, 14, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 4, 66, 128, 0, 56, 16, 205, 76, 37, 17, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 8, 128, 89, 7, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 2, 33, 64, 0, 28, 136, 102, 166, 146, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 4, 192, 172, 3, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 129, 16, 32, 0, 14, 68, 51, 83, 73, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 2, 96, 214, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 129, 64, 8, 16, 0, 7, 162, 153, 169, 36, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 1, 48, 235, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 32, 4, 8, 128, 3, 209, 204, 84, 18, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 128, 0, 152, 117, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 32, 16, 2, 4, 192, 129, 104, 102, 42, 137, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 64, 0, 204, 58, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 16, 8, 1, 2, 224, 64, 52, 51, 149, 68, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 32, 0, 102, 29, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 8, 132, 0, 1, 112, 32, 154, 153, 74, 34, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 16, 0, 179, 14, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 4, 66, 128, 0, 56, 16, 205, 76, 37, 17, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 8, 128, 89, 7, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 2, 33, 64, 0, 28, 136, 102, 166, 146, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 4, 192, 172, 3, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 129, 16, 32, 0, 14, 68, 51, 83, 73, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 2, 96, 214, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 129, 64, 8, 16, 0, 7, 162, 153, 169, 36, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 1, 48, 235, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 32, 4, 8, 128, 3, 209, 204, 84, 18, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 128, 0, 152, 117, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 32, 16, 2, 4, 192, 129, 104, 102, 42, 137, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 64, 0, 204, 58, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 16, 8, 1, 2, 224, 64, 52, 51, 149, 68, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 32, 0, 102, 29, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 8, 132, 0, 1, 112, 32, 154, 153, 74, 34, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 16, 0, 179, 14, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 4, 66, 128, 0, 56, 16, 205, 76, 37, 17, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 8, 128, 89, 7, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 2, 33, 64, 0, 28, 136, 102, 166, 146, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 4, 192, 172, 3, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 129, 16, 32, 0, 14, 68, 51, 83, 73, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 2, 96, 214, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 129, 64, 8, 16, 0, 7, 162, 153, 169, 36, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 1, 48, 235, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 32, 4, 8, 128, 3, 209, 204, 84, 18, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 128, 0, 152, 117, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 32, 16, 2, 4, 192, 129, 104, 102, 42, 137, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 64, 0, 204, 58, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 16, 8, 1, 2, 224, 64, 52, 51, 149, 68, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 32, 0, 102, 29, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 8, 132, 0, 1, 112, 32, 154, 153, 74, 34, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 16, 0, 179, 14, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 4, 66, 128, 0, 56, 16, 205, 76, 37, 17, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 8, 128, 89, 7, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 2, 33, 64, 0, 28, 136, 102, 166, 146, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 4, 192, 172, 3, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 129, 16, 32, 0, 14, 68, 51, 83, 73, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 2, 96, 214, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 129, 64, 8, 16, 0, 7, 162, 153, 169, 36, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 1, 48, 235, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 32, 4, 8, 128, 3, 209, 204, 84, 18, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 128, 0, 152, 117, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 32, 16, 2, 4, 192, 129, 104, 102, 42, 137, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 64, 0, 204, 58, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 16, 8, 1, 2, 224, 64, 52, 51, 149, 68, 0, 1, 4, 22, 78, 32, 20, 50, 115, 255, 152, 246, 47, 128, 213, 254, 141, 152, 3, 1, 4, 16, 64, 0, 129, 98, 10, 68, 139, 153, 25, 121, 33, 128, 0, 2, 8, 20, 71, 32, 27, 160, 134, 44, 28, 14, 155, 231, 121, 254, 191, 133, 200, 57, 164, 132, 221, 63, 55, 101, 50, 105, 165, 187, 16, 169, 150, 62, 13, 87, 39, 172, 74, 223, 14, 148, 0, 1, 4, 16, 64, 0, 129, 66, 11, 184, 163, 152, 42, 57, 124, 41, 52, 21, 233, 35, 128, 0, 2, 149, 33, 16, 14, 135, 20, 156, 22, 231, 171, 61, 28, 9, 91, 38, 157, 169, 12, 152, 41, 74, 89, 84, 171, 168, 172, 82, 149, 107, 53, 5, 31, 111, 33, 128, 0, 2, 8, 32, 80, 113, 2, 244, 0, 87, 92, 147, 81, 96, 4, 16, 64, 96, 122, 1, 215, 57, 235, 130, 223, 149, 43, 87, 218, 209, 199, 28, 109, 75, 150, 44, 241, 123, 127, 71, 134, 71, 252, 30, 206, 125, 150, 116, 113, 178, 150, 113, 189, 196, 174, 23, 116, 186, 71, 183, 156, 251, 204, 245, 146, 198, 227, 113, 235, 235, 235, 179, 71, 30, 125, 212, 158, 124, 252, 113, 27, 26, 25, 86, 18, 217, 101, 247, 73, 191, 140, 223, 40, 150, 213, 110, 89, 173, 91, 183, 78, 86, 79, 216, 96, 106, 112, 143, 115, 25, 211, 80, 52, 4, 16, 64, 0, 1, 4, 170, 86, 128, 0, 184, 106, 155, 150, 138, 33, 128, 64, 16, 5, 34, 145, 168, 165, 82, 41, 59, 226, 136, 35, 236, 202, 55, 92, 105, 39, 28, 127, 130, 141, 142, 142, 90, 114, 52, 57, 111, 14, 23, 0, 71, 162, 17, 107, 108, 108, 180, 238, 238, 29, 246, 131, 31, 254, 192, 54, 60, 185, 222, 31, 71, 84, 23, 171, 181, 145, 145, 196, 188, 243, 40, 102, 2, 225, 112, 212, 210, 233, 148, 29, 126, 248, 225, 5, 182, 234, 182, 27, 110, 184, 193, 158, 219, 184, 209, 6, 135, 6, 173, 174, 174, 78, 86, 35, 197, 172, 42, 121, 33, 128, 0, 2, 8, 32, 128, 192, 152, 0, 1, 48, 171, 2, 2, 8, 32, 80, 37, 2, 174, 71, 211, 245, 208, 186, 105, 241, 226, 197, 118, 236, 49, 199, 218, 193, 7, 31, 108, 222, 216, 112, 232, 140, 55, 105, 248, 173, 122, 127, 93, 175, 175, 123, 63, 28, 210, 240, 220, 253, 60, 250, 189, 195, 26, 94, 29, 9, 71, 172, 99, 81, 167, 29, 162, 180, 227, 141, 245, 214, 63, 56, 96, 225, 72, 164, 162, 20, 157, 85, 68, 195, 183, 211, 105, 179, 142, 142, 142, 194, 88, 41, 147, 136, 92, 58, 59, 59, 237, 145, 71, 30, 182, 198, 230, 70, 219, 177, 115, 167, 127, 18, 161, 162, 176, 40, 44, 2, 8, 32, 128, 0, 2, 85, 36, 64, 0, 92, 69, 141, 73, 85, 16, 64, 0, 129, 156, 64, 90, 145, 93, 42, 153, 82, 128, 151, 246, 3, 86, 247, 126, 84, 61, 158, 83, 77, 17, 203, 6, 175, 251, 123, 212, 173, 180, 20, 76, 187, 20, 60, 75, 140, 170, 7, 83, 1, 94, 44, 86, 55, 85, 146, 101, 255, 222, 228, 155, 119, 21, 196, 106, 44, 19, 215, 35, 159, 72, 184, 94, 248, 209, 172, 203, 228, 204, 203, 94, 171, 52, 5, 116, 39, 41, 42, 117, 162, 137, 43, 181, 229, 40, 55, 2, 8, 4, 65, 96, 234, 163, 161, 32, 212, 156, 58, 34, 128, 0, 2, 85, 44, 144, 76, 38, 109, 120, 56, 123, 109, 174, 187, 198, 119, 161, 166, 80, 200, 93, 52, 28, 246, 135, 89, 15, 14, 12, 218, 240, 208, 216, 80, 222, 226, 220, 115, 107, 161, 170, 49, 33, 157, 68, 34, 97, 67, 67, 67, 254, 117, 204, 11, 105, 149, 203, 36, 161, 161, 225, 3, 253, 3, 150, 76, 170, 187, 89, 19, 193, 81, 78, 134, 71, 4, 16, 64, 0, 1, 4, 138, 47, 64, 0, 92, 124, 115, 114, 68, 0, 1, 4, 138, 34, 144, 251, 185, 34, 119, 131, 170, 133, 152, 252, 27, 93, 141, 37, 228, 158, 135, 199, 134, 248, 46, 68, 218, 165, 76, 35, 119, 115, 47, 87, 134, 133, 180, 202, 213, 41, 164, 225, 229, 110, 104, 122, 174, 61, 114, 239, 243, 136, 0, 2, 8, 32, 128, 0, 2, 197, 23, 200, 94, 44, 86, 252, 124, 201, 17, 1, 4, 16, 64, 160, 66, 5, 252, 161, 208, 126, 55, 102, 229, 221, 249, 121, 58, 114, 23, 4, 23, 118, 42, 116, 250, 133, 45, 61, 169, 35, 128, 0, 2, 8, 32, 80, 45, 2, 4, 192, 213, 210, 146, 212, 3, 1, 4, 16, 40, 178, 128, 11, 132, 153, 16, 64, 0, 1, 4, 16, 64, 0, 129, 74, 18, 32, 0, 174, 164, 214, 162, 172, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 115, 22, 32, 0, 158, 51, 29, 11, 34, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 84, 146, 0, 1, 112, 37, 181, 22, 101, 69, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 152, 179, 0, 1, 240, 156, 233, 88, 16, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 160, 146, 4, 8, 128, 43, 169, 181, 40, 43, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 192, 156, 5, 8, 128, 231, 76, 199, 130, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 149, 36, 64, 0, 92, 73, 173, 69, 89, 17, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 230, 44, 64, 0, 60, 103, 58, 22, 68, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 168, 36, 1, 2, 224, 74, 106, 45, 202, 138, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 48, 103, 1, 2, 224, 57, 211, 177, 32, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 37, 9, 16, 0, 87, 82, 107, 81, 86, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 129, 57, 11, 16, 0, 207, 153, 142, 5, 17, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 42, 73, 128, 0, 184, 146, 90, 139, 178, 34, 128, 0, 2, 37, 23, 8, 77, 42, 129, 55, 233, 53, 47, 17, 64, 0, 1, 4, 16, 64, 0, 129, 242, 21, 32, 0, 46, 223, 182, 161, 100, 8, 32, 128, 64, 25, 10, 120, 22, 210, 127, 22, 114, 127, 245, 95, 40, 146, 45, 227, 228, 184, 184, 12, 75, 62, 185, 72, 33, 213, 193, 77, 238, 113, 236, 233, 228, 89, 120, 141, 0, 2, 8, 32, 128, 0, 2, 85, 38, 64, 0, 92, 101, 13, 74, 117, 16, 64, 0, 129, 98, 8, 184, 224, 55, 109, 163, 150, 204, 12, 248, 217, 121, 153, 202, 235, 9, 78, 167, 51, 126, 217, 147, 169, 164, 229, 158, 23, 195, 142, 60, 16, 64, 0, 1, 4, 16, 64, 160, 116, 2, 209, 210, 101, 77, 206, 8, 32, 128, 0, 2, 149, 40, 224, 153, 103, 169, 76, 202, 146, 233, 97, 11, 215, 38, 173, 107, 241, 82, 11, 69, 60, 107, 108, 106, 244, 123, 133, 43, 165, 78, 97, 157, 2, 222, 186, 117, 187, 37, 19, 41, 203, 84, 96, 0, 95, 41, 206, 148, 19, 1, 4, 16, 64, 0, 129, 114, 18, 32, 0, 46, 167, 214, 160, 44, 8, 32, 128, 64, 5, 8, 184, 222, 223, 176, 254, 213, 213, 54, 154, 167, 14, 224, 109, 189, 91, 42, 160, 212, 211, 23, 177, 165, 163, 206, 194, 140, 129, 158, 30, 136, 79, 16, 64, 0, 1, 4, 16, 168, 34, 1, 2, 224, 42, 106, 76, 170, 130, 0, 2, 8, 20, 74, 192, 245, 250, 186, 201, 5, 191, 110, 170, 175, 175, 183, 227, 142, 56, 222, 94, 251, 182, 247, 218, 211, 143, 61, 102, 45, 13, 245, 22, 114, 93, 170, 21, 48, 185, 186, 184, 128, 119, 119, 111, 191, 53, 52, 214, 219, 139, 78, 59, 213, 58, 151, 116, 78, 40, 249, 228, 250, 78, 248, 144, 23, 8, 32, 128, 0, 2, 8, 32, 80, 177, 2, 4, 192, 21, 219, 116, 20, 28, 1, 4, 16, 40, 158, 128, 11, 124, 93, 80, 232, 133, 178, 129, 112, 67, 83, 131, 157, 240, 252, 19, 172, 107, 249, 50, 5, 146, 189, 22, 143, 197, 44, 172, 0, 216, 243, 244, 185, 139, 145, 115, 151, 4, 231, 158, 231, 30, 115, 69, 206, 198, 209, 185, 87, 217, 71, 183, 204, 248, 249, 114, 207, 115, 143, 185, 185, 231, 185, 108, 110, 113, 55, 236, 217, 221, 0, 171, 189, 189, 221, 186, 150, 44, 177, 112, 68, 229, 31, 43, 120, 46, 208, 207, 101, 201, 35, 2, 8, 32, 128, 0, 2, 8, 84, 135, 0, 1, 112, 117, 180, 35, 181, 64, 0, 1, 4, 10, 46, 224, 2, 199, 140, 2, 92, 47, 19, 178, 72, 56, 98, 109, 10, 28, 91, 219, 218, 20, 179, 142, 5, 199, 186, 167, 84, 200, 117, 2, 231, 2, 214, 92, 164, 89, 240, 146, 205, 48, 131, 177, 0, 219, 115, 247, 190, 242, 227, 244, 108, 185, 195, 17, 87, 3, 221, 212, 75, 55, 197, 242, 116, 107, 175, 72, 132, 93, 227, 12, 69, 153, 13, 1, 4, 16, 64, 0, 129, 138, 19, 96, 47, 95, 113, 77, 70, 129, 17, 64, 0, 129, 82, 10, 236, 141, 106, 253, 176, 113, 236, 218, 89, 247, 220, 198, 126, 17, 201, 47, 221, 222, 217, 74, 89, 216, 137, 121, 231, 202, 52, 97, 164, 118, 238, 205, 236, 172, 123, 126, 214, 105, 226, 146, 188, 66, 0, 1, 4, 16, 64, 0, 129, 42, 17, 32, 0, 174, 146, 134, 164, 26, 8, 32, 128, 64, 161, 5, 252, 14, 84, 197, 139, 185, 159, 254, 45, 116, 126, 197, 78, 223, 245, 4, 51, 33, 128, 0, 2, 8, 32, 128, 64, 117, 11, 76, 56, 15, 94, 221, 85, 165, 118, 8, 32, 128, 0, 2, 115, 21, 200, 88, 246, 55, 115, 179, 131, 133, 179, 129, 98, 238, 189, 185, 166, 89, 46, 203, 249, 215, 54, 107, 240, 115, 174, 110, 238, 209, 213, 45, 119, 61, 112, 185, 148, 147, 114, 32, 128, 0, 2, 8, 32, 128, 192, 252, 5, 232, 1, 158, 191, 33, 41, 32, 128, 0, 2, 85, 47, 224, 15, 113, 30, 87, 203, 201, 175, 199, 125, 84, 145, 79, 39, 215, 103, 242, 235, 138, 172, 20, 133, 70, 0, 1, 4, 16, 64, 0, 129, 125, 4, 8, 128, 247, 33, 225, 13, 4, 16, 64, 0, 129, 201, 2, 83, 5, 132, 83, 189, 55, 121, 185, 74, 120, 61, 85, 61, 166, 122, 175, 18, 234, 66, 25, 17, 64, 0, 1, 4, 16, 64, 32, 191, 0, 67, 160, 243, 251, 240, 41, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 149, 8, 16, 0, 87, 73, 67, 82, 13, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 129, 252, 2, 4, 192, 249, 125, 248, 20, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 160, 74, 4, 8, 128, 171, 164, 33, 169, 6, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 126, 1, 2, 224, 252, 62, 124, 138, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 80, 37, 2, 4, 192, 85, 210, 144, 84, 3, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 32, 191, 0, 1, 112, 126, 31, 62, 69, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 168, 18, 1, 2, 224, 42, 105, 72, 170, 129, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 144, 95, 128, 0, 56, 191, 15, 159, 34, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 84, 137, 0, 1, 112, 149, 52, 36, 213, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 200, 47, 64, 0, 156, 223, 135, 79, 17, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 170, 68, 128, 0, 184, 74, 26, 146, 106, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 228, 23, 32, 0, 206, 239, 195, 167, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 85, 34, 64, 0, 92, 37, 13, 73, 53, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 242, 11, 16, 0, 231, 247, 225, 83, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 129, 42, 17, 32, 0, 174, 146, 134, 164, 26, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 249, 5, 8, 128, 243, 251, 240, 41, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 149, 8, 16, 0, 87, 73, 67, 82, 13, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 129, 252, 2, 4, 192, 249, 125, 248, 20, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 160, 74, 4, 8, 128, 171, 164, 33, 169, 6, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 126, 1, 2, 224, 252, 62, 124, 138, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 80, 37, 2, 4, 192, 85, 210, 144, 84, 3, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 32, 191, 0, 1, 112, 126, 31, 62, 69, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 168, 18, 1, 2, 224, 42, 105, 72, 170, 129, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 144, 95, 128, 0, 56, 191, 15, 159, 34, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 84, 137, 0, 1, 112, 149, 52, 36, 213, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 200, 47, 64, 0, 156, 223, 135, 79, 17, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 170, 68, 128, 0, 184, 74, 26, 146, 106, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 228, 23, 32, 0, 206, 239, 195, 167, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 85, 34, 64, 0, 92, 37, 13, 73, 53, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 242, 11, 16, 0, 231, 247, 225, 83, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 129, 42, 17, 32, 0, 174, 146, 134, 164, 26, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 249, 5, 8, 128, 243, 251, 240, 41, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 149, 8, 16, 0, 87, 73, 67, 82, 13, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 129, 252, 2, 4, 192, 249, 125, 248, 20, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 160, 74, 4, 8, 128, 171, 164, 33, 169, 6, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 126, 1, 2, 224, 252, 62, 124, 138, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 80, 37, 2, 4, 192, 85, 210, 144, 84, 3, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 32, 191, 0, 1, 112, 126, 31, 62, 69, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 168, 18, 1, 2, 224, 42, 105, 72, 170, 129, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 144, 95, 128, 0, 56, 191, 15, 159, 34, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 84, 137, 64, 180, 74, 234, 65, 53, 16, 64, 0, 1, 4, 16, 64, 160, 138, 4, 60, 175, 138, 42, 67, 85, 16, 64, 0, 1, 4, 202, 70, 128, 30, 224, 178, 105, 10, 10, 130, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 80, 72, 1, 2, 224, 66, 234, 146, 54, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 217, 8, 16, 0, 151, 77, 83, 80, 16, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 129, 66, 10, 16, 0, 23, 82, 151, 180, 17, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 202, 70, 128, 0, 184, 108, 154, 130, 130, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 20, 82, 128, 0, 184, 144, 186, 164, 141, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 80, 54, 2, 4, 192, 101, 211, 20, 20, 4, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 160, 144, 2, 4, 192, 133, 212, 37, 109, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 129, 178, 17, 32, 0, 46, 155, 166, 160, 32, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 133, 20, 32, 0, 46, 164, 46, 105, 35, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 148, 141, 0, 1, 112, 217, 52, 5, 5, 65, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 40, 164, 0, 1, 112, 33, 117, 73, 27, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 160, 108, 4, 8, 128, 203, 166, 41, 40, 8, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 33, 5, 8, 128, 11, 169, 75, 218, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 101, 35, 64, 0, 92, 54, 77, 65, 65, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 10, 41, 64, 0, 92, 72, 93, 210, 70, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 40, 27, 1, 2, 224, 178, 105, 10, 10, 130, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 80, 72, 1, 2, 224, 66, 234, 146, 54, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 217, 8, 16, 0, 151, 77, 83, 80, 16, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 129, 66, 10, 16, 0, 23, 82, 151, 180, 17, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 202, 70, 128, 0, 184, 108, 154, 130, 130, 32, 128, 0, 2, 8, 20, 90, 32, 99, 153, 125, 178, 112, 239, 121, 83, 188, 191, 207, 140, 243, 122, 35, 52, 175, 165, 89, 24, 1, 4, 16, 64, 0, 1, 4, 22, 70, 32, 186, 48, 201, 144, 10, 2, 8, 32, 128, 0, 2, 229, 45, 224, 41, 204, 13, 233, 63, 247, 56, 126, 114, 239, 45, 244, 148, 205, 195, 229, 163, 252, 60, 133, 215, 25, 133, 217, 153, 137, 249, 46, 116, 158, 164, 135, 0, 2, 8, 32, 128, 0, 2, 251, 23, 32, 0, 222, 191, 17, 115, 32, 128, 0, 2, 8, 84, 129, 64, 46, 208, 117, 193, 169, 11, 74, 93, 112, 106, 33, 207, 194, 94, 216, 15, 138, 39, 7, 198, 243, 173, 178, 203, 34, 164, 44, 34, 145, 176, 197, 98, 117, 86, 87, 87, 147, 77, 114, 225, 227, 237, 249, 22, 149, 229, 17, 64, 0, 1, 4, 16, 8, 140, 0, 1, 112, 96, 154, 154, 138, 34, 128, 0, 2, 8, 236, 17, 200, 132, 44, 237, 165, 45, 26, 141, 100, 227, 224, 177, 94, 96, 23, 4, 231, 2, 229, 61, 243, 206, 241, 73, 200, 69, 191, 154, 98, 245, 113, 107, 108, 106, 204, 230, 165, 215, 185, 247, 253, 15, 249, 131, 0, 2, 8, 32, 128, 0, 2, 69, 21, 32, 0, 46, 42, 55, 153, 33, 128, 0, 2, 8, 148, 86, 96, 108, 24, 114, 216, 179, 136, 133, 45, 157, 73, 91, 98, 36, 97, 67, 3, 67, 54, 154, 76, 250, 69, 11, 135, 221, 176, 229, 185, 151, 210, 197, 189, 174, 135, 57, 28, 14, 91, 188, 161, 222, 122, 118, 245, 216, 230, 231, 182, 88, 127, 255, 128, 159, 104, 38, 189, 239, 117, 200, 115, 207, 141, 37, 17, 64, 0, 1, 4, 16, 64, 96, 54, 2, 4, 192, 179, 209, 98, 94, 4, 16, 64, 0, 129, 138, 21, 112, 189, 187, 238, 58, 220, 176, 34, 212, 112, 40, 123, 15, 200, 164, 130, 222, 117, 235, 214, 217, 111, 239, 187, 215, 6, 182, 109, 179, 116, 104, 212, 106, 67, 13, 254, 144, 232, 249, 84, 212, 5, 192, 181, 117, 181, 214, 164, 158, 223, 237, 219, 186, 237, 246, 95, 255]);
fileData1.push.apply(fileData1, [198, 6, 6, 6, 44, 18, 141, 218, 104, 34, 49, 159, 164, 89, 22, 1, 4, 16, 64, 0, 1, 4, 230, 33, 64, 0, 60, 15, 60, 22, 69, 0, 1, 4, 16, 168, 28, 1, 55, 180, 217, 245, 238, 142, 191, 4, 183, 191, 175, 223, 238, 185, 231, 30, 251, 242, 151, 190, 100, 221, 155, 158, 181, 68, 104, 200, 226, 161, 86, 245, 224, 186, 94, 218, 241, 115, 78, 95, 207, 108, 143, 239, 222, 207, 221, 107, 23, 104, 215, 234, 154, 223, 104, 36, 98, 67, 67, 234, 93, 30, 29, 181, 140, 130, 226, 116, 58, 237, 186, 135, 247, 206, 204, 51, 4, 16, 64, 0, 1, 4, 16, 40, 170, 0, 1, 112, 81, 185, 201, 12, 1, 4, 16, 64, 160, 148, 2, 147, 67, 90, 23, 144, 238, 238, 237, 181, 167, 30, 93, 103, 139, 22, 117, 216, 224, 206, 140, 237, 182, 222, 133, 41, 98, 255, 222, 100, 162, 234, 249, 37, 248, 221, 235, 193, 51, 4, 16, 64, 0, 1, 4, 74, 37, 64, 0, 92, 42, 121, 242, 69, 0, 1, 4, 16, 40, 185, 192, 104, 90, 215, 253, 186, 46, 91, 127, 82, 175, 109, 76, 79, 66, 250, 163, 78, 218, 185, 222, 21, 218, 165, 230, 250, 120, 221, 205, 174, 220, 127, 25, 93, 103, 236, 134, 90, 103, 239, 60, 237, 103, 196, 31, 4, 16, 64, 0, 1, 4, 16, 40, 145, 0, 1, 112, 137, 224, 201, 22, 1, 4, 16, 64, 160, 244, 2, 117, 209, 90, 171, 137, 214, 88, 77, 77, 141, 223, 67, 155, 76, 106, 168, 178, 126, 179, 151, 81, 202, 165, 111, 27, 74, 128, 0, 2, 8, 32, 128, 64, 33, 4, 178, 119, 1, 41, 68, 202, 164, 137, 0, 2, 8, 32, 128, 64, 133, 9, 184, 192, 151, 224, 183, 194, 26, 141, 226, 34, 128, 0, 2, 8, 32, 48, 11, 1, 2, 224, 89, 96, 49, 43, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 229, 10, 16, 0, 87, 110, 219, 81, 114, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 129, 89, 8, 16, 0, 207, 2, 139, 89, 17, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 42, 87, 128, 0, 184, 114, 219, 142, 146, 35, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 204, 66, 128, 0, 120, 22, 88, 204, 138, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 80, 185, 2, 4, 192, 149, 219, 118, 148, 28, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 96, 22, 2, 4, 192, 179, 192, 98, 86, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 129, 202, 21, 32, 0, 174, 220, 182, 163, 228, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 179, 16, 32, 0, 158, 5, 22, 179, 34, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 84, 174, 0, 1, 112, 229, 182, 29, 37, 71, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 152, 133, 0, 1, 240, 44, 176, 152, 21, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 160, 114, 5, 8, 128, 43, 183, 237, 40, 57, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 192, 44, 4, 8, 128, 103, 129, 197, 172, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 149, 43, 64, 0, 92, 185, 109, 71, 201, 17, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 102, 33, 64, 0, 60, 11, 44, 102, 69, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 168, 92, 1, 2, 224, 202, 109, 59, 74, 142, 0, 2, 8, 32, 176, 64, 2, 145, 72, 196, 79, 41, 20, 10, 45, 80, 138, 36, 131, 0, 2, 8, 32, 128, 0, 2, 229, 40, 16, 45, 199, 66, 81, 38, 4, 16, 64, 0, 129, 249, 11, 120, 158, 55, 255, 68, 2, 146, 194, 200, 200, 136, 197, 227, 113, 115, 241, 111, 36, 18, 182, 74, 161, 203, 197, 235, 174, 188, 174, 189, 105, 243, 128, 172, 176, 84, 19, 1, 4, 16, 64, 96, 206, 2, 4, 192, 115, 166, 99, 65, 4, 16, 64, 160, 188, 5, 232, 205, 156, 89, 251, 36, 71, 71, 253, 25, 235, 98, 117, 122, 108, 246, 159, 151, 123, 32, 233, 218, 214, 157, 222, 112, 253, 213, 97, 245, 94, 167, 83, 41, 75, 36, 70, 108, 120, 120, 196, 47, 63, 127, 16, 64, 0, 1, 4, 16, 64, 96, 106, 1, 2, 224, 169, 93, 120, 23, 1, 4, 16, 168, 56, 129, 241, 189, 150, 126, 128, 52, 254, 141, 138, 171, 77, 145, 10, 172, 8, 50, 90, 91, 235, 103, 182, 117, 203, 214, 34, 101, 90, 184, 108, 162, 53, 81, 75, 37, 83, 133, 203, 128, 148, 17, 64, 0, 1, 4, 16, 168, 112, 1, 2, 224, 10, 111, 64, 138, 143, 0, 2, 149, 39, 224, 130, 211, 112, 120, 97, 175, 53, 117, 177, 110, 38, 147, 97, 8, 236, 126, 86, 135, 140, 101, 44, 172, 255, 114, 83, 125, 125, 189, 29, 115, 204, 49, 246, 129, 255, 243, 1, 91, 191, 233, 41, 11, 43, 118, 140, 199, 234, 213, 187, 234, 249, 189, 171, 185, 249, 202, 241, 209, 245, 82, 71, 163, 81, 107, 106, 106, 182, 157, 61, 59, 237, 137, 39, 30, 183, 187, 255, 112, 183, 213, 212, 214, 248, 65, 112, 185, 247, 98, 151, 163, 41, 101, 66, 0, 1, 4, 16, 168, 126, 1, 2, 224, 234, 111, 99, 106, 136, 0, 2, 101, 38, 224, 2, 224, 104, 180, 102, 1, 131, 85, 13, 135, 245, 50, 170, 165, 194, 59, 5, 193, 110, 10, 135, 195, 186, 158, 117, 97, 131, 108, 63, 225, 10, 254, 147, 13, 106, 221, 208, 225, 236, 181, 209, 33, 133, 184, 46, 216, 61, 241, 121, 207, 179, 229, 203, 151, 219, 192, 200, 128, 133, 210, 10, 42, 35, 106, 155, 177, 121, 202, 185, 186, 185, 0, 184, 165, 165, 197, 54, 111, 217, 108, 55, 253, 244, 38, 123, 240, 129, 135, 116, 13, 115, 196, 194, 106, 251, 68, 34, 59, 180, 187, 156, 235, 64, 217, 16, 64, 0, 1, 4, 16, 40, 182, 0, 1, 112, 177, 197, 201, 15, 1, 4, 2, 47, 144, 237, 1, 118, 55, 90, 82, 47, 163, 31, 163, 206, 61, 80, 205, 166, 17, 82, 224, 27, 178, 116, 122, 239, 208, 87, 23, 0, 51, 77, 20, 112, 1, 175, 155, 92, 112, 235, 122, 204, 211, 94, 74, 39, 10, 34, 214, 214, 214, 102, 77, 205, 77, 22, 209, 127, 110, 22, 47, 148, 13, 144, 39, 46, 93, 190, 175, 34, 170, 67, 199, 162, 78, 123, 124, 221, 227, 254, 137, 21, 215, 244, 153, 140, 219, 189, 87, 118, 0, 92, 201, 231, 111, 220, 250, 197, 132, 0, 2, 8, 32, 80, 158, 2, 4, 192, 229, 217, 46, 148, 10, 1, 4, 170, 88, 32, 55, 52, 117, 33, 122, 104, 115, 105, 84, 114, 176, 80, 138, 166, 246, 59, 204, 61, 133, 196, 81, 55, 212, 57, 108, 53, 234, 145, 223, 211, 233, 59, 247, 243, 17, 69, 175, 74, 174, 167, 58, 153, 74, 90, 98, 52, 97, 153, 116, 90, 65, 125, 212, 15, 242, 139, 94, 24, 50, 68, 0, 1, 4, 16, 64, 160, 2, 4, 8, 128, 43, 160, 145, 40, 34, 2, 8, 32, 128, 192, 66, 9, 140, 13, 127, 14, 103, 3, 223, 9, 169, 86, 80, 224, 235, 202, 237, 159, 72, 25, 43, 243, 168, 238, 0, 61, 212, 63, 100, 53, 117, 53, 186, 35, 116, 122, 111, 48, 63, 161, 130, 188, 64, 0, 1, 4, 16, 64, 0, 1, 2, 96, 214, 1, 4, 16, 64, 0, 129, 64, 8, 184, 222, 210, 76, 198, 243, 175, 143, 13, 135, 246, 14, 17, 207, 245, 162, 230, 134, 72, 87, 10, 70, 174, 247, 223, 149, 55, 164, 250, 184, 215, 227, 223, 171, 148, 122, 80, 78, 4, 16, 64, 0, 1, 4, 138, 41, 64, 0, 92, 76, 109, 242, 66, 0, 1, 4, 16, 40, 153, 128, 11, 112, 221, 221, 183, 39, 119, 244, 238, 251, 78, 201, 138, 56, 239, 140, 115, 193, 252, 188, 19, 34, 1, 4, 16, 64, 0, 1, 4, 170, 84, 96, 239, 41, 240, 42, 173, 32, 213, 66, 0, 1, 4, 16, 64, 32, 39, 48, 57, 248, 205, 189, 207, 35, 2, 8, 32, 128, 0, 2, 8, 4, 67, 128, 0, 56, 24, 237, 76, 45, 17, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 129, 192, 11, 16, 0, 7, 126, 21, 0, 0, 1, 4, 74, 37, 224, 110, 98, 148, 251, 221, 222, 82, 149, 129, 124, 17, 64, 0, 1, 4, 16, 64, 0, 129, 32, 9, 16, 0, 7, 169, 181, 169, 43, 2, 8, 148, 133, 128, 187, 81, 81, 238, 167, 144, 248, 189, 222, 178, 104, 18, 10, 129, 0, 2, 8, 32, 128, 0, 2, 1, 17, 32, 0, 14, 72, 67, 83, 77, 4, 16, 40, 31, 1, 23, 252, 230, 2, 224, 242, 41, 21, 37, 65, 0, 1, 4, 16, 64, 0, 1, 4, 170, 95, 128, 0, 184, 250, 219, 152, 26, 34, 128, 64, 153, 9, 240, 115, 53, 101, 214, 32, 20, 7, 1, 4, 16, 64, 0, 1, 4, 2, 35, 64, 0, 28, 152, 166, 166, 162, 8, 32, 80, 46, 2, 238, 186, 95, 174, 253, 45, 151, 214, 160, 28, 8, 32, 128, 0, 2, 8, 32, 16, 36, 1, 2, 224, 32, 181, 54, 117, 69, 0, 129, 178, 16, 160, 7, 184, 44, 154, 129, 66, 32, 128, 0, 2, 8, 32, 128, 64, 0, 5, 8, 128, 3, 216, 232, 84, 25, 1, 4, 74, 43, 224, 2, 224, 220, 205, 175, 210, 233, 52, 215, 3, 151, 182, 57, 200, 29, 1, 4, 16, 64, 0, 1, 4, 2, 36, 64, 0, 28, 160, 198, 166, 170, 8, 32, 80, 94, 2, 185, 64, 216, 61, 50, 33, 128, 0, 2, 8, 32, 128, 0, 2, 8, 20, 94, 128, 0, 184, 240, 198, 228, 128, 0, 2, 8, 76, 16, 24, 127, 7, 104, 130, 223, 9, 52, 188, 64, 0, 1, 4, 16, 64, 0, 1, 4, 10, 42, 64, 0, 92, 80, 94, 18, 71, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 40, 23, 1, 2, 224, 114, 105, 9, 202, 129, 0, 2, 8, 32, 80, 112, 1, 253, 2, 115, 193, 243, 32, 3, 4, 16, 64, 0, 1, 4, 16, 40, 95, 1, 2, 224, 242, 109, 27, 74, 134, 0, 2, 8, 32, 176, 128, 2, 46, 248, 205, 100, 244, 119, 82, 12, 236, 222, 119, 255, 49, 33, 128, 0, 2, 8, 32, 128, 64, 245, 11, 68, 171, 191, 138, 212, 16, 1, 4, 16, 64, 0, 1, 179, 144, 254, 139, 132, 67, 251, 132, 187, 238, 253, 74, 159, 114, 65, 124, 53, 212, 165, 210, 219, 130, 242, 35, 128, 0, 2, 8, 148, 183, 0, 61, 192, 229, 221, 62, 148, 14, 1, 4, 16, 64, 160, 0, 2, 158, 122, 130, 51, 233, 2, 36, 92, 162, 36, 107, 162, 181, 86, 83, 91, 107, 137, 145, 225, 61, 63, 177, 85, 162, 162, 144, 45, 2, 8, 32, 128, 0, 2, 101, 45, 64, 0, 92, 214, 205, 67, 225, 16, 64, 0, 1, 4, 10, 35, 16, 178, 140, 151, 82, 210, 213, 49, 244, 57, 30, 143, 91, 115, 75, 147, 133, 188, 136, 235, 234, 54, 238, 46, 94, 152, 181, 134, 84, 17, 64, 0, 1, 4, 42, 95, 128, 33, 208, 149, 223, 134, 212, 0, 1, 4, 42, 76, 192, 5, 39, 238, 167, 144, 198, 255, 28, 210, 124, 170, 224, 210, 203, 100, 50, 254, 208, 222, 202, 31, 204, 59, 31, 137, 153, 47, 27, 210, 233, 223, 104, 56, 42, 55, 179, 145, 145, 65, 27, 26, 26, 178, 228, 104, 114, 230, 9, 204, 97, 206, 133, 14, 74, 221, 250, 19, 137, 68, 172, 73, 129, 239, 142, 238, 29, 182, 179, 123, 167, 69, 234, 34, 234, 217, 214, 186, 48, 249, 66, 231, 57, 148, 151, 69, 16, 64, 0, 1, 4, 16, 168, 70, 1, 2, 224, 106, 108, 85, 234, 132, 0, 2, 101, 45, 224, 130, 147, 116, 58, 189, 96, 65, 138, 11, 172, 210, 26, 207, 235, 98, 158, 72, 52, 226, 167, 157, 74, 185, 222, 77, 166, 241, 2, 185, 235, 100, 195, 182, 119, 240, 83, 34, 49, 100, 235, 214, 173, 179, 187, 239, 185, 199, 182, 111, 217, 106, 97, 5, 148, 209, 104, 212, 111, 155, 133, 12, 88, 93, 155, 71, 107, 162, 22, 210, 53, 200, 11, 213, 233, 236, 234, 19, 141, 68, 173, 177, 165, 217, 186, 119, 110, 183, 223, 253, 239, 157, 230, 41, 248, 77, 36, 70, 253, 117, 96, 124, 221, 121, 94, 88, 1, 183, 237, 105, 51, 100, 66, 0, 1, 4, 16, 168, 0, 1, 2, 224, 10, 104, 36, 138, 136, 0, 2, 213, 37, 224, 122, 107, 221, 191, 66, 79, 244, 2, 78, 20, 158, 234, 6, 81, 195, 186, 102, 246, 254, 63, 253, 201, 190, 244, 249, 47, 216, 99, 143, 63, 62, 113, 129, 5, 126, 85, 163, 0, 56, 108, 17, 191, 167, 126, 190, 73, 251, 117, 81, 192, 229, 78, 116, 184, 147, 31, 77, 245, 77, 150, 9, 103, 44, 157, 74, 219, 232, 232, 232, 124, 147, 103, 121, 4, 16, 64, 0, 1, 4, 170, 86, 128, 0, 184, 106, 155, 150, 138, 33, 128, 64, 208, 4, 198, 247, 64, 17, 252, 78, 221, 250, 147, 131, 224, 212, 104, 74, 67, 135, 119, 248, 193, 239, 138, 21, 43, 252, 161, 208, 174, 231, 119, 190, 126, 147, 211, 152, 111, 122, 147, 107, 147, 75, 223, 61, 186, 94, 101, 55, 236, 121, 100, 100, 68, 189, 191, 137, 201, 179, 242, 186, 8, 2, 110, 219, 115, 189, 192, 76, 8, 32, 128, 0, 2, 229, 47, 64, 0, 92, 254, 109, 68, 9, 17, 64, 0, 129, 57, 9, 184, 224, 136, 41, 191, 128, 51, 114, 67, 158, 221, 212, 223, 223, 111, 3, 3, 3, 10, 100, 92, 15, 253, 252, 163, 25, 63, 56, 29, 107, 3, 191, 37, 246, 254, 201, 95, 168, 57, 124, 234, 134, 67, 187, 97, 245, 11, 53, 188, 122, 14, 69, 96, 145, 73, 2, 238, 58, 115, 127, 154, 255, 170, 52, 41, 229, 137, 47, 9, 188, 39, 122, 240, 10, 1, 4, 16, 216, 159, 0, 1, 240, 254, 132, 248, 28, 1, 4, 16, 168, 80, 129, 133, 238, 117, 172, 80, 134, 253, 22, 219, 221, 72, 202, 221, 69, 217, 77, 206, 204, 191, 161, 216, 2, 4, 45, 227, 253, 93, 28, 28, 10, 107, 0, 180, 254, 45, 244, 228, 2, 109, 151, 151, 23, 82, 217, 21, 188, 51, 149, 72, 192, 157, 224, 24, 191, 222, 140, 127, 94, 160, 34, 17, 252, 22, 8, 150, 100, 17, 64, 160, 170, 5, 8, 128, 171, 186, 121, 169, 28, 2, 8, 4, 89, 128, 30, 224, 153, 181, 190, 11, 30, 147, 201, 164, 213, 213, 213, 101, 3, 201, 66, 4, 46, 234, 14, 116, 55, 172, 10, 23, 32, 0, 118, 181, 116, 129, 80, 182, 231, 122, 102, 117, 102, 174, 133, 21, 112, 254, 126, 103, 191, 59, 191, 49, 182, 254, 228, 130, 211, 177, 65, 0, 11, 155, 33, 169, 33, 128, 0, 2, 8, 204, 89, 128, 0, 120, 206, 116, 44, 136, 0, 2, 8, 32, 80, 45, 2, 133, 62, 89, 224, 58, 7, 115, 121, 140, 239, 25, 94, 72, 191, 92, 192, 181, 144, 105, 146, 214, 204, 4, 246, 4, 185, 227, 78, 158, 236, 121, 111, 102, 73, 48, 23, 2, 8, 32, 128, 64, 145, 4, 22, 126, 44, 86, 145, 10, 78, 54, 8, 32, 128, 0, 2, 8, 32, 176, 55, 176, 54, 255, 26, 99, 68, 16, 64, 0, 1, 4, 16, 64, 32, 159, 0, 1, 112, 62, 29, 62, 67, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 168, 26, 1, 2, 224, 170, 105, 74, 42, 130, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 144, 79, 128, 0, 56, 159, 14, 159, 33, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 84, 141, 0, 1, 112, 213, 52, 37, 21, 65, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 200, 39, 64, 0, 156, 79, 135, 207, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 170, 70, 128, 0, 184, 106, 154, 146, 138, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 228, 19, 32, 0, 206, 167, 195, 103, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 85, 35, 64, 0, 92, 53, 77, 73, 69, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 242, 9, 16, 0, 231, 211, 225, 51, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 129, 170, 17, 32, 0, 174, 154, 166, 164, 34, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 249, 4, 8, 128, 243, 233, 240, 25, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 213, 8, 16, 0, 87, 77, 83, 82, 17, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 129, 124, 2, 4, 192, 249, 116, 248, 12, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 160, 106, 4, 8, 128, 171, 166, 41, 169, 8, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 62, 1, 2, 224, 124, 58, 124, 134, 0, 2, 8, 32, 128, 64, 133, 8, 132, 42, 164, 156, 20, 19, 1, 4, 16, 64, 0, 129, 82, 10, 16, 0, 151, 82, 159, 188, 17, 64, 0, 129, 2, 10, 120, 158, 87, 192, 212, 73, 122, 182, 2, 153, 76, 198, 10, 217, 38, 52, 247, 108, 91, 132, 249, 17, 64, 0, 1, 4, 130, 40, 16, 13, 98, 165, 169, 51, 2, 8, 32, 80, 237, 2, 161, 16, 253, 129, 229, 212, 198, 185, 246, 112, 65, 112, 56, 28, 182, 220, 235, 133, 40, 163, 11, 170, 221, 63, 154, 124, 33, 52, 73, 3, 1, 4, 16, 64, 160, 218, 5, 8, 128, 171, 189, 133, 169, 31, 2, 8, 84, 189, 128, 11, 124, 92, 239, 31, 61, 128, 229, 219, 212, 153, 76, 218, 66, 225, 144, 185, 255, 114, 1, 235, 130, 149, 214, 181, 189, 251, 207, 117, 248, 187, 243, 30, 116, 252, 47, 24, 45, 9, 33, 128, 0, 2, 8, 84, 159, 0, 1, 112, 245, 181, 41, 53, 66, 0, 129, 114, 23, 80, 144, 178, 144, 61, 128, 174, 186, 10, 171, 202, 189, 214, 129, 46, 159, 107, 29, 47, 163, 191, 58, 91, 145, 206, 164, 22, 220, 34, 28, 10, 91, 198, 203, 16, 252, 46, 184, 44, 9, 34, 128, 0, 2, 8, 84, 155, 0, 1, 112, 181, 181, 40, 245, 65, 0, 129, 178, 23, 112, 189, 128, 145, 112, 196, 239, 181, 115, 207, 231, 51, 185, 158, 63, 151, 134, 11, 126, 60, 13, 175, 101, 42, 79, 129, 108, 199, 108, 198, 220, 16, 232, 5, 239, 170, 87, 226, 25, 134, 0, 148, 103, 195, 83, 42, 4, 16, 64, 0, 129, 178, 19, 224, 38, 88, 101, 215, 36, 20, 8, 1, 4, 130, 34, 48, 223, 224, 215, 57, 45, 68, 26, 65, 241, 46, 101, 61, 247, 196, 167, 46, 18, 94, 232, 139, 117, 149, 30, 253, 255, 165, 108, 93, 242, 70, 0, 1, 4, 16, 168, 36, 1, 122, 128, 43, 169, 181, 40, 43, 2, 8, 32, 128, 64, 69, 11, 68, 66, 17, 83, 63, 176, 121, 243, 235, 248, 223, 99, 224, 78, 128, 184, 225, 244, 254, 240, 231, 61, 239, 242, 4, 1, 4, 16, 64, 0, 1, 4, 166, 19, 32, 0, 158, 78, 134, 247, 17, 64, 0, 1, 4, 16, 88, 96, 1, 55, 100, 221, 93, 175, 187, 144, 147, 75, 147, 9, 1, 4, 16, 64, 0, 1, 4, 102, 38, 176, 176, 123, 225, 153, 229, 201, 92, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 20, 93, 128, 0, 184, 232, 228, 100, 136, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 80, 10, 1, 2, 224, 82, 168, 147, 39, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 209, 5, 8, 128, 139, 78, 78, 134, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 165, 16, 32, 0, 46, 133, 58, 121, 34, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 20, 93, 128, 0, 184, 232, 228, 100, 136, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 80, 10, 1, 2, 224, 82, 168, 147, 39, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 209, 5, 8, 128, 139, 78, 78, 134, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 165, 16, 32, 0, 46, 133, 58, 121, 34, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 20, 93, 128, 0, 184, 232, 228, 100, 136, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 80, 10, 1, 2, 224, 82, 168, 147, 39, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 209, 5, 8, 128, 139, 78, 78, 134, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 165, 16, 32, 0, 46, 133, 58, 121, 34, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 20, 93, 128, 0, 184, 232, 228, 100, 136, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 80, 10, 1, 2, 224, 82, 168, 147, 39, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 209, 5, 8, 128, 139, 78, 78, 134, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 165, 16, 32, 0, 46, 133, 58, 121, 34, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 20, 93, 128, 0, 184, 232, 228, 100, 136, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 80, 10, 1, 2, 224, 82, 168, 147, 39, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 209, 5, 8, 128, 139, 78, 78, 134, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 165, 16, 32, 0, 46, 133, 58, 121, 34, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 20, 93, 128, 0, 184, 232, 228, 100, 136, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 80, 10, 1, 2, 224, 82, 168, 147, 39, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 209, 5, 8, 128, 139, 78, 78, 134, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 165, 16, 32, 0, 46, 133, 58, 121, 34, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 20, 93, 128, 0, 184, 232, 228, 100, 136, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 80, 10, 1, 2, 224, 82, 168, 147, 39, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 209, 5, 8, 128, 139, 78, 78, 134, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 165, 16, 32, 0, 46, 133, 58, 121, 34, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 20, 93, 128, 0, 184, 232, 228, 100, 136, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 80, 10, 1, 2, 224, 82, 168, 147, 39, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 209, 5, 8, 128, 139, 78, 78, 134, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 165, 16, 32, 0, 46, 133, 58, 121, 34, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 20, 93, 128, 0, 184, 232, 228, 100, 136, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 80, 10, 1, 2, 224, 82, 168, 147, 39, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 209, 5, 8, 128, 139, 78, 78, 134, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 165, 16, 32, 0, 46, 133, 58, 121, 34, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 20, 93, 128, 0, 184, 232, 228, 100, 136, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 80, 10, 1, 2, 224, 82, 168, 147, 39, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 209, 5, 8, 128, 139, 78, 78, 134, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 165, 16, 32, 0, 46, 133, 58, 121, 34, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 20, 93, 128, 0, 184, 232, 228, 100, 136, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 80, 10, 1, 2, 224, 82, 168, 147, 39, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 209, 5, 8, 128, 139, 78, 78, 134, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 165, 16, 32, 0, 46, 133, 58, 121, 34, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 20, 93, 128, 0, 184, 232, 228, 100, 136, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 80, 10, 1, 2, 224, 82, 168, 147, 39, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 209, 5, 8, 128, 139, 78, 78, 134, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 165, 16, 32, 0, 46, 133, 58, 121, 34, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 20, 93, 128, 0, 184, 232, 228, 100, 136, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 80, 10, 1, 2, 224, 82, 168, 147, 39, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 209, 5, 8, 128, 139, 78, 78, 134, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 165, 16, 32, 0, 46, 133, 58, 121, 34, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 20, 93, 128, 0, 184, 232, 228, 100, 136, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 80, 10, 1, 2, 224, 82, 168, 147, 39, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 209, 5, 8, 128, 139, 78, 78, 134, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 165, 16, 32, 0, 46, 133, 58, 121, 34, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 20, 93, 128, 0, 184, 232, 228, 100, 136, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 80, 10, 1, 2, 224, 82, 168, 147, 39, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 209, 5, 8, 128, 139, 78, 78, 134, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 165, 16, 32, 0, 46, 133, 58, 121, 34, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 20, 93, 128, 0, 184, 232, 228, 100, 136, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 80, 10, 1, 2, 224, 82, 168, 147, 39, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 209, 5, 8, 128, 139, 78, 78, 134, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 165, 16, 32, 0, 46, 133, 58, 121, 34, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 20, 93, 128, 0, 184, 232, 228, 100, 136, 0, 2, 8, 152, 133, 244, 159, 231, 121, 150, 241, 50, 254, 35, 38, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 133, 23, 136, 22, 62, 11, 114, 64, 0, 1, 4, 16, 152, 44, 144, 241, 210, 230, 77, 126, 115, 1, 95, 135, 66, 10, 177, 221, 63, 253, 199, 52, 189, 64, 206, 105, 250, 57, 248, 4, 1, 4, 16, 64, 0, 1, 4, 170, 73, 128, 0, 184, 154, 90, 147, 186, 32, 128, 64, 69, 8, 184, 158, 223, 116, 218, 179, 112, 36, 98, 97, 5, 169, 133, 152, 210, 233, 180, 141, 140, 36, 44, 145, 76, 88, 36, 19, 41, 68, 22, 21, 159, 102, 36, 28, 181, 161, 225, 97, 75, 200, 41, 162, 182, 168, 216, 201, 63, 147, 82, 200, 211, 41, 21, 43, 67, 193, 17, 64, 0, 1, 4, 16, 216, 71, 128, 0, 120, 31, 18, 222, 64, 0, 1, 4, 10, 43, 224, 130, 173, 218, 218, 90, 27, 77, 142, 250, 195, 159, 93, 47, 228, 124, 38, 127, 249, 73, 241, 79, 60, 22, 179, 197, 157, 157, 22, 143, 197, 231, 147, 116, 213, 47, 187, 184, 107, 177, 181, 44, 110, 53, 47, 153, 177, 80, 60, 219, 107, 94, 136, 74, 231, 154, 184, 16, 61, 242, 174, 253, 195, 250, 207, 13, 167, 103, 10, 150, 128, 91, 175, 116, 62, 141, 9, 1, 4, 16, 64, 96, 22, 2, 4, 192, 179, 192, 98, 86, 4, 16, 64, 96, 33, 4, 194, 225, 112, 246, 26, 224, 140, 167, 97, 208, 10, 188, 188, 249, 5, 192, 185, 50, 185, 3, 225, 84, 58, 229, 191, 220, 176, 125, 139, 221, 254, 219, 223, 216, 198, 109, 155, 44, 156, 82, 250, 11, 147, 69, 46, 171, 170, 120, 116, 36, 3, 131, 131, 246, 224, 159, 30, 180, 148, 134, 164, 39, 147, 201, 130, 5, 145, 174, 109, 116, 213, 183, 101, 50, 233, 170, 176, 43, 70, 37, 8, 236, 138, 161, 76, 30, 8, 32, 128, 64, 240, 4, 220, 254, 159, 115, 135, 193, 107, 119, 106, 140, 0, 2, 37, 20, 200, 245, 248, 186, 161, 208, 133, 152, 106, 148, 104, 178, 165, 209, 186, 226, 13, 214, 160, 199, 168, 87, 193, 195, 123, 11, 1, 52, 46, 205, 145, 225, 17, 219, 189, 171, 215, 118, 15, 245, 101, 79, 74, 20, 168, 77, 198, 101, 201, 83, 4, 16, 64, 0, 1, 4, 16, 40, 161, 0, 61, 192, 37, 196, 39, 107, 4, 16, 8, 166, 64, 161, 2, 223, 156, 166, 235, 3, 142, 245, 143, 216, 176, 2, 223, 196, 80, 66, 125, 204, 12, 141, 205, 217, 236, 243, 24, 82, 47, 124, 88, 189, 178, 58, 23, 225, 250, 227, 153, 16, 64, 0, 1, 4, 16, 64, 160, 186, 5, 8, 128, 171, 187, 125, 169, 29, 2, 8, 4, 80, 192, 133, 113, 163, 10, 236, 194, 169, 164, 185, 225, 214, 76, 211, 11, 184, 147, 17, 110, 232, 51, 19, 2, 8, 32, 128, 0, 2, 8, 4, 67, 128, 33, 208, 193, 104, 103, 106, 137, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 4, 94, 128, 174, 129, 192, 175, 2, 0, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 193, 16, 32, 0, 14, 70, 59, 83, 75, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 32, 240, 2, 4, 192, 129, 95, 5, 0, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 130, 33, 64, 0, 28, 140, 118, 166, 150, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 224, 5, 8, 128, 3, 191, 10, 0, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 4, 67, 128, 0, 56, 24, 237, 76, 45, 17, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 129, 192, 11, 16, 0, 7, 126, 21, 0, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 8, 134, 0, 1, 112, 48, 218, 153, 90, 34, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 129, 23, 32, 0, 14, 252, 42, 0, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 16, 12, 1, 2, 224, 96, 180, 51, 181, 68, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 2, 47, 64, 0, 28, 248, 85, 0, 0, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 32, 24, 2, 4, 192, 193, 104, 103, 106, 137, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 4, 94, 128, 0, 56, 240, 171, 0, 0, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 48, 4, 8, 128, 131, 209, 206, 212, 18, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 8, 188, 0, 1, 112, 224, 87, 1, 0, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 129, 96, 8, 16, 0, 7, 163, 157, 169, 37, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 16, 120, 1, 2, 224, 192, 175, 2, 0, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 193, 16, 32, 0, 14, 70, 59, 83, 75, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 32, 240, 2, 4, 192, 129, 95, 5, 0, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 130, 33, 64, 0, 28, 140, 118, 166, 150, 8, 32, 128, 0, 2, 8, 32, 128, 0, 2, 8, 32, 128, 64, 224, 5, 162, 129, 23, 0, 0, 129, 133, 16, 8, 153, 133, 67, 33, 115, 255, 101, 60, 51, 79, 255, 204, 50, 230, 159, 97, 10, 233, 175, 62, 207, 152, 222, 116, 31, 46, 224, 20, 82, 158, 225, 176, 210, 87, 134, 46, 101, 207, 61, 102, 51, 207, 155, 75, 72, 203, 184, 101, 199, 10, 154, 119, 222, 153, 126, 232, 234, 238, 74, 225, 121, 170, 233, 194, 86, 51, 127, 17, 198, 12, 66, 51, 48, 112, 117, 118, 117, 119, 5, 204, 86, 223, 179, 204, 60, 218, 100, 143, 191, 74, 232, 220, 51, 153, 76, 254, 178, 46, 224, 167, 185, 186, 228, 234, 189, 80, 73, 59, 151, 140, 179, 156, 228, 226, 214, 51, 191, 141, 67, 217, 207, 102, 178, 158, 77, 87, 38, 151, 71, 72, 219, 133, 75, 207, 148, 158, 115, 83, 150, 83, 78, 123, 242, 245, 215, 240, 41, 103, 153, 197, 155, 202, 113, 63, 249, 205, 34, 177, 217, 205, 170, 74, 251, 223, 17, 122, 220, 175, 157, 3, 114, 109, 160, 28, 252, 191, 217, 141, 123, 118, 249, 205, 98, 110, 255, 59, 68, 243, 187, 246, 112, 223, 83, 110, 27, 158, 43, 119, 238, 187, 101, 86, 235, 229, 2, 212, 119, 79, 190, 170, 71, 118, 125, 154, 102, 133, 218, 143, 75, 118, 187, 146, 132, 191, 184, 218, 202, 173, 47, 110, 229, 156, 180, 61, 236, 39, 153, 89, 127, 236, 231, 43, 7, 247, 232, 127, 151, 204, 161, 13, 252, 109, 101, 108, 121, 87, 0, 183, 238, 76, 222, 142, 247, 91, 48, 45, 31, 113, 223, 145, 110, 121, 183, 14, 206, 242, 251, 60, 28, 30, 171, 131, 86, 161, 44, 153, 167, 253, 160, 195, 212, 58, 173, 207, 220, 179, 249, 172, 95, 174, 92, 211, 78, 126, 22, 250, 163, 188, 92, 189, 245, 45, 175, 231, 11, 183, 31, 30, 191, 110, 248, 171, 199, 180, 5, 241, 107, 155, 173, 171, 138, 224, 111, 239, 217, 138, 231, 89, 130, 143, 16, 64, 160, 152, 2, 238, 219, 97, 127, 219, 113, 49, 203, 67, 94, 8, 84, 150, 128, 182, 32, 63, 158, 74, 187, 93, 252, 222, 224, 39, 162, 83, 75, 158, 254, 101, 50, 154, 97, 116, 239, 38, 22, 213, 161, 128, 102, 213, 206, 121, 239, 188, 115, 173, 176, 59, 88, 117, 187, 248, 201, 211, 116, 239, 79, 158, 175, 144, 175, 117, 12, 165, 157, 126, 33, 115, 24, 75, 123, 154, 140, 166, 52, 152, 110, 94, 189, 191, 223, 128, 100, 138, 170, 76, 153, 199, 20, 243, 21, 228, 173, 105, 234, 178, 144, 121, 229, 14, 196, 199, 206, 20, 236, 147, 244, 92, 235, 63, 221, 78, 103, 159, 42, 237, 243, 198, 62, 69, 152, 215, 27, 5, 78, 126, 98, 217, 230, 145, 153, 59, 75, 237, 190, 45, 20, 62, 155, 167, 0, 34, 227, 165, 23, 108, 175, 61, 93, 27, 186, 240, 199, 125, 117, 77, 241, 245, 162, 55, 11, 59, 141, 175, 111, 198, 63, 87, 165, 218, 23, 227, 187, 68, 213, 10, 71, 34, 150, 73, 203, 119, 210, 228, 83, 200, 190, 80, 65, 112, 88, 39, 131, 50, 46, 224, 157, 199, 180, 103, 123, 157, 148, 134, 191, 222, 140, 219, 55, 77, 250, 120, 226, 203, 105, 214, 211, 233, 214, 147, 241, 11, 135, 35, 122, 149, 150, 159, 237, 245, 139, 212, 168, 233, 28, 155, 107, 200, 212, 222, 250, 69, 181, 54, 167, 181, 227, 204, 6, 194, 11, 208, 184, 202, 195, 111, 30, 151, 207, 184, 186, 70, 181, 50, 165, 106, 92, 222, 202, 35, 153, 205, 199, 205, 225, 76, 84, 84, 149, 119, 111, 153, 244, 42, 239, 228, 78, 176, 204, 117, 191, 237, 178, 114, 185, 239, 201, 215, 237, 255, 23, 160, 218, 121, 11, 204, 135, 8, 32, 144, 87, 192, 255, 94, 207, 59, 7, 31, 34, 128, 192, 148, 2, 174, 99, 215, 180, 195, 245, 207, 50, 55, 166, 237, 128, 246, 78, 139, 213, 180, 104, 103, 159, 210, 65, 148, 62, 210, 191, 58, 119, 198, 59, 18, 182, 100, 196, 179, 173, 163, 67, 54, 186, 101, 171, 118, 198, 218, 17, 250, 59, 127, 237, 1, 231, 24, 37, 230, 54, 220, 182, 174, 78, 107, 111, 106, 241, 211, 113, 7, 172, 219, 18, 3, 54, 180, 113, 155, 118, 239, 58, 160, 10, 77, 179, 147, 213, 65, 206, 178, 213, 171, 44, 238, 87, 96, 202, 170, 205, 225, 77, 183, 55, 119, 22, 73, 235, 233, 221, 105, 61, 59, 7, 44, 18, 209, 65, 78, 186, 112, 123, 249, 220, 1, 73, 67, 123, 187, 45, 106, 107, 179, 90, 149, 32, 165, 179, 254, 187, 122, 119, 88, 95, 79, 159, 14, 136, 116, 48, 230, 130, 5, 77, 185, 227, 186, 230, 174, 46, 107, 109, 109, 177, 154, 100, 218, 66, 106, 147, 196, 200, 110, 219, 184, 113, 103, 182, 61, 102, 122, 82, 194, 29, 108, 233, 168, 46, 19, 246, 108, 241, 210, 37, 214, 28, 111, 84, 14, 25, 27, 29, 29, 182, 45, 219, 182, 90, 50, 161, 30, 15, 23, 168, 20, 162, 199, 72, 21, 241, 219, 94, 235, 77, 251, 178, 165, 214, 210, 208, 96, 97, 119, 16, 231, 42, 184, 80, 147, 146, 26, 73, 244, 218, 115, 114, 137, 212, 68, 45, 157, 76, 89, 164, 169, 201, 150, 116, 118, 106, 157, 113, 39, 93, 204, 122, 251, 123, 108, 231, 246, 93, 19, 140, 103, 146, 125, 68, 235, 92, 90, 7, 250, 45, 237, 77, 214, 222, 186, 72, 203, 235, 80, 56, 60, 98, 219, 183, 119, 91, 223, 238, 196, 158, 36, 114, 109, 59, 62, 95, 119, 168, 58, 223, 90, 186, 205, 45, 26, 77, 89, 111, 95, 175, 109, 223, 186, 59, 107, 185, 39, 215, 194, 60, 9, 203, 48, 35, 195, 250, 69, 237, 182, 184, 181, 213, 220, 193, 255, 140, 182, 10, 21, 118, 71, 40, 101, 187, 83, 114, 25, 214, 191, 222, 94, 157, 76, 51, 115, 7, 211, 25, 125, 167, 120, 179, 56, 120, 159, 170, 102, 174, 55, 218, 245, 108, 198, 154, 26, 109, 73, 71, 135, 122, 253, 34, 42, 89, 200, 250, 60, 181, 199, 174, 110, 139, 246, 38, 44, 165, 109, 88, 13, 54, 213, 226, 19, 222, 27, 31, 124, 117, 172, 88, 110, 77, 177, 184, 214, 75, 109, 123, 179, 89, 47, 167, 169, 111, 246, 187, 76, 101, 112, 141, 55, 105, 218, 55, 223, 152, 105, 179, 182, 161, 225, 65, 219, 186, 109, 139, 233, 171, 120, 198, 83, 77, 172, 206, 146, 35, 9, 107, 94, 210, 101, 29, 141, 141, 99, 61, 192, 202, 86, 4, 79, 37, 244, 125, 178, 177, 219, 119, 159, 77, 208, 52, 147, 204, 107, 106, 106, 44, 153, 76, 218, 98, 229, 219, 212, 224, 190, 75, 148, 167, 254, 219, 178, 243, 41, 27, 86, 147, 207, 100, 114, 61, 191, 174, 215, 251, 192, 3, 87, 88, 109, 109, 93, 246, 132, 158, 202, 61, 148, 24, 180, 45, 59, 182, 90, 100, 88, 223, 133, 225, 180, 2, 184, 253, 167, 214, 212, 210, 108, 93, 157, 139, 253, 52, 92, 80, 222, 211, 179, 195, 122, 123, 250, 181, 173, 78, 19, 164, 43, 159, 136, 254, 243, 87, 147, 80, 218, 150, 46, 239, 176, 250, 186, 86, 229, 149, 178, 180, 252, 253, 253, 160, 190, 135, 211, 90, 151, 50, 181, 53, 214, 157, 30, 177, 161, 158, 231, 204, 118, 187, 61, 134, 234, 58, 207, 117, 217, 5, 222, 158, 162, 89, 79, 129, 119, 88, 187, 194, 3, 218, 150, 89, 109, 36, 174, 124, 149, 191, 206, 54, 135, 84, 142, 90, 205, 148, 137, 70, 108, 36, 146, 177, 231, 146, 35, 102, 219, 183, 104, 155, 26, 43, 119, 88, 40, 251, 249, 174, 206, 125, 15, 54, 47, 89, 98, 29, 250, 206, 85, 149, 243, 78, 110, 77, 117, 243, 56, 238, 109, 218, 39, 14, 165, 148, 231, 144, 54, 222, 30, 53, 168, 76, 220, 150, 230, 60, 22, 122, 93, 202, 91, 40, 62, 68, 0, 129, 9, 2, 110, 27, 221, 119, 175, 50, 97, 22, 94, 32, 128, 192, 100, 129, 176, 219, 153, 187, 83, 200, 205, 41, 59, 112, 169, 89, 205, 192, 33, 182, 254, 57, 237, 84, 109, 96, 242, 172, 123, 94, 175, 177, 26, 139, 29, 188, 210, 182, 165, 135, 172, 251, 233, 205, 254, 251, 227, 15, 224, 246, 204, 56, 163, 39, 33, 107, 108, 108, 176, 129, 140, 242, 27, 218, 187, 192, 10, 61, 237, 171, 143, 219, 238, 244, 176, 133, 117, 204, 60, 249, 120, 39, 162, 30, 142, 144, 142, 84, 20, 162, 239, 93, 168, 0, 207, 226, 13, 117, 54, 60, 168, 2, 20, 248, 27, 38, 26, 139, 89, 106, 68, 7, 23, 227, 38, 117, 58, 232, 8, 35, 110, 73, 25, 140, 159, 234, 21, 196, 13, 245, 247, 143, 127, 75, 207, 117, 160, 190, 84, 135, 216, 91, 6, 45, 53, 155, 178, 170, 233, 235, 211, 245, 162, 31, 135, 175, 212, 26, 227, 13, 150, 86, 208, 50, 60, 164, 186, 23, 106, 82, 64, 213, 16, 174, 177, 193, 196, 196, 250, 45, 116, 118, 77, 10, 140, 250, 251, 7, 44, 44, 227, 120, 42, 105, 131, 169, 236, 201, 132, 92, 62, 241, 154, 122, 27, 78, 186, 250, 207, 12, 46, 215, 139, 212, 28, 109, 176, 190, 148, 14, 6, 117, 96, 56, 126, 138, 197, 116, 128, 58, 178, 55, 15, 63, 95, 29, 196, 14, 42, 120, 44, 196, 212, 216, 28, 183, 161, 129, 97, 5, 14, 133, 72, 61, 155, 102, 110, 251, 174, 111, 107, 209, 65, 191, 142, 248, 103, 57, 173, 212, 252, 141, 250, 222, 72, 116, 54, 91, 77, 227, 34, 235, 81, 240, 190, 117, 231, 70, 179, 93, 201, 233, 3, 146, 89, 228, 17, 141, 215, 88, 115, 93, 82, 39, 141, 246, 46, 212, 174, 167, 177, 88, 139, 109, 142, 238, 182, 176, 190, 94, 102, 218, 19, 236, 127, 183, 196, 227, 150, 26, 152, 254, 59, 112, 111, 46, 83, 63, 155, 80, 223, 166, 69, 182, 43, 156, 180, 109, 91, 54, 152, 13, 186, 88, 122, 234, 145, 26, 211, 229, 27, 11, 53, 106, 240, 205, 160, 190, 233, 246, 127, 136, 83, 171, 117, 124, 84, 223, 35, 237, 10, 222, 107, 181, 206, 111, 117, 39, 27, 198, 77, 206, 100, 215, 162, 38, 11, 237, 236, 87, 64, 172, 245, 125, 138, 96, 124, 220, 236, 51, 126, 154, 235, 157, 109, 111, 238, 180, 93, 125, 221, 19, 151, 139, 55, 91, 56, 217, 183, 223, 32, 62, 231, 210, 212, 214, 100, 253, 10, 84, 39, 78, 97, 107, 106, 110, 177, 254, 193, 30, 5, 91, 254, 25, 219, 137, 31, 79, 122, 21, 171, 175, 183, 145, 161, 137, 223, 105, 110, 150, 88, 168, 193, 70, 100, 57, 121, 91, 215, 57, 70, 5, 159, 217, 116, 15, 88, 99, 214, 100, 135, 218, 230, 77, 219, 173, 111, 100, 162, 223, 248, 108, 86, 233, 69, 227, 242, 131, 172, 39, 30, 182, 231, 122, 180, 31, 220, 49, 148, 61, 97, 59, 135, 125, 146, 226, 126, 109, 191, 250, 102, 105, 247, 108, 101, 71, 139, 133, 250, 22, 219, 134, 173, 79, 140, 207, 110, 159, 231, 71, 232, 157, 240, 234, 67, 108, 67, 100, 212, 134, 158, 121, 70, 198, 74, 35, 79, 239, 126, 206, 183, 65, 219, 240, 224, 28, 182, 225, 213, 202, 175, 222, 109, 195, 139, 117, 226, 85, 219, 240, 198, 240, 176, 13, 236, 120, 214, 194, 34, 242, 230, 209, 171, 188, 79, 197, 120, 3, 1, 4, 102, 37, 48, 179, 35, 151, 89, 37, 201, 204, 8, 84, 183, 64, 36, 170, 179, 183, 26, 82, 213, 165, 61, 91, 211, 200, 26, 123, 114, 139, 59, 0, 120, 220, 94, 113, 217, 90, 59, 250, 240, 11, 45, 28, 77, 90, 123, 123, 202, 6, 210, 49, 219, 17, 105, 180, 70, 29, 100, 111, 223, 53, 98, 215, 63, 123, 135, 237, 188, 238, 118, 245, 84, 214, 218, 162, 67, 150, 169, 183, 112, 147, 162, 213, 185, 28, 220, 135, 172, 65, 7, 117, 131, 58, 143, 188, 246, 180, 115, 236, 236, 151, 156, 168, 158, 11, 157, 85, 111, 142, 218, 87, 250, 254, 104, 139, 190, 112, 155, 101, 234, 154, 172, 103, 180, 223, 66, 138, 51, 246, 28, 254, 105, 39, 95, 171, 49, 105, 163, 117, 163, 246, 198, 183, 95, 109, 93, 10, 162, 230, 50, 244, 119, 170, 214, 117, 233, 68, 107, 106, 45, 153, 25, 180, 59, 127, 247, 63, 246, 187, 223, 252, 217, 154, 90, 26, 172, 127, 183, 59, 104, 42, 204, 20, 87, 47, 205, 176, 14, 182, 15, 63, 253, 116, 123, 241, 11, 79, 177, 165, 58, 41, 177, 35, 145, 180, 219, 238, 248, 31, 91, 247, 135, 123, 173, 161, 190, 217, 6, 71, 250, 252, 179, 0, 254, 1, 174, 32, 142, 191, 248, 101, 118, 210, 9, 199, 90, 155, 122, 168, 67, 245, 9, 219, 242, 196, 31, 236, 134, 235, 126, 111, 137, 174, 122, 243, 182, 13, 43, 36, 219, 163, 53, 125, 161, 107, 66, 214, 156, 172, 183, 190, 142, 65, 187, 240, 188, 139, 236, 184, 229, 39, 88, 77, 221, 46, 235, 238, 123, 202, 126, 254, 243, 123, 109, 195, 186, 94, 139, 215, 123, 5, 9, 130, 195, 26, 211, 215, 88, 27, 179, 190, 161, 1, 251, 139, 215, 189, 218, 158, 127, 208, 161, 22, 29, 25, 245, 135, 198, 78, 95, 224, 217, 125, 82, 83, 87, 99, 155, 54, 222, 106, 215, 254, 223, 187, 172, 77, 189, 150, 125, 59, 119, 89, 236, 132, 19, 236, 101, 103, 157, 105, 71, 232, 228, 202, 240, 72, 202, 238, 186, 231, 119, 246, 235, 91, 127, 109, 205, 245, 173, 214, 167, 222, 226, 113, 163, 30, 167, 207, 76, 195, 17, 91, 235, 155, 212, 251, 218, 111, 39, 159, 117, 148, 157, 186, 246, 108, 171, 245, 26, 117, 50, 102, 147, 253, 242, 231, 55, 217, 159, 254, 220, 173, 33, 168, 234, 45, 85, 208, 91, 171, 147, 59, 222, 192, 160, 213, 40, 223, 139, 207, 62, 203, 14, 85, 47, 217, 208, 168, 11, 250, 220, 46, 107, 238, 147, 235, 148, 108, 107, 75, 216, 93, 247, 254, 214, 110, 252, 209, 61, 22, 139, 215, 217, 104, 98, 180, 96, 189, 245, 46, 80, 106, 108, 111, 179, 193, 93, 61, 118, 232, 203, 206, 183, 11, 142, 59, 222, 226, 58, 1, 149, 84, 212, 61, 93, 77, 220, 26, 232, 198, 82, 12, 107, 251, 190, 61, 220, 109, 247, 111, 121, 218, 236, 87, 247, 154, 162, 5, 109, 247, 102, 171, 218, 14, 181, 39, 59, 134, 44, 241, 196, 38, 165, 225, 122, 147, 103, 176, 206, 106, 185, 9, 147, 14, 188, 235, 213, 227, 25, 26, 26, 182, 37, 45, 199, 218, 25, 87, 158, 169, 199, 184, 165, 71, 51, 246, 167, 228, 19, 118, 243, 31, 174, 183, 246, 59, 27, 108, 87, 131, 78, 228, 12, 238, 255, 59, 170, 166, 174, 206, 106, 212, 235, 59, 180, 187, 215, 46, 120, 199, 91, 236, 136, 37, 203, 45, 186, 91, 193, 162, 122, 247, 102, 50, 185, 185, 134, 20, 77, 221, 30, 114, 245, 221, 176, 167, 190, 113, 189, 191, 106, 245, 97, 246, 248, 208, 70, 75, 111, 219, 55, 48, 155, 152, 239, 91, 237, 176, 197, 75, 173, 73, 39, 106, 30, 127, 242, 81, 187, 249, 198, 159, 91, 239, 64, 82, 35, 81, 52, 40, 119, 138, 97, 205, 185, 114, 213, 202, 97, 84, 61, 191, 203, 87, 173, 180, 240, 174, 1, 235, 61, 249, 4, 123, 243, 218, 181, 22, 215, 137, 145, 132, 214, 197, 102, 109, 111, 159, 75, 61, 107, 181, 159, 249, 182, 237, 114, 65, 214, 142, 221, 115, 17, 207, 101, 183, 231, 49, 215, 118, 139, 90, 187, 108, 103, 239, 54, 187, 232, 146, 43, 237, 232, 163, 14, 52, 79, 39, 155, 134, 189, 81, 187, 245, 198, 127, 179, 135, 30, 30, 182, 104, 109, 200, 82, 227, 46, 163, 217, 147, 128, 123, 50, 118, 4, 215, 172, 81, 45, 125, 189, 187, 237, 205, 111, 124, 163, 45, 61, 112, 185, 70, 161, 104, 212, 70, 44, 108, 235, 118, 221, 99, 55, 124, 249, 118, 171, 111, 170, 183, 196, 232, 78, 75, 39, 198, 22, 152, 144, 72, 246, 69, 77, 173, 190, 191, 71, 71, 237, 184, 147, 142, 178, 139, 206, 189, 212, 31, 249, 49, 146, 78, 216, 109, 191, 254, 165, 253, 249, 15, 15, 234, 251, 180, 81, 39, 221, 116, 114, 99, 236, 28, 149, 27, 222, 156, 78, 214, 88, 188, 43, 105, 7, 54, 31, 98, 143, 61, 17, 83, 66, 15, 218, 41, 231, 29, 105, 103, 158, 116, 153, 70, 118, 104, 63, 184, 200, 237, 7, 235, 180, 31, 108, 182, 250, 1, 157, 46, 236, 79, 216, 173, 91, 158, 180, 7, 191, 249, 125, 63, 211, 35, 219, 14, 177, 77, 237, 195, 214, 183, 222, 173, 203, 227, 246, 85, 217, 34, 229, 253, 155, 27, 101, 179, 116, 181, 2, 204, 161, 195, 109, 253, 182, 157, 154, 191, 219, 254, 242, 45, 23, 219, 161, 75, 78, 180, 72, 93, 194, 218, 90, 211, 214, 171, 19, 149, 187, 34, 245, 214, 218, 51, 100, 247, 133, 118, 217, 79, 159, 80, 128, 124, 237, 207, 108, 185, 230, 110, 90, 115, 184, 61, 58, 178, 205, 66, 155, 122, 178, 223, 161, 147, 123, 130, 199, 78, 118, 52, 46, 106, 179, 129, 157, 61, 118, 204, 37, 23, 219, 185, 71, 29, 99, 53, 90, 199, 210, 121, 206, 156, 185, 253, 97, 141, 78, 84, 14, 170, 215, 252, 151, 169, 231, 236, 145, 231, 158, 49, 187, 249, 183, 10, 246, 71, 237, 0, 229, 219, 186, 228, 80, 123, 184, 94, 251, 198, 167, 158, 211, 241, 130, 122, 214, 199, 13, 15, 207, 91, 105, 62, 68, 0, 129, 5, 19, 208, 33, 9, 19, 2, 8, 204, 84, 192, 245, 54, 164, 181, 243, 91, 177, 114, 169, 237, 218, 208, 169, 225, 77, 15, 216, 135, 175, 55, 123, 94, 205, 87, 236, 152, 23, 29, 109, 75, 107, 159, 175, 131, 163, 148, 105, 223, 231, 6, 100, 169, 87, 49, 162, 161, 128, 41, 93, 130, 20, 177, 115, 119, 92, 106, 163, 111, 120, 208, 190, 253, 203, 239, 217, 207, 63, 255, 11, 13, 213, 90, 97, 155, 155, 187, 205, 235, 155, 216, 131, 153, 191, 44, 58, 76, 136, 105, 136, 237, 200, 34, 179, 99, 118, 218, 229, 95, 58, 202, 222, 124, 248, 53, 218, 129, 38, 45, 217, 88, 107, 107, 31, 185, 211, 62, 251, 217, 219, 236, 233, 142, 70, 29, 20, 100, 20, 52, 184, 174, 19, 165, 168, 99, 228, 136, 130, 136, 26, 13, 57, 29, 237, 108, 183, 171, 62, 120, 141, 29, 167, 3, 86, 47, 207, 129, 97, 254, 114, 76, 254, 84, 135, 225, 153, 90, 13, 167, 220, 100, 215, 126, 167, 199, 15, 128, 59, 58, 212, 35, 161, 0, 120, 1, 59, 76, 38, 100, 218, 208, 220, 228, 7, 192, 39, 159, 119, 150, 125, 240, 131, 31, 178, 165, 61, 131, 214, 31, 85, 216, 240, 207, 131, 126, 0, 220, 162, 30, 223, 65, 79, 1, 176, 58, 74, 27, 155, 155, 109, 215, 246, 237, 118, 178, 130, 169, 191, 191, 226, 10, 171, 31, 28, 182, 166, 250, 6, 187, 237, 201, 255, 177, 107, 7, 206, 181, 35, 110, 236, 178, 71, 219, 159, 177, 208, 174, 253, 135, 19, 53, 177, 90, 139, 39, 235, 172, 175, 113, 208, 46, 189, 252, 213, 118, 197, 95, 252, 165, 141, 168, 71, 243, 241, 245, 63, 177, 199, 31, 249, 153, 2, 224, 86, 107, 108, 200, 20, 36, 0, 118, 7, 252, 241, 6, 5, 223, 10, 128, 207, 191, 236, 181, 246, 166, 11, 95, 102, 117, 179, 8, 52, 38, 0, 78, 249, 66, 125, 82, 58, 145, 176, 238, 201, 14, 63, 0, 238, 92, 210, 166, 225, 236, 187, 236, 164, 51, 254, 194, 174, 254, 228, 39, 237, 104, 29, 196, 102, 154, 234, 236, 95, 191, 247, 207, 126, 0, 220, 214, 216, 102, 125, 33, 5, 192, 131, 99, 43, 217, 148, 105, 186, 85, 80, 129, 90, 141, 103, 109, 45, 237, 126, 0, 124, 198, 235, 94, 110, 239, 186, 228, 29, 214, 236, 45, 210, 129, 250, 159, 109, 235, 230, 7, 253, 0, 56, 86, 23, 181, 161, 161, 148, 53, 54, 169, 189, 20, 0, 159, 166, 124, 223, 247, 137, 79, 216, 49, 10, 212, 70, 20, 180, 205, 44, 156, 154, 166, 16, 122, 219, 13, 75, 111, 104, 204, 216, 117, 63, 248, 71, 187, 237, 214, 123, 20, 80, 199, 181, 126, 186, 182, 82, 55, 208, 2, 79, 254, 48, 110, 109, 95, 205, 26, 58, 62, 160, 0, 248, 152, 11, 47, 180, 247, 92, 246, 26, 91, 28, 213, 73, 168, 60, 1, 176, 43, 134, 11, 105, 235, 180, 225, 252, 102, 116, 196, 158, 73, 119, 91, 236, 201, 141, 86, 251, 84, 175, 125, 101, 240, 78, 251, 237, 63, 126, 217, 214, 232, 24, 62, 181, 114, 165, 61, 173, 30, 44, 119, 51, 49, 255, 90, 202, 217, 148, 191, 46, 99, 77, 10, 10, 182, 105, 227, 56, 238, 51, 93, 246, 233, 55, 188, 195, 106, 71, 187, 44, 166, 160, 239, 15, 205, 91, 108, 228, 75, 45, 118, 223, 157, 223, 180, 250, 174, 165, 150, 124, 106, 139, 37, 247, 179, 17, 215, 170, 231, 176, 73, 7, 253, 67, 58, 41, 245, 234, 215, 93, 97, 175, 56, 233, 133, 58, 185, 151, 13, 128, 221, 22, 149, 189, 161, 212, 244, 5, 244, 135, 98, 235, 4, 221, 111, 52, 60, 245, 217, 244, 206, 108, 125, 55, 236, 182, 127, 25, 248, 189, 221, 249, 214, 47, 218, 193, 182, 200, 182, 168, 151, 111, 104, 215, 196, 81, 15, 19, 243, 125, 189, 93, 252, 130, 147, 44, 62, 156, 178, 95, 61, 249, 11, 187, 251, 233, 187, 173, 247, 247, 207, 88, 76, 219, 249, 96, 255, 212, 39, 226, 162, 58, 161, 228, 130, 223, 165, 234, 249, 173, 207, 68, 237, 241, 250, 157, 246, 163, 207, 127, 222, 206, 58, 244, 112, 203, 140, 12, 171, 231, 179, 214, 110, 142, 245, 216, 192, 119, 190, 106, 75, 93, 241, 99, 254, 248, 18, 173, 208, 90, 223, 85, 223, 249, 76, 46, 128, 75, 107, 125, 108, 91, 90, 167, 0, 216, 108, 237, 219, 226, 246, 246, 23, 189, 219, 98, 233, 70, 93, 174, 154, 176, 47, 181, 235, 4, 211, 7, 238, 179, 190, 38, 13, 227, 221, 169, 225, 203, 83, 108, 98, 206, 213, 211, 89, 145, 214, 104, 147, 245, 213, 237, 182, 247, 127, 252, 227, 118, 160, 134, 179, 167, 53, 164, 218, 171, 137, 216, 77, 221, 191, 183, 27, 134, 127, 97, 7, 253, 71, 167, 61, 180, 60, 97, 209, 77, 3, 150, 82, 190, 83, 13, 249, 141, 133, 21, 0, 107, 140, 253, 201, 23, 156, 111, 31, 186, 250, 131, 170, 90, 200, 70, 6, 122, 116, 2, 160, 199, 15, 128, 23, 181, 181, 218, 224, 102, 157, 56, 212, 86, 24, 169, 205, 40, 40, 175, 181, 197, 43, 71, 45, 188, 99, 149, 61, 182, 237, 9, 187, 252, 11, 102, 23, 31, 244, 21, 59, 250, 148, 163, 108, 121, 252, 5, 234, 207, 77, 234, 114, 3, 119, 3, 177, 136, 191, 31, 12, 105, 91, 136, 104, 152, 205, 218, 240, 118, 75, 190, 254, 10, 187, 227, 145, 251, 237, 27, 255, 254, 183, 182, 226]);
fileData1.push.apply(fileData1, [207, 90, 215, 87, 29, 104, 221, 91, 158, 213, 25, 135, 153, 137, 230, 46, 175, 57, 224, 96, 245, 34, 175, 95, 101, 182, 104, 157, 125, 234, 218, 3, 236, 168, 197, 255, 105, 199, 191, 240, 69, 214, 22, 233, 148, 87, 218, 223, 15, 167, 188, 236, 126, 184, 54, 149, 178, 205, 42, 253, 203, 51, 235, 45, 166, 147, 13, 239, 185, 247, 86, 219, 244, 177, 175, 107, 221, 106, 183, 245, 7, 46, 178, 208, 179, 59, 117, 194, 70, 54, 227, 134, 252, 251, 67, 203, 85, 238, 150, 14, 109, 195, 10, 128, 143, 187, 248, 98, 123, 223, 203, 47, 177, 22, 157, 168, 75, 229, 9, 128, 253, 90, 40, 169, 26, 229, 119, 198, 200, 144, 237, 240, 118, 88, 244, 45, 218, 134, 159, 237, 181, 119, 173, 191, 205, 30, 254, 251, 255, 80, 95, 185, 89, 191, 78, 186, 108, 121, 250, 25, 157, 164, 209, 113, 197, 130, 237, 139, 103, 102, 200, 92, 8, 4, 93, 128, 0, 56, 232, 107, 0, 245, 159, 177, 128, 219, 241, 187, 157, 212, 1, 43, 59, 109, 227, 51, 91, 236, 85, 159, 219, 98, 127, 125, 230, 85, 17, 166, 21, 0, 0, 64, 0, 73, 68, 65, 84, 181, 118, 252, 113, 71, 91, 171, 29, 173, 235, 62, 235, 242, 166, 117, 65, 227, 9, 22, 89, 117, 140, 189, 228, 132, 115, 236, 226, 211, 255, 209, 126, 119, 209, 231, 173, 83, 75, 116, 215, 107, 51, 212, 65, 255, 204, 38, 207, 234, 163, 113, 235, 183, 157, 118, 194, 33, 107, 237, 252, 19, 174, 180, 122, 29, 196, 167, 189, 90, 107, 84, 176, 125, 170, 206, 104, 95, 245, 233, 147, 173, 237, 154, 187, 44, 181, 172, 205, 134, 250, 20, 128, 186, 131, 36, 37, 238, 130, 16, 127, 210, 65, 95, 184, 181, 193, 26, 195, 49, 5, 4, 234, 137, 114, 7, 68, 121, 166, 220, 114, 249, 66, 195, 140, 46, 244, 10, 187, 171, 27, 195, 186, 246, 74, 7, 26, 110, 114, 199, 136, 217, 201, 61, 153, 223, 193, 98, 46, 165, 9, 143, 58, 240, 119, 83, 66, 61, 52, 81, 245, 150, 197, 219, 154, 109, 84, 39, 2, 50, 174, 219, 91, 211, 158, 236, 245, 44, 87, 246, 90, 5, 253, 77, 53, 117, 10, 136, 53, 118, 47, 28, 181, 23, 30, 169, 0, 235, 205, 31, 181, 47, 220, 248, 81, 91, 209, 178, 194, 54, 238, 218, 232, 47, 155, 239, 79, 246, 238, 197, 202, 91, 73, 52, 184, 107, 112, 107, 35, 86, 95, 171, 116, 155, 106, 172, 182, 166, 89, 139, 234, 128, 127, 204, 116, 1, 142, 147, 39, 22, 69, 9, 186, 27, 33, 185, 41, 221, 88, 175, 182, 15, 171, 183, 89, 237, 175, 51, 46, 249, 123, 71, 179, 173, 152, 115, 152, 152, 232, 222, 87, 238, 206, 169, 110, 88, 97, 107, 171, 171, 135, 136, 198, 242, 114, 163, 132, 35, 234, 225, 143, 181, 185, 43, 173, 29, 157, 42, 175, 201, 79, 117, 47, 180, 255, 222, 84, 127, 252, 53, 64, 127, 220, 54, 228, 166, 72, 170, 198, 90, 26, 213, 43, 228, 174, 220, 14, 53, 89, 93, 93, 54, 221, 189, 235, 76, 54, 21, 151, 175, 27, 89, 80, 215, 82, 171, 131, 73, 215, 107, 58, 131, 204, 178, 139, 238, 243, 215, 5, 137, 105, 197, 185, 81, 13, 125, 140, 55, 212, 90, 131, 98, 153, 225, 180, 82, 156, 156, 233, 62, 75, 206, 237, 13, 191, 206, 90, 212, 93, 59, 233, 79, 170, 76, 90, 39, 101, 98, 186, 30, 49, 182, 103, 141, 156, 58, 109, 23, 16, 70, 244, 239, 76, 93, 19, 154, 14, 117, 152, 117, 30, 102, 53, 107, 61, 91, 19, 186, 192, 118, 159, 244, 90, 59, 255, 193, 175, 88, 226, 245, 223, 181, 69, 157, 29, 182, 179, 123, 135, 239, 178, 191, 182, 29, 159, 83, 125, 77, 220, 18, 125, 105, 235, 58, 186, 211, 94, 179, 246, 114, 235, 136, 173, 178, 209, 72, 90, 215, 74, 70, 237, 180, 240, 26, 59, 235, 121, 135, 218, 255, 170, 171, 234, 160, 93, 181, 246, 84, 155, 154, 72, 35, 104, 247, 187, 5, 59, 71, 173, 47, 158, 202, 220, 228, 86, 162, 102, 69, 102, 74, 111, 54, 211, 217, 214, 172, 176, 105, 177, 133, 58, 15, 85, 125, 67, 118, 120, 232, 12, 219, 118, 210, 5, 118, 206, 59, 206, 52, 187, 83, 109, 23, 87, 48, 53, 172, 46, 200, 28, 174, 75, 220, 207, 87, 65, 162, 242, 141, 41, 48, 169, 109, 140, 90, 76, 215, 193, 186, 123, 49, 104, 137, 236, 188, 83, 20, 194, 5, 55, 41, 125, 87, 181, 31, 176, 84, 247, 4, 200, 216, 227, 53, 235, 237, 191, 110, 190, 219, 94, 126, 244, 177, 170, 172, 214, 181, 218, 22, 187, 193, 158, 180, 207, 254, 243, 63, 89, 251, 55, 110, 181, 222, 197, 218, 38, 182, 236, 26, 11, 68, 247, 171, 49, 69, 142, 19, 223, 202, 222, 244, 42, 108, 189, 137, 103, 21, 222, 31, 97, 223, 125, 240, 107, 118, 249, 25, 87, 90, 123, 228, 100, 89, 215, 216, 119, 47, 121, 173, 93, 174, 0, 184, 75, 35, 89, 182, 41, 248, 202, 13, 197, 205, 165, 226, 170, 237, 41, 184, 107, 110, 207, 88, 223, 198, 184, 29, 251, 69, 145, 47, 209, 69, 29, 81, 173, 93, 58, 73, 231, 182, 181, 23, 45, 125, 129, 189, 246, 168, 215, 219, 143, 236, 63, 237, 128, 216, 10, 123, 78, 151, 232, 248, 215, 126, 79, 110, 77, 49, 165, 199, 46, 63, 104, 60, 186, 214, 234, 117, 66, 195, 77, 247, 100, 158, 177, 159, 36, 213, 251, 107, 26, 254, 27, 206, 14, 39, 114, 77, 234, 174, 96, 232, 90, 61, 106, 253, 27, 142, 182, 161, 203, 30, 178, 239, 253, 213, 183, 236, 165, 167, 30, 107, 29, 181, 199, 40, 125, 119, 146, 192, 53, 208, 212, 211, 43, 53, 168, 63, 252, 226, 85, 118, 198, 169, 167, 216, 27, 78, 63, 199, 222, 119, 211, 223, 217, 31, 63, 120, 139, 181, 212, 182, 218, 110, 55, 46, 216, 109, 244, 121, 38, 87, 126, 119, 111, 137, 197, 75, 23, 41, 248, 29, 181, 211, 63, 250, 148, 125, 246, 47, 111, 181, 35, 214, 44, 214, 62, 240, 72, 125, 103, 101, 191, 155, 166, 74, 226, 16, 189, 185, 202, 142, 183, 200, 133, 199, 216, 161, 103, 159, 110, 219, 46, 120, 185, 93, 240, 175, 231, 219, 242, 111, 155, 109, 90, 209, 110, 161, 141, 106, 95, 247, 157, 55, 169, 39, 216, 221, 28, 205, 77, 113, 125, 223, 215, 104, 72, 185, 27, 153, 224, 182, 136, 124, 107, 129, 191, 13, 107, 255, 122, 129, 122, 206, 51, 225, 197, 218, 134, 15, 183, 168, 202, 189, 58, 117, 190, 237, 60, 255, 82, 187, 224, 103, 63, 52, 251, 135, 111, 89, 231, 138, 3, 172, 123, 163, 122, 130, 245, 61, 49, 223, 27, 161, 249, 197, 226, 15, 2, 8, 204, 72, 64, 95, 101, 76, 8, 32, 144, 87, 64, 251, 195, 144, 78, 191, 123, 77, 25, 59, 184, 113, 149, 173, 127, 230, 105, 251, 242, 151, 191, 106, 87, 188, 249, 108, 107, 137, 175, 210, 126, 80, 59, 71, 205, 243, 199, 209, 205, 118, 157, 134, 114, 46, 95, 215, 99, 253, 234, 185, 113, 59, 242, 134, 250, 26, 235, 56, 162, 199, 78, 59, 101, 153, 173, 89, 244, 70, 29, 148, 181, 90, 71, 103, 151, 253, 248, 101, 31, 181, 11, 255, 124, 188, 221, 253, 130, 215, 91, 179, 130, 223, 190, 41, 118, 186, 83, 150, 73, 199, 149, 17, 245, 180, 186, 110, 205, 181, 151, 156, 96, 7, 135, 142, 114, 71, 65, 22, 81, 240, 235, 134, 166, 29, 20, 235, 180, 31, 188, 244, 13, 118, 169, 221, 101, 43, 116, 141, 230, 64, 93, 191, 134, 71, 231, 130, 107, 237, 174, 85, 78, 183, 215, 78, 141, 237, 186, 221, 65, 96, 222, 73, 7, 130, 110, 55, 239, 118, 244, 123, 14, 228, 167, 88, 32, 178, 231, 64, 87, 215, 167, 54, 185, 161, 112, 110, 126, 151, 89, 225, 166, 220, 240, 237, 81, 93, 35, 234, 135, 188, 58, 184, 72, 233, 78, 159, 153, 76, 246, 96, 101, 252, 193, 73, 110, 94, 55, 108, 205, 117, 50, 52, 104, 153, 180, 134, 50, 55, 234, 164, 197, 255, 119, 193, 235, 173, 227, 179, 247, 216, 135, 63, 120, 147, 173, 58, 168, 203, 158, 126, 74, 67, 226, 84, 246, 220, 50, 251, 212, 32, 215, 243, 163, 246, 117, 39, 16, 220, 228, 169, 4, 41, 69, 87, 158, 122, 145, 252, 187, 156, 140, 207, 220, 159, 99, 225, 254, 228, 84, 235, 116, 128, 235, 215, 84, 61, 251, 145, 253, 88, 123, 186, 9, 141, 251, 49, 16, 247, 195, 67, 254, 58, 48, 77, 113, 114, 129, 123, 174, 138, 185, 199, 132, 122, 148, 70, 147, 82, 214, 184, 199, 148, 110, 166, 147, 210, 112, 100, 55, 77, 107, 52, 41, 253, 28, 71, 110, 254, 148, 134, 170, 39, 149, 134, 187, 83, 122, 72, 129, 87, 206, 49, 183, 88, 110, 62, 63, 95, 157, 212, 80, 183, 180, 202, 175, 97, 246, 251, 91, 95, 115, 9, 76, 241, 24, 210, 54, 162, 81, 255, 154, 180, 62, 187, 0, 199, 159, 39, 87, 178, 41, 22, 88, 160, 183, 114, 117, 25, 149, 97, 70, 255, 116, 29, 130, 78, 88, 105, 155, 205, 83, 23, 191, 61, 85, 64, 183, 117, 102, 183, 80, 253, 149, 213, 137, 110, 16, 244, 113, 39, 217, 186, 227, 14, 177, 71, 58, 207, 177, 11, 206, 125, 189, 45, 93, 164, 203, 41, 134, 213, 183, 53, 164, 117, 54, 119, 182, 43, 95, 217, 93, 82, 58, 169, 208, 171, 255, 78, 61, 233, 36, 59, 254, 128, 181, 126, 46, 181, 234, 253, 114, 107, 179, 203, 239, 181, 199, 156, 97, 127, 186, 96, 173, 253, 240, 235, 119, 219, 146, 229, 139, 109, 107, 207, 246, 252, 219, 132, 150, 241, 235, 233, 46, 177, 208, 205, 185, 92, 63, 109, 92, 151, 137, 220, 85, 219, 111, 215, 237, 190, 199, 94, 246, 104, 196, 90, 188, 88, 246, 50, 84, 145, 187, 213, 53, 187, 110, 105, 173, 140, 232, 230, 83, 3, 27, 109, 96, 213, 175, 236, 168, 213, 135, 106, 104, 234, 235, 181, 116, 171, 95, 223, 227, 60, 5, 255, 199, 189, 212, 254, 244, 221, 187, 236, 248, 115, 78, 182, 244, 227, 250, 238, 139, 41, 245, 17, 215, 122, 217, 182, 243, 111, 66, 168, 27, 12, 142, 232, 228, 164, 63, 58, 87, 111, 39, 117, 89, 64, 70, 55, 186, 203, 214, 102, 223, 54, 118, 39, 82, 220, 58, 215, 166, 209, 48, 53, 187, 70, 237, 217, 174, 184, 253, 215, 143, 238, 182, 75, 143, 127, 190, 63, 154, 38, 162, 32, 238, 123, 145, 71, 236, 117, 159, 254, 176, 217, 135, 127, 226, 15, 23, 31, 214, 181, 253, 33, 213, 109, 223, 212, 148, 205, 28, 38, 151, 142, 66, 30, 219, 161, 147, 11, 135, 183, 142, 218, 186, 175, 155, 237, 124, 153, 103, 171, 214, 184, 77, 52, 98, 39, 198, 79, 247, 83, 173, 213, 245, 183, 186, 123, 82, 174, 186, 123, 115, 114, 235, 143, 202, 211, 210, 112, 144, 109, 180, 39, 236, 83, 107, 191, 106, 109, 81, 121, 169, 218, 110, 244, 65, 90, 219, 252, 82, 175, 198, 94, 212, 112, 136, 125, 79, 75, 213, 13, 235, 4, 173, 34, 55, 111, 56, 187, 230, 239, 77, 72, 229, 16, 235, 80, 74, 31, 174, 29, 182, 151, 188, 116, 179, 159, 87, 66, 223, 105, 127, 122, 248, 78, 187, 255, 55, 119, 219, 33, 13, 43, 236, 137, 196, 38, 149, 202, 93, 254, 147, 209, 77, 20, 91, 109, 243, 6, 207, 94, 243, 233, 135, 236, 157, 111, 253, 166, 157, 220, 118, 185, 234, 226, 111, 92, 126, 178, 15, 108, 122, 192, 190, 113, 227, 239, 108, 117, 191, 214, 50, 141, 222, 168, 139, 53, 88, 188, 174, 207, 86, 30, 21, 181, 115, 94, 252, 14, 107, 208, 126, 106, 69, 164, 197, 86, 28, 121, 162, 221, 112, 216, 247, 236, 212, 83, 190, 102, 207, 156, 246, 97, 133, 198, 17, 27, 140, 171, 183, 219, 173, 64, 83, 78, 106, 55, 245, 42, 119, 118, 180, 234, 62, 86, 59, 237, 147, 63, 55, 123, 203, 153, 247, 90, 103, 205, 243, 178, 62, 170, 218, 168, 141, 216, 117, 247, 255, 202, 30, 249, 221, 102, 91, 60, 176, 211, 118, 235, 6, 114, 238, 114, 152, 154, 232, 179, 182, 246, 140, 179, 236, 180, 19, 46, 116, 95, 58, 118, 98, 157, 130, 210, 181, 231, 217, 45, 95, 126, 216, 206, 61, 227, 99, 214, 249, 134, 31, 218, 78, 245, 4, 123, 234, 9, 118, 45, 48, 30, 60, 247, 61, 232, 70, 76, 37, 220, 93, 189, 84, 78, 183, 87, 116, 206, 211, 77, 254, 54, 172, 75, 0, 220, 119, 116, 118, 143, 164, 121, 245, 228, 164, 72, 147, 54, 228, 115, 236, 201, 99, 78, 180, 223, 172, 58, 204, 174, 186, 242, 131, 118, 112, 215, 74, 91, 223, 247, 140, 133, 213, 54, 153, 153, 108, 195, 211, 101, 202, 251, 8, 32, 48, 99, 1, 119, 180, 198, 132, 0, 2, 211, 9, 248, 251, 65, 13, 49, 108, 205, 216, 65, 245, 135, 217, 250, 205, 143, 217, 191, 254, 219, 191, 218, 85, 111, 124, 147, 122, 173, 178, 61, 190, 61, 169, 157, 246, 246, 47, 126, 192, 30, 190, 237, 9, 123, 240, 238, 59, 252, 99, 149, 241, 201, 45, 94, 169, 51, 243, 26, 177, 252, 186, 119, 215, 217, 187, 46, 123, 147, 45, 210, 48, 207, 197, 153, 70, 187, 249, 216, 203, 237, 236, 223, 238, 178, 251, 214, 190, 199, 226, 139, 154, 109, 184, 219, 221, 36, 103, 226, 142, 119, 124, 58, 254, 115, 109, 177, 254, 65, 174, 142, 53, 46, 186, 96, 216, 159, 251, 214, 116, 175, 253, 230, 193, 175, 219, 123, 15, 186, 194, 22, 181, 44, 181, 149, 203, 94, 96, 246, 26, 29, 63, 94, 167, 94, 217, 78, 149, 113, 44, 0, 118, 65, 139, 187, 65, 147, 109, 220, 106, 215, 188, 254, 42, 91, 238, 206, 114, 231, 246, 236, 99, 25, 185, 131, 194, 184, 206, 254, 247, 110, 219, 102, 53, 107, 14, 182, 171, 255, 238, 239, 236, 5, 186, 115, 178, 59, 240, 185, 246, 87, 223, 180, 235, 190, 245, 3, 107, 73, 181, 249, 195, 100, 39, 150, 77, 105, 233, 142, 216, 153, 218, 132, 61, 249, 244, 58, 255, 163, 45, 186, 203, 174, 155, 114, 1, 128, 255, 162, 0, 127, 92, 176, 234, 212, 220, 20, 82, 160, 180, 55, 168, 207, 189, 155, 253, 204, 255, 220, 205, 227, 254, 105, 25, 215, 83, 144, 214, 1, 100, 44, 114, 144, 29, 242, 202, 55, 153, 221, 113, 147, 165, 111, 138, 88, 221, 178, 102, 75, 108, 214, 208, 233, 189, 71, 233, 123, 19, 152, 244, 108, 111, 14, 174, 12, 123, 95, 77, 154, 109, 193, 94, 142, 234, 6, 53, 61, 99, 67, 229, 190, 241, 169, 207, 216, 237, 215, 126, 71, 241, 128, 110, 228, 164, 3, 177, 241, 185, 251, 245, 83, 147, 108, 218, 218, 109, 127, 245, 153, 143, 217, 43, 78, 126, 145, 127, 253, 232, 19, 91, 30, 179, 107, 254, 241, 221, 22, 121, 74, 67, 143, 27, 116, 178, 96, 220, 112, 191, 241, 133, 28, 26, 126, 208, 127, 185, 171, 119, 200, 127, 244, 211, 115, 30, 217, 87, 190, 223, 216, 139, 57, 61, 184, 244, 156, 111, 54, 201, 92, 186, 227, 146, 26, 123, 203, 205, 231, 63, 85, 239, 136, 167, 117, 247, 27, 255, 253, 21, 251, 238, 181, 223, 181, 21, 241, 67, 53, 76, 212, 63, 237, 49, 110, 161, 253, 63, 117, 235, 98, 68, 7, 165, 79, 109, 120, 88, 215, 229, 235, 192, 63, 60, 232, 223, 173, 118, 255, 75, 46, 192, 28, 170, 139, 219, 142, 220, 255, 238, 110, 216, 239, 255, 218, 91, 237, 241, 155, 183, 88, 125, 60, 219, 219, 54, 57, 7, 119, 128, 29, 85, 207, 83, 172, 181, 205, 58, 158, 127, 135, 189, 233, 210, 207, 216, 97, 205, 231, 106, 182, 176, 173, 210, 176, 205, 85, 231, 188, 214, 126, 118, 139, 249, 65, 240, 154, 174, 85, 234, 171, 124, 218, 194, 10, 130, 247, 119, 0, 173, 78, 82, 115, 39, 79, 52, 30, 221, 94, 112, 97, 216, 150, 46, 169, 181, 45, 94, 202, 62, 209, 163, 147, 122, 67, 43, 237, 228, 21, 23, 219, 98, 93, 155, 121, 224, 243, 94, 168, 188, 238, 182, 186, 17, 69, 71, 238, 230, 196, 3, 147, 75, 56, 233, 181, 251, 46, 145, 237, 158, 19, 95, 186, 227, 111, 207, 3, 191, 178, 175, 127, 232, 93, 246, 227, 187, 61, 107, 234, 140, 233, 198, 116, 186, 251, 186, 102, 203, 173, 172, 174, 142, 110, 228, 200, 104, 186, 199, 234, 91, 182, 90, 203, 74, 179, 37, 161, 59, 108, 205, 89, 79, 218, 155, 46, 255, 132, 29, 214, 120, 129, 235, 140, 181, 227, 86, 157, 100, 15, 234, 154, 216, 99, 14, 123, 155, 45, 239, 88, 102, 155, 54, 41, 72, 219, 51, 41, 65, 109, 203, 110, 61, 241, 195, 17, 71, 188, 103, 221, 114, 51, 185, 79, 38, 78, 46, 95, 221, 132, 220, 188, 110, 13, 3, 111, 217, 100, 95, 191, 254, 84, 187, 232, 4, 221, 249, 88, 231, 39, 34, 26, 162, 126, 93, 232, 81, 187, 234, 51, 127, 235, 7, 191, 45, 29, 237, 10, 162, 20, 145, 13, 78, 61, 12, 121, 98, 202, 179, 120, 229, 28, 92, 0, 213, 163, 225, 196, 135, 169, 140, 250, 218, 124, 98, 104, 196, 78, 112, 111, 235, 95, 125, 90, 1, 218, 41, 10, 230, 127, 167, 64, 75, 231, 3, 60, 117, 142, 250, 85, 113, 203, 185, 167, 138, 195, 116, 78, 193, 26, 19, 217, 192, 243, 121, 241, 181, 26, 89, 16, 83, 114, 59, 236, 186, 245, 255, 100, 111, 63, 244, 51, 58, 225, 144, 182, 250, 211, 151, 153, 157, 166, 253, 193, 61, 58, 41, 171, 94, 249, 144, 238, 144, 61, 249, 70, 94, 181, 74, 104, 196, 118, 217, 218, 150, 147, 237, 196, 230, 207, 251, 187, 133, 136, 190, 27, 107, 31, 222, 98, 246, 123, 197, 212, 43, 229, 187, 201, 221, 103, 89, 39, 89, 87, 29, 162, 237, 71, 67, 158, 63, 241, 17, 251, 248, 59, 223, 107, 171, 27, 219, 253, 242, 244, 235, 239, 155, 158, 189, 222, 154, 254, 225, 187, 118, 223, 179, 59, 236, 207, 255, 115, 167, 255, 254, 248, 63, 71, 234, 124, 237, 231, 58, 31, 178, 243, 175, 94, 111, 239, 57, 239, 195, 26, 74, 252, 74, 91, 30, 105, 179, 223, 159, 250, 1, 59, 229, 110, 157, 124, 92, 123, 149, 117, 12, 119, 217, 142, 38, 157, 132, 84, 130, 123, 134, 125, 187, 54, 85, 48, 239, 53, 36, 237, 224, 230, 53, 182, 94, 215, 17, 127, 238, 135, 223, 183, 183, 157, 117, 190, 53, 106, 248, 183, 155, 238, 215, 48, 133, 183, 222, 117, 189, 29, 245, 197, 31, 219, 181, 27, 55, 169, 220, 217, 239, 176, 9, 249, 159, 250, 61, 221, 180, 242, 66, 123, 205, 231, 55, 218, 95, 174, 248, 166, 198, 159, 172, 180, 115, 154, 143, 180, 155, 174, 252, 154, 93, 216, 126, 160, 117, 92, 244, 79, 150, 58, 104, 133, 245, 110, 218, 168, 251, 103, 184, 76, 199, 47, 237, 158, 143, 125, 31, 169, 129, 220, 9, 188, 247, 254, 235, 85, 182, 227, 78, 13, 3, 215, 117, 188, 83, 77, 185, 109, 56, 222, 222, 106, 139, 79, 250, 181, 189, 231, 146, 255, 84, 143, 254, 137, 170, 152, 217, 193, 181, 29, 182, 242, 117, 239, 145, 169, 103, 111, 185, 242, 67, 118, 200, 178, 213, 246, 68, 104, 195, 140, 182, 225, 169, 242, 226, 61, 4, 16, 152, 189, 128, 251, 58, 229, 31, 6, 172, 3, 147, 215, 1, 215, 161, 162, 31, 188, 81, 228, 224, 173, 92, 118, 168, 239, 243, 238, 207, 255, 157, 183, 107, 184, 95, 199, 209, 158, 55, 168, 127, 151, 111, 254, 169, 183, 234, 212, 206, 61, 118, 26, 210, 236, 197, 106, 234, 189, 198, 198, 70, 255, 95, 67, 44, 174, 207, 218, 198, 62, 63, 216, 123, 213, 167, 205, 123, 102, 240, 14, 127, 121, 247, 103, 187, 55, 228, 189, 244, 223, 94, 173, 91, 1, 153, 87, 191, 108, 81, 118, 190, 144, 127, 136, 184, 39, 205, 241, 219, 103, 172, 185, 222, 29, 243, 120, 71, 190, 255, 249, 222, 104, 106, 216, 79, 231, 151, 59, 110, 247, 14, 123, 123, 220, 123, 226, 153, 63, 248, 175, 31, 241, 122, 189, 35, 126, 249, 17, 119, 105, 152, 215, 114, 240, 1, 19, 210, 81, 15, 159, 59, 166, 152, 240, 222, 248, 244, 199, 63, 111, 124, 249, 197, 222, 47, 55, 109, 244, 82, 26, 23, 235, 166, 47, 254, 232, 83, 51, 90, 206, 165, 17, 171, 149, 219, 12, 243, 153, 235, 124, 139, 150, 45, 243, 243, 120, 229, 231, 62, 235, 61, 233, 10, 168, 223, 64, 218, 57, 178, 211, 123, 199, 39, 222, 230, 191, 191, 172, 107, 185, 167, 30, 15, 61, 15, 121, 173, 157, 29, 254, 123, 239, 252, 206, 183, 189, 157, 110, 222, 196, 136, 167, 94, 56, 253, 146, 140, 250, 73, 82, 122, 212, 127, 95, 254, 246, 167, 253, 121, 86, 44, 89, 237, 197, 244, 43, 30, 126, 185, 180, 14, 76, 46, 95, 109, 83, 204, 211, 143, 97, 104, 44, 155, 121, 63, 184, 253, 6, 151, 154, 132, 70, 189, 199, 158, 252, 190, 119, 254, 5, 186, 80, 81, 87, 182, 46, 94, 220, 236, 47, 167, 227, 240, 125, 150, 159, 156, 222, 108, 95, 235, 224, 222, 211, 79, 167, 204, 44, 221, 150, 38, 239, 227, 183, 253, 202, 95, 87, 93, 57, 31, 120, 250, 79, 158, 157, 61, 179, 50, 213, 68, 34, 94, 235, 146, 37, 126, 62, 47, 124, 247, 187, 188, 63, 38, 71, 29, 152, 151, 212, 26, 241, 153, 107, 179, 235, 194, 202, 206, 213, 186, 203, 147, 75, 111, 250, 117, 214, 213, 79, 135, 141, 26, 187, 111, 222, 234, 229, 171, 252, 244, 174, 249, 234, 223, 122, 189, 137, 94, 7, 175, 233, 97, 239, 170, 55, 159, 236, 191, 223, 208, 160, 11, 220, 53, 127, 219, 148, 249, 38, 189, 79, 253, 199, 39, 253, 207, 235, 172, 206, 127, 156, 173, 221, 248, 249, 235, 226, 17, 23, 7, 204, 59, 157, 241, 105, 142, 127, 174, 97, 147, 126, 218, 7, 28, 118, 152, 255, 120, 209, 191, 124, 217, 219, 48, 50, 226, 42, 236, 79, 127, 113, 245, 145, 51, 207, 91, 118, 102, 135, 121, 127, 253, 117, 221, 171, 45, 113, 111, 54, 1, 109, 150, 15, 120, 221, 158, 93, 119, 185, 255, 253, 209, 177, 230, 64, 63, 61, 141, 212, 200, 155, 110, 92, 235, 111, 135, 181, 122, 93, 39, 154, 119, 227, 163, 63, 242, 211, 122, 58, 241, 156, 103, 159, 235, 240, 254, 237, 63, 63, 239, 191, 118, 223, 109, 31, 121, 250, 122, 207, 46, 108, 245, 86, 106, 94, 91, 220, 146, 55, 205, 134, 182, 54, 175, 171, 85, 243, 180, 119, 120, 223, 184, 255, 126, 125, 171, 101, 167, 91, 238, 253, 137, 183, 250, 104, 45, 63, 163, 239, 130, 236, 54, 186, 103, 222, 43, 204, 123, 160, 231, 231, 74, 40, 251, 253, 179, 53, 177, 217, 179, 191, 55, 111, 149, 233, 251, 118, 121, 214, 182, 161, 93, 249, 42, 111, 253, 238, 142, 247, 31, 247, 221, 187, 55, 223, 251, 126, 234, 173, 62, 209, 173, 187, 181, 94, 67, 179, 206, 244, 236, 201, 63, 187, 158, 234, 190, 83, 250, 126, 212, 247, 135, 46, 21, 253, 247, 63, 158, 234, 13, 123, 235, 60, 207, 53, 141, 178, 250, 158, 247, 136, 23, 251, 244, 203, 253, 101, 116, 45, 186, 190, 67, 212, 229, 184, 103, 249, 133, 93, 95, 20, 183, 251, 105, 47, 61, 196, 149, 235, 64, 239, 149, 63, 49, 175, 223, 219, 224, 227, 109, 30, 113, 109, 210, 229, 173, 54, 221, 81, 111, 121, 76, 131, 157, 53, 175, 187, 59, 154, 30, 221, 249, 32, 133, 201, 94, 253, 10, 243, 214, 216, 17, 158, 189, 195, 188, 123, 251, 238, 242, 151, 27, 74, 111, 240, 206, 252, 228, 165, 222, 230, 236, 198, 229, 117, 247, 60, 230, 189, 225, 170, 179, 52, 127, 157, 183, 124, 69, 246, 59, 83, 61, 151, 126, 58, 185, 122, 197, 226, 110, 63, 101, 222, 5, 239, 187, 74, 63, 117, 235, 39, 227, 237, 238, 223, 230, 93, 243, 177, 87, 251, 239, 175, 58, 104, 133, 255, 184, 100, 117, 155, 214, 181, 3, 188, 19, 222, 109, 222, 29, 59, 191, 165, 25, 245, 229, 169, 105, 100, 100, 216, 59, 251, 223, 95, 55, 33, 77, 127, 95, 168, 253, 96, 147, 254, 53, 52, 198, 189, 184, 185, 239, 198, 189, 109, 209, 116, 149, 210, 88, 119, 139, 191, 188, 115, 119, 229, 93, 121, 71, 246, 123, 165, 115, 149, 214, 229, 168, 70, 35, 187, 253, 175, 182, 81, 127, 63, 172, 199, 21, 171, 221, 190, 182, 213, 187, 234, 107, 58, 119, 145, 188, 63, 187, 172, 254, 62, 178, 241, 33, 207, 222, 149, 93, 255, 115, 117, 82, 95, 184, 23, 27, 219, 15, 55, 42, 127, 243, 243, 207, 250, 185, 121, 206, 251, 167, 78, 111, 211, 192, 134, 61, 105, 220, 50, 242, 152, 103, 223, 122, 149, 231, 206, 53, 116, 28, 172, 125, 135, 30, 117, 50, 196, 127, 92, 126, 132, 140, 245, 250, 205, 63, 184, 206, 219, 236, 118, 24, 154, 70, 180, 45, 119, 93, 186, 55, 189, 92, 190, 211, 62, 214, 186, 121, 15, 246, 190, 240, 191, 166, 245, 244, 233, 61, 249, 222, 153, 238, 81, 190, 23, 123, 109, 74, 191, 125, 44, 95, 93, 102, 227, 231, 55, 109, 90, 154, 151, 207, 48, 96, 29, 152, 223, 58, 48, 245, 105, 43, 169, 50, 33, 16, 116, 1, 119, 174, 87, 125, 100, 214, 165, 187, 184, 118, 111, 222, 110, 171, 223, 166, 94, 220, 43, 116, 7, 97, 253, 100, 134, 155, 62, 185, 245, 102, 251, 238, 57, 151, 217, 211, 191, 237, 182, 134, 218, 70, 255, 90, 204, 110, 245, 128, 36, 82, 67, 54, 160, 187, 19, 187, 127, 67, 137, 17, 13, 187, 212, 240, 53, 13, 113, 94, 121, 80, 198, 254, 235, 26, 179, 175, 254, 231, 35, 186, 57, 149, 6, 226, 106, 23, 166, 95, 86, 181, 175, 190, 226, 35, 54, 112, 156, 126, 191, 112, 171, 66, 86, 157, 76, 247, 119, 125, 251, 156, 121, 118, 57, 134, 172, 190, 65, 63, 21, 163, 103, 239, 123, 203, 69, 234, 29, 82, 207, 140, 166, 214, 141, 125, 246, 216, 141, 195, 118, 211, 240, 231, 116, 247, 208, 237, 186, 154, 172, 197, 254, 185, 243, 84, 27, 212, 165, 108, 139, 214, 215, 90, 164, 61, 59, 0, 203, 205, 171, 3, 13, 255, 27, 35, 166, 107, 153, 234, 221, 63, 245, 246, 230, 254, 185, 235, 89, 221, 53, 116, 139, 87, 173, 244, 175, 77, 110, 85, 79, 200, 248, 98, 248, 67, 54, 117, 84, 19, 83, 196, 227, 126, 130, 41, 183, 220, 222, 199, 6, 13, 53, 139, 233, 238, 151, 234, 116, 214, 221, 100, 203, 125, 114, 117, 243, 135, 117, 171, 151, 196, 13, 14, 254, 203, 87, 94, 98, 87, 126, 240, 28, 117, 144, 111, 176, 69, 13, 7, 56, 238, 108, 88, 87, 102, 21, 209, 145, 147, 255, 187, 161, 238, 39, 160, 38, 183, 97, 174, 45, 220, 77, 191, 58, 213, 115, 111, 109, 237, 126, 111, 99, 174, 10, 126, 207, 171, 218, 167, 83, 247, 34, 93, 180, 184, 109, 138, 54, 204, 174, 15, 241, 120, 52, 219, 91, 55, 126, 5, 200, 37, 82, 162, 71, 183, 61, 70, 106, 178, 187, 172, 101, 157, 7, 88, 188, 53, 170, 242, 79, 181, 30, 238, 93, 167, 115, 30, 227, 31, 27, 116, 19, 177, 90, 221, 241, 54, 161, 107, 73, 39, 13, 128, 40, 106, 205, 22, 55, 45, 241, 243, 115, 119, 75, 247, 203, 167, 114, 77, 40, 231, 88, 221, 98, 238, 122, 206, 33, 245, 114, 213, 61, 102, 95, 123, 75, 200, 46, 251, 236, 137, 182, 45, 121, 191, 191, 236, 49, 214, 97, 191, 57, 239, 157, 86, 119, 197, 50, 221, 56, 170, 223, 154, 86, 116, 248, 215, 17, 230, 134, 178, 239, 91, 161, 136, 233, 146, 121, 211, 47, 187, 218, 137, 23, 157, 101, 171, 14, 94, 227, 207, 82, 219, 151, 176, 179, 191, 127, 136, 221, 220, 125, 181, 233, 94, 230, 234, 125, 52, 123, 103, 231, 90, 187, 236, 152, 179, 237, 25, 205, 123, 64, 70, 11, 101, 191, 110, 246, 77, 50, 223, 59, 58, 195, 160, 91, 109, 107, 142, 152, 53, 55, 55, 90, 173, 238, 48, 94, 167, 235, 115, 221, 232, 25, 247, 232, 218, 161, 214, 127, 94, 171, 235, 123, 117, 183, 241, 6, 93, 211, 174, 123, 28, 180, 30, 168, 239, 173, 239, 28, 104, 87, 92, 123, 190, 110, 156, 187, 53, 155, 67, 109, 151, 157, 119, 222, 23, 212, 207, 221, 109, 157, 181, 218, 62, 253, 105, 134, 43, 168, 63, 155, 251, 227, 89, 199, 50, 69, 157, 219, 150, 219, 224, 146, 205, 246, 181, 155, 94, 108, 87, 172, 253, 119, 139, 141, 30, 230, 186, 197, 237, 251, 234, 249, 189, 226, 99, 239, 178, 198, 107, 254, 219, 90, 150, 232, 198, 71, 201, 65, 93, 109, 146, 187, 132, 100, 44, 203, 5, 124, 112, 87, 80, 184, 82, 109, 233, 243, 236, 64, 149, 237, 250, 159, 169, 109, 92, 87, 170, 166, 80, 93, 139, 157, 255, 226, 255, 99, 27, 244, 83, 107, 157, 117, 157, 254, 240, 116, 5, 130, 217, 15, 221, 105, 76, 189, 211, 81, 223, 169, 158, 255, 109, 246, 55, 231, 31, 107, 171, 116, 167, 103, 55, 61, 144, 186, 223, 110, 189, 237, 6, 187, 253, 185, 47, 248, 175, 235, 234, 58, 108, 213, 225, 171, 244, 92, 251, 156, 148, 150, 87, 83, 186, 253, 192, 248, 41, 20, 117, 125, 187, 102, 71, 189, 226, 46, 127, 84, 134, 251, 246, 254, 73, 114, 157, 125, 250, 169, 31, 234, 102, 77, 7, 218, 211, 163, 189, 186, 17, 148, 182, 192, 30, 253, 244, 222, 161, 207, 217, 71, 222, 245, 121, 123, 81, 251, 171, 149, 80, 196, 6, 244, 91, 195, 175, 187, 230, 101, 246, 203, 183, 254, 63, 13, 92, 15, 89, 92, 35, 26, 98, 186, 179, 182, 191, 47, 212, 62, 176, 223, 237, 7, 117, 211, 193, 68, 100, 151, 182, 223, 132, 197, 245, 189, 85, 171, 125, 77, 228, 155, 75, 236, 180, 243, 206, 181, 219, 31, 254, 133, 143, 176, 84, 117, 251, 237, 11, 255, 218, 214, 126, 246, 44, 139, 62, 253, 172, 53, 175, 92, 174, 26, 106, 136, 188, 122, 87, 93, 20, 188, 108, 117, 220, 54, 110, 104, 181, 83, 174, 201, 216, 187, 47, 191, 219, 58, 162, 199, 251, 101, 126, 224, 153, 63, 216, 145, 23, 31, 109, 246, 47, 207, 106, 207, 167, 102, 212, 79, 113, 185, 59, 48, 239, 112, 251, 226, 177, 253, 240, 224, 160, 246, 195, 202, 223, 253, 70, 114, 125, 92, 0, 250, 193, 166, 155, 223, 223, 109, 151, 188, 255, 5, 246, 220, 208, 211, 254, 229, 74, 231, 212, 29, 106, 183, 92, 248, 14, 235, 125, 165, 194, 244, 245, 35, 86, 191, 92, 195, 161, 221, 229, 23, 121, 166, 3, 22, 47, 242, 63, 109, 106, 119, 219, 174, 182, 227, 233, 182, 97, 119, 143, 131, 81, 215, 83, 189, 222, 222, 119, 134, 217, 43, 191, 179, 74, 35, 121, 30, 85, 55, 114, 198, 94, 24, 110, 181, 155, 47, 124, 175, 245, 92, 162, 94, 255, 245, 25, 107, 92, 161, 124, 221, 37, 26, 238, 178, 40, 38, 4, 16, 40, 152, 0, 1, 112, 193, 104, 73, 184, 162, 5, 180, 239, 113, 129, 70, 172, 93, 55, 236, 232, 214, 157, 105, 151, 245, 218, 123, 47, 211, 240, 170, 142, 75, 181, 211, 210, 206, 213, 123, 220, 182, 124, 232, 227, 250, 213, 135, 97, 107, 209, 79, 197, 12, 38, 7, 116, 39, 89, 13, 147, 211, 176, 177, 241, 7, 213, 46, 141, 140, 246, 161, 97, 29, 176, 60, 243, 212, 6, 91, 115, 248, 106, 251, 236, 95, 191, 213, 110, 187, 239, 27, 218, 233, 103, 15, 172, 58, 186, 14, 177, 183, 255, 237, 123, 236, 137, 204, 179, 182, 164, 249, 64, 237, 242, 181, 187, 215, 41, 254, 201, 83, 168, 81, 7, 175, 35, 234, 43, 214, 24, 185, 179, 151, 93, 173, 67, 130, 176, 245, 164, 6, 236, 23, 155, 239, 209, 176, 102, 221, 176, 228, 255, 233, 166, 86, 158, 142, 226, 116, 244, 178, 230, 168, 35, 236, 13, 111, 252, 43, 29, 204, 110, 176, 142, 150, 236, 129, 246, 216, 120, 83, 63, 217, 145, 193, 65, 29, 148, 232, 159, 134, 212, 230, 254, 13, 234, 249, 136, 187, 99, 181, 110, 12, 227, 151, 108, 154, 253, 175, 11, 192, 135, 116, 135, 212, 220, 114, 123, 31, 7, 109, 80, 67, 248, 220, 101, 142, 101, 63, 105, 104, 105, 159, 126, 158, 234, 247, 79, 235, 230, 54, 161, 13, 190, 89, 67, 253, 161, 246, 162, 171, 222, 105, 109, 103, 55, 88, 226, 185, 94, 107, 90, 210, 162, 150, 112, 211, 52, 16, 37, 174, 164, 251, 253, 227, 201, 109, 152, 107, 139, 225, 68, 66, 55, 124, 210, 16, 225, 241, 43, 227, 184, 242, 186, 223, 129, 30, 77, 235, 119, 48, 199, 181, 255, 248, 231, 195, 185, 131, 254, 137, 199, 201, 227, 82, 40, 254, 83, 87, 148, 92, 113, 220, 54, 50, 172, 245, 116, 104, 104, 226, 58, 60, 190, 14, 211, 61, 31, 28, 28, 178, 81, 253, 220, 75, 185, 76, 67, 195, 106, 71, 215, 14, 42, 215, 248, 50, 15, 142, 213, 109, 68, 215, 179, 90, 88, 81, 81, 34, 172, 107, 86, 27, 237, 215, 127, 111, 246, 222, 235, 207, 176, 132, 190, 63, 220, 207, 167, 188, 176, 249, 4, 187, 250, 178, 119, 232, 199, 164, 122, 108, 89, 74, 7, 217, 186, 87, 83, 216, 69, 48, 83, 172, 182, 33, 215, 161, 181, 75, 99, 160, 53, 42, 246, 37, 39, 190, 193, 142, 174, 57, 70, 215, 76, 14, 219, 61, 187, 31, 182, 103, 251, 126, 111, 63, 189, 73, 135, 232, 235, 20, 176, 234, 156, 89, 147, 130, 171, 147, 46, 124, 145, 58, 158, 245, 181, 166, 159, 111, 105, 24, 187, 49, 210, 172, 221, 252, 117, 80, 55, 32, 83, 155, 141, 234, 218, 239, 132, 78, 254, 37, 180, 126, 186, 71, 215, 14, 163, 254, 115, 93, 67, 63, 156, 177, 145, 65, 93, 63, 156, 26, 182, 222, 103, 51, 118, 192, 193, 250, 73, 166, 191, 81, 121, 182, 102, 43, 210, 165, 239, 187, 143, 121, 167, 248, 217, 183, 165, 20, 196, 168, 140, 126, 127, 238, 76, 10, 228, 175, 56, 234, 240, 85, 189, 19, 155, 87, 216, 238, 101, 155, 236, 107, 255, 125, 186, 93, 241, 130, 175, 90, 44, 113, 164, 235, 40, 182, 31, 102, 30, 178, 215, 124, 242, 61, 118, 224, 71, 111, 51, 91, 190, 212, 118, 239, 214, 205, 197, 198, 253, 46, 245, 76, 178, 153, 245, 60, 42, 151, 43, 90, 104, 155, 46, 199, 88, 161, 70, 251, 186, 174, 3, 222, 153, 29, 210, 188, 68, 67, 143, 62, 215, 172, 192, 78, 83, 75, 200, 5, 109, 154, 252, 153, 221, 254, 68, 149, 87, 51, 214, 39, 117, 70, 82, 67, 151, 79, 176, 143, 107, 220, 201, 49, 254, 44, 111, 252, 249, 175, 205, 254, 87, 239, 222, 239, 174, 29, 214, 238, 74, 63, 245, 181, 253, 244, 195, 213, 193, 172, 187, 18, 143, 234, 141, 122, 119, 185, 132, 18, 26, 91, 63, 220, 73, 177, 136, 126, 29, 192, 77, 151, 158, 164, 51, 180, 154, 220, 231, 141, 15, 109, 54, 251, 182, 152, 15, 208, 62, 101, 160, 95, 55, 250, 235, 178, 45, 189, 187, 236, 13, 239, 127, 149, 157, 188, 82, 63, 115, 148, 106, 176, 29, 26, 167, 252, 87, 95, 253, 27, 187, 225, 139, 183, 106, 223, 181, 204, 122, 99, 33, 27, 30, 214, 126, 68, 119, 214, 246, 247, 133, 126, 106, 217, 175, 33, 119, 233, 108, 90, 247, 94, 24, 214, 73, 225, 81, 237, 123, 118, 119, 110, 181, 206, 13, 93, 118, 250, 213, 231, 218, 35, 131, 183, 248, 223, 193, 110, 56, 244, 103, 47, 250, 59, 219, 242, 18, 157, 16, 94, 175, 124, 151, 233, 26, 218, 100, 196, 106, 58, 211, 22, 235, 93, 161, 215, 79, 216, 213, 231, 254, 139, 29, 221, 160, 224, 87, 233, 173, 75, 172, 179, 227, 254, 230, 100, 179, 251, 84, 55, 221, 216, 113, 183, 242, 75, 104, 184, 122, 210, 253, 118, 184, 219, 23, 239, 201, 223, 93, 238, 161, 24, 84, 235, 156, 219, 222, 220, 248, 234, 22, 221, 105, 254, 143, 95, 235, 182, 183, 125, 253, 20, 221, 124, 235, 9, 65, 105, 164, 120, 251, 243, 237, 163, 175, 249, 152, 78, 250, 236, 176, 206, 116, 131, 101, 90, 166, 216, 136, 198, 210, 116, 15, 217, 211, 201, 218, 31, 234, 238, 229, 254, 119, 209, 116, 219, 176, 126, 106, 77, 247, 124, 86, 195, 233, 132, 117, 67, 167, 253, 252, 74, 179, 191, 253, 209, 7, 44, 165, 19, 122, 26, 185, 100, 47, 110, 121, 190, 125, 232, 252, 191, 209, 54, 188, 217, 150, 166, 180, 1, 235, 92, 134, 110, 78, 207, 132, 0, 2, 5, 20, 216, 247, 40, 187, 128, 153, 145, 52, 2, 21, 35, 224, 159, 97, 215, 65, 96, 93, 163, 109, 25, 233, 214, 239, 199, 158, 105, 231, 30, 113, 130, 53, 232, 103, 28, 172, 38, 99, 223, 253, 241, 15, 237, 218, 159, 222, 165, 254, 151, 165, 150, 24, 212, 142, 45, 183, 167, 157, 166, 130, 238, 76, 118, 157, 142, 88, 158, 233, 221, 96, 75, 236, 72, 123, 203, 255, 190, 211, 122, 134, 122, 109, 88, 59, 234, 152, 126, 130, 229, 242, 85, 103, 248, 75, 54, 101, 116, 240, 163, 227, 79, 127, 231, 151, 219, 247, 250, 91, 105, 196, 90, 23, 167, 116, 51, 154, 152, 189, 230, 35, 58, 198, 173, 215, 53, 170, 154, 214, 39, 182, 219, 71, 110, 251, 168, 117, 233, 136, 246, 177, 245, 191, 177, 7, 134, 254, 199, 47, 203, 234, 154, 21, 118, 230, 218, 147, 252, 121, 90, 250, 117, 246, 217, 157, 26, 159, 38, 24, 242, 103, 210, 31, 191, 119, 208, 127, 225, 250, 218, 52, 229, 169, 211, 222, 121, 253, 5, 42, 234, 143, 127, 92, 161, 158, 238, 238, 161, 237, 118, 202, 55, 207, 178, 91, 254, 160, 30, 8, 25, 199, 147, 9, 123, 249, 154, 179, 237, 172, 43, 222, 162, 195, 159, 65, 107, 30, 212, 81, 136, 126, 91, 57, 47, 68, 153, 214, 220, 181, 79, 110, 245, 153, 170, 136, 249, 62, 243, 231, 223, 239, 12, 83, 165, 58, 205, 123, 74, 107, 33, 147, 155, 152, 75, 65, 19, 159, 152, 85, 129, 94, 205, 100, 91, 114, 215, 193, 186, 8, 161, 111, 199, 176, 53, 232, 248, 248, 251, 175, 237, 176, 255, 126, 232, 247, 126, 239, 88, 72, 193, 203, 105, 39, 157, 105, 107, 95, 119, 172, 174, 141, 236, 177, 142, 166, 197, 126, 176, 57, 213, 26, 80, 163, 31, 183, 221, 157, 142, 216, 113, 167, 45, 181, 227, 95, 156, 253, 14, 25, 82, 16, 250, 227, 59, 127, 102, 235, 118, 40, 11, 125, 125, 60, 249, 248, 141, 90, 251, 183, 234, 119, 112, 227, 118, 214, 202, 83, 237, 5, 186, 81, 214, 86, 5, 215, 177, 144, 2, 146, 34, 28, 49, 100, 61, 20, 40, 165, 20, 228, 105, 122, 168, 222, 15, 215, 252, 231, 137, 70, 181, 183, 54, 203, 17, 245, 152, 170, 19, 47, 251, 149, 54, 195, 149, 75, 151, 14, 219, 200, 230, 85, 214, 127, 192, 211, 246, 181, 27, 78, 183, 43, 79, 250, 138, 126, 50, 73, 23, 165, 170, 90, 63, 237, 253, 157, 189, 247, 195, 175, 179, 213, 31, 249, 149, 13, 30, 180, 210, 118, 244, 110, 183, 200, 176, 194, 155, 25, 166, 237, 23, 110, 142, 127, 92, 125, 221, 213, 181, 105, 119, 1, 178, 166, 187, 182, 127, 223, 255, 57, 34, 247, 188, 79, 63, 51, 102, 167, 106, 251, 89, 175, 250, 118, 8, 223, 245, 12, 106, 126, 221, 134, 206, 106, 22, 215, 216, 200, 83, 90, 230, 181, 102, 43, 214, 164, 44, 170, 139, 130, 21, 227, 217, 17, 55, 43, 26, 212, 244, 204, 186, 91, 116, 106, 227, 9, 245, 202, 54, 216, 43, 150, 156, 110, 71, 30, 189, 220, 182, 239, 28, 182, 214, 154, 236, 245, 29, 185, 173, 50, 172, 30, 248, 176, 251, 173, 231, 227, 143, 176, 213, 153, 215, 100, 151, 213, 26, 240, 227, 190, 251, 220, 174, 200, 186, 27, 70, 173, 49, 83, 111, 233, 93, 218, 207, 173, 172, 177, 87, 157, 124, 145, 117, 41, 13, 23, 128, 223, 244, 208, 15, 237, 251, 215, 253, 135, 98, 235, 165, 250, 57, 180, 93, 2, 246, 87, 84, 63, 141, 105, 255, 184, 253, 138, 92, 189, 238, 144, 126, 75, 125, 155, 197, 126, 209, 100, 31, 185, 254, 213, 186, 94, 89, 189, 237, 154, 150, 30, 118, 180, 189, 233, 77, 215, 216, 163, 234, 45, 93, 86, 191, 82, 22, 73, 235, 106, 88, 108, 79, 237, 122, 220, 206, 125, 229, 41, 118, 162, 126, 117, 193, 221, 90, 42, 163, 223, 119, 254, 135, 239, 252, 147, 217, 143, 181, 123, 11, 55, 89, 178, 55, 187, 188, 159, 200, 254, 254, 168, 12, 125, 153, 126, 213, 175, 221, 110, 252, 226, 22, 187, 254, 209, 235, 220, 111, 22, 89, 77, 36, 102, 167, 156, 244, 114, 59, 228, 236, 163, 236, 153, 45, 59, 172, 45, 190, 40, 111, 74, 185, 213, 99, 207, 54, 156, 123, 99, 186, 165, 244, 249, 144, 11, 132, 53, 253, 223, 79, 108, 179, 91, 158, 186, 199, 223, 134, 163, 181, 245, 246, 210, 115, 46, 180, 195, 181, 203, 126, 110, 203, 136, 181, 55, 180, 104, 107, 119, 39, 194, 247, 151, 224, 116, 25, 241, 62, 2, 8, 236, 79, 160, 8, 187, 179, 253, 21, 129, 207, 17, 40, 71, 1, 221, 44, 167, 81, 229, 242, 111, 18, 164, 3, 204, 115, 82, 214, 180, 88, 61, 188, 218, 115, 63, 147, 252, 147, 253, 225, 129, 219, 252, 155, 93, 165, 90, 6, 44, 225, 126, 91, 101, 127, 147, 118, 184, 174, 199, 38, 185, 53, 102, 137, 214, 199, 109, 235, 135, 87, 216, 79, 110, 248, 153, 125, 250, 91, 95, 177, 79, 126, 230, 51, 246, 137, 143, 125, 203, 191, 209, 204, 246, 103, 183, 251, 103, 194, 93, 192, 156, 11, 64, 195, 238, 234, 47, 13, 211, 237, 176, 67, 148, 203, 6, 187, 234, 232, 235, 212, 35, 208, 165, 231, 250, 93, 204, 238, 13, 102, 95, 80, 156, 182, 170, 205, 238, 249, 241, 38, 251, 175, 27, 239, 240, 123, 70, 92, 113, 26, 142, 93, 107, 157, 239, 59, 223, 122, 118, 108, 208, 79, 4, 45, 118, 29, 38, 42, 126, 158, 29, 234, 184, 0, 217, 29, 163, 228, 157, 246, 59, 67, 222, 165, 75, 250, 161, 47, 160, 242, 199, 107, 66, 118, 234, 195, 7, 219, 215, 255, 229, 102, 251, 243, 192, 221, 230, 122, 199, 218, 211, 181, 246, 214, 75, 94, 111, 231, 189, 245, 116, 29, 100, 247, 90, 131, 134, 33, 22, 227, 160, 127, 225, 65, 230, 217, 64, 179, 89, 220, 159, 55, 207, 2, 250, 200, 239, 139, 217, 223, 124, 115, 66, 80, 162, 121, 178, 158, 83, 146, 101, 186, 144, 31, 248, 232, 102, 85, 181, 81, 5, 69, 10, 14, 190, 249, 213, 127, 211, 125, 169, 6, 245, 211, 42, 97, 123, 94, 236, 80, 123, 201, 145, 71, 41, 44, 234, 213, 207, 132, 235, 132, 151, 235, 68, 156, 34, 122, 171, 75, 187, 51, 97, 187, 237, 164, 99, 79, 180, 211, 154, 94, 245, 255, 179, 119, 21, 128, 117, 86, 103, 251, 185, 46, 113, 183, 198, 155, 84, 161, 45, 21, 10, 45, 165, 72, 161, 48, 92, 7, 195, 25, 50, 96, 130, 253, 67, 6, 12, 134, 12, 27, 19, 116, 216, 6, 12, 119, 25, 206, 10, 180, 133, 82, 40, 133, 122, 83, 73, 227, 238, 185, 150, 43, 255, 243, 126, 223, 189, 37, 109, 147, 52, 73, 19, 164, 57, 111, 155, 155, 220, 79, 142, 60, 231, 124, 223, 57, 175, 107, 61, 237, 240, 54, 193, 176, 116, 13, 152, 231, 135, 194, 185, 66, 220, 249, 197, 61, 216, 212, 82, 171, 157, 115, 103, 141, 66, 225, 81, 251, 82, 192, 198, 24, 80, 18, 121, 217, 174, 107, 10, 181, 147, 131, 249, 96, 17, 210, 143, 222, 126, 180, 34, 195, 239, 40, 147, 230, 11, 66, 115, 253, 174, 239, 222, 89, 154, 9, 48, 227, 178, 49, 216, 180, 246, 158, 212, 174, 223, 201, 248, 75, 160, 183, 228, 12, 42, 248, 132, 249, 205, 36, 243, 251, 34, 53, 191, 51, 239, 165, 224, 145, 218, 85, 186, 134, 190, 209, 180, 8, 191, 188, 237, 66, 216, 111, 255, 22, 158, 162, 2, 212, 214, 109, 129, 185, 131, 204, 164, 180, 99, 39, 101, 15, 6, 130, 237, 239, 137, 104, 17, 155, 41, 204, 164, 142, 31, 143, 44, 188, 130, 17, 215, 117, 38, 201, 148, 150, 130, 226, 147, 199, 179, 29, 117, 76, 221, 150, 160, 53, 199, 72, 211, 94, 161, 180, 232, 81, 40, 37, 131, 123, 250, 140, 243, 144, 147, 191, 63, 143, 152, 240, 148, 127, 57, 94, 222, 84, 166, 157, 255, 168, 230, 3, 172, 242, 146, 193, 226, 183, 113, 206, 36, 196, 231, 165, 112, 182, 48, 34, 179, 88, 23, 201, 56, 104, 87, 81, 249, 29, 235, 161, 229, 143, 19, 227, 79, 90, 195, 52, 199, 141, 218, 209, 13, 45, 155, 240, 228, 226, 59, 81, 64, 198, 182, 193, 221, 72, 179, 98, 59, 234, 60, 157, 152, 113, 225, 44, 228, 23, 204, 164, 133, 65, 20, 42, 2, 85, 88, 248, 191, 229, 18, 39, 13, 205, 241, 110, 106, 126, 201, 68, 247, 151, 4, 87, 170, 239, 187, 26, 204, 116, 233, 105, 199, 203, 255, 151, 141, 143, 91, 185, 6, 242, 248, 88, 67, 28, 142, 152, 64, 193, 196, 56, 174, 97, 117, 70, 216, 70, 241, 218, 122, 106, 179, 41, 192, 152, 57, 239, 40, 196, 59, 101, 29, 52, 224, 221, 186, 247, 177, 254, 249, 133, 90, 141, 237, 81, 178, 54, 15, 140, 66, 157, 100, 163, 83, 200, 180, 19, 174, 15, 238, 255, 6, 91, 124, 75, 97, 161, 102, 125, 74, 106, 6, 230, 156, 190, 47, 153, 99, 23, 44, 97, 205, 120, 191, 75, 222, 217, 124, 161, 132, 194, 71, 115, 236, 164, 184, 20, 120, 86, 44, 197, 91, 47, 61, 197, 17, 113, 195, 202, 0, 146, 83, 156, 227, 177, 247, 222, 243, 89, 107, 53, 3, 197, 83, 42, 35, 211, 111, 103, 229, 245, 187, 97, 234, 66, 133, 128, 66, 96, 123, 4, 228, 221, 168, 72, 33, 160, 16, 232, 1, 1, 187, 49, 150, 86, 75, 94, 114, 151, 126, 28, 156, 114, 21, 55, 135, 92, 148, 185, 255, 171, 250, 166, 14, 223, 188, 86, 194, 237, 6, 85, 16, 220, 36, 133, 5, 247, 61, 148, 176, 221, 33, 46, 102, 6, 163, 7, 205, 45, 6, 36, 196, 150, 227, 236, 203, 206, 194, 159, 46, 188, 20, 183, 253, 233, 22, 188, 253, 214, 235, 112, 116, 68, 211, 20, 139, 27, 31, 86, 185, 149, 232, 7, 36, 185, 1, 29, 76, 207, 224, 223, 196, 115, 215, 29, 142, 177, 169, 135, 242, 180, 1, 45, 30, 23, 46, 93, 244, 128, 182, 193, 105, 55, 211, 248, 139, 123, 128, 186, 207, 90, 105, 70, 69, 38, 154, 60, 249, 188, 152, 113, 56, 125, 175, 105, 244, 152, 163, 84, 189, 139, 18, 124, 209, 44, 171, 21, 85, 135, 150, 155, 11, 137, 0, 109, 201, 136, 194, 199, 255, 121, 11, 255, 126, 253, 58, 180, 49, 183, 50, 149, 10, 56, 208, 49, 5, 199, 95, 242, 91, 52, 238, 103, 134, 173, 190, 17, 246, 24, 110, 190, 20, 109, 131, 64, 152, 71, 97, 208, 95, 201, 129, 204, 28, 212, 204, 193, 26, 69, 191, 112, 241, 35, 223, 254, 135, 1, 225, 16, 205, 92, 152, 54, 155, 147, 215, 135, 25, 168, 72, 1, 219, 148, 186, 243, 47, 145, 219, 196, 136, 83, 2, 232, 154, 153, 215, 200, 204, 188, 214, 253, 253, 49, 209, 244, 61, 82, 198, 206, 107, 251, 113, 93, 33, 238, 20, 66, 205, 62, 93, 211, 181, 178, 234, 115, 188, 95, 249, 190, 38, 240, 106, 163, 239, 236, 151, 115, 200, 49, 228, 243, 25, 23, 109, 30, 221, 37, 248, 230, 144, 215, 196, 86, 50, 210, 60, 149, 238, 154, 136, 205, 74, 196, 158, 71, 157, 68, 171, 223, 36, 154, 63, 7, 240, 118, 217, 18, 60, 182, 248, 99, 140, 206, 96, 196, 184, 148, 205, 216, 252, 98, 33, 42, 74, 43, 41, 248, 97, 170, 53, 230, 228, 157, 95, 60, 27, 181, 124, 229, 88, 221, 77, 180, 158, 229, 198, 124, 0, 36, 45, 214, 91, 77, 115, 109, 113, 120, 229, 23, 233, 71, 111, 63, 82, 180, 248, 63, 138, 25, 119, 130, 133, 239, 87, 82, 113, 200, 181, 181, 27, 54, 205, 148, 148, 124, 120, 60, 7, 159, 10, 236, 157, 143, 37, 125, 82, 227, 152, 244, 173, 33, 11, 173, 233, 100, 126, 95, 158, 131, 51, 201, 252, 58, 60, 100, 126, 169, 73, 126, 163, 105, 49, 206, 188, 229, 87, 136, 186, 99, 37, 186, 198, 20, 160, 186, 102, 19, 172, 140, 118, 237, 23, 38, 243, 251, 122, 87, 234, 0, 161, 171, 221, 204, 231, 132, 169, 135, 254, 150, 68, 69, 106, 146, 214, 247, 189, 172, 169, 248, 117, 225, 25, 100, 115, 219, 144, 25, 198, 195, 200, 220, 213, 34, 224, 176, 7, 68, 10, 64, 119, 151, 196, 217, 20, 80, 16, 48, 210, 39, 139, 22, 80, 245, 91, 70, 31, 127, 174, 83, 239, 142, 66, 195, 215, 5, 114, 24, 198, 68, 230, 9, 62, 124, 111, 42, 187, 93, 140, 18, 206, 231, 133, 90, 245, 240, 192, 176, 206, 4, 206, 131, 22, 156, 112, 240, 185, 176, 24, 245, 119, 93, 158, 100, 36, 120, 130, 218, 202, 244, 24, 106, 135, 59, 200, 52, 235, 38, 216, 191, 216, 251, 44, 228, 68, 201, 36, 227, 60, 220, 80, 137, 85, 111, 124, 172, 185, 134, 219, 120, 128, 81, 25, 181, 186, 250, 253, 193, 126, 7, 141, 126, 70, 148, 160, 80, 198, 187, 26, 47, 190, 76, 102, 90, 107, 150, 1, 115, 242, 102, 224, 231, 147, 15, 65, 73, 219, 70, 100, 71, 23, 162, 165, 179, 30, 185, 147, 138, 113, 200, 94, 199, 32, 218, 34, 146, 105, 242, 196, 11, 86, 96, 249, 202, 117, 236, 121, 50, 76, 158, 48, 136, 253, 174, 156, 23, 82, 99, 238, 107, 115, 82, 67, 158, 130, 103, 87, 191, 141, 165, 95, 146, 249, 103, 253, 73, 204, 229, 254, 203, 233, 63, 147, 229, 84, 203, 104, 23, 205, 120, 8, 91, 193, 146, 99, 187, 72, 242, 14, 106, 54, 54, 104, 165, 124, 181, 225, 13, 44, 110, 89, 164, 213, 219, 154, 104, 198, 103, 71, 140, 23, 23, 109, 46, 78, 172, 83, 182, 23, 145, 65, 218, 197, 58, 213, 237, 10, 1, 133, 192, 142, 8, 240, 45, 175, 72, 33, 160, 16, 232, 9, 1, 51, 253, 115, 60, 238, 22, 24, 246, 43, 64, 50, 83, 97, 112, 109, 228, 54, 193, 143, 181, 158, 106, 116, 6, 43, 169, 33, 48, 49, 21, 139, 24, 157, 245, 159, 100, 111, 103, 32, 119, 218, 76, 191, 166, 148, 80, 26, 10, 178, 178, 81, 88, 88, 136, 140, 140, 12, 46, 184, 29, 244, 237, 10, 51, 8, 225, 34, 101, 27, 43, 148, 205, 141, 208, 102, 26, 34, 62, 176, 207, 149, 204, 94, 34, 26, 32, 74, 199, 201, 234, 150, 222, 246, 18, 82, 76, 73, 100, 170, 43, 168, 59, 72, 195, 127, 54, 60, 134, 143, 191, 121, 74, 219, 32, 57, 201, 26, 207, 218, 151, 185, 130, 143, 202, 69, 160, 210, 133, 40, 6, 68, 210, 182, 9, 59, 223, 53, 106, 229, 143, 132, 143, 174, 128, 155, 70, 112, 57, 184, 231, 150, 101, 88, 240, 201, 50, 230, 152, 228, 166, 204, 21, 192, 62, 19, 231, 97, 159, 223, 158, 64, 239, 58, 90, 72, 182, 242, 32, 231, 130, 34, 29, 1, 153, 145, 145, 121, 106, 117, 154, 233, 211, 150, 132, 216, 184, 88, 196, 197, 198, 33, 46, 110, 199, 159, 88, 6, 228, 138, 141, 143, 69, 18, 205, 57, 77, 14, 125, 211, 46, 154, 21, 125, 102, 247, 31, 85, 237, 122, 177, 134, 32, 217, 163, 236, 144, 32, 82, 41, 169, 201, 72, 73, 73, 217, 233, 79, 114, 178, 126, 157, 252, 182, 105, 65, 153, 248, 28, 254, 68, 159, 3, 147, 223, 199, 77, 123, 50, 170, 255, 187, 25, 117, 139, 69, 188, 37, 123, 101, 7, 78, 205, 153, 134, 244, 24, 6, 75, 10, 250, 96, 55, 70, 11, 251, 187, 13, 57, 200, 241, 249, 168, 253, 29, 61, 99, 54, 78, 156, 200, 0, 70, 188, 194, 16, 236, 68, 219, 39, 171, 53, 31, 202, 16, 25, 228, 160, 176, 78, 235, 54, 226, 229, 101, 247, 160, 214, 83, 195, 141, 56, 48, 99, 194, 52, 156, 176, 215, 73, 194, 111, 106, 130, 134, 126, 112, 157, 91, 235, 149, 92, 168, 22, 10, 40, 18, 145, 164, 249, 92, 38, 167, 36, 113, 172, 100, 44, 118, 252, 73, 78, 78, 66, 82, 18, 127, 18, 147, 80, 156, 91, 140, 53, 235, 87, 225, 232, 7, 206, 69, 106, 170, 206, 240, 116, 6, 93, 248, 160, 246, 61, 173, 236, 118, 45, 20, 32, 217, 146, 62, 38, 145, 240, 175, 100, 249, 97, 108, 75, 67, 99, 92, 37, 30, 124, 109, 63, 154, 61, 211, 231, 87, 152, 95, 123, 16, 175, 87, 125, 76, 230, 247, 18, 88, 255, 178, 2, 222, 49, 121, 168, 40, 39, 243, 75, 25, 163, 143, 249, 144, 197, 127, 244, 251, 166, 32, 211, 213, 105, 140, 55, 243, 208, 46, 234, 164, 37, 15, 201, 196, 216, 201, 69, 134, 28, 237, 111, 99, 39, 133, 15, 228, 142, 2, 212, 22, 154, 201, 31, 123, 55, 178, 157, 251, 1, 169, 147, 214, 210, 122, 69, 151, 154, 22, 45, 216, 194, 92, 74, 188, 60, 49, 5, 149, 245, 21, 88, 217, 240, 9, 199, 180, 3, 25, 180, 24, 186, 104, 244, 73, 154, 108, 149, 97, 220, 17, 101, 150, 208, 237, 4, 136, 154, 70, 71, 151, 206, 220, 30, 147, 118, 3, 139, 119, 82, 75, 236, 199, 187, 238, 114, 230, 80, 35, 255, 23, 71, 73, 106, 39, 87, 161, 6, 78, 4, 90, 61, 143, 179, 36, 114, 221, 97, 224, 43, 106, 111, 87, 119, 148, 160, 177, 115, 19, 231, 84, 60, 203, 229, 117, 131, 33, 194, 28, 138, 243, 137, 81, 2, 170, 215, 121, 41, 172, 221, 200, 57, 201, 140, 194, 150, 12, 228, 140, 223, 67, 43, 209, 20, 180, 177, 7, 29, 40, 96, 186, 162, 12, 154, 229, 203, 154, 88, 197, 217, 184, 177, 149, 109, 228, 20, 245, 177, 141, 12, 34, 61, 240, 218, 121, 11, 117, 208, 176, 36, 210, 164, 96, 69, 20, 234, 218, 214, 202, 202, 204, 210, 109, 204, 167, 60, 22, 217, 115, 136, 113, 125, 128, 105, 177, 6, 38, 244, 217, 89, 67, 2, 76, 5, 102, 243, 218, 137, 90, 60, 202, 23, 120, 224, 93, 67, 169, 20, 135, 50, 150, 162, 128, 51, 114, 38, 107, 102, 231, 226, 47, 111, 55, 49, 253, 132, 20, 198, 115, 138, 20, 2, 10, 129, 161, 71, 128, 59, 59, 69, 10, 1, 133, 192, 14, 8, 112, 159, 29, 162, 58, 144, 113, 85, 145, 95, 180, 137, 98, 97, 46, 82, 164, 26, 254, 123, 172, 110, 17, 202, 184, 246, 166, 81, 203, 82, 75, 63, 162, 129, 146, 182, 105, 99, 4, 90, 183, 213, 141, 250, 70, 154, 26, 74, 84, 41, 146, 248, 236, 5, 105, 226, 24, 33, 217, 159, 7, 130, 140, 252, 76, 211, 47, 172, 103, 131, 184, 103, 157, 52, 214, 39, 138, 11, 141, 222, 46, 125, 9, 77, 107, 169, 236, 73, 114, 193, 75, 83, 177, 68, 70, 55, 197, 219, 192, 242, 35, 156, 56, 126, 146, 104, 8, 140, 56, 32, 117, 14, 246, 158, 190, 31, 158, 126, 253, 41, 228, 134, 24, 249, 212, 66, 115, 71, 238, 85, 6, 177, 93, 8, 215, 186, 123, 253, 18, 243, 72, 179, 236, 242, 87, 215, 227, 134, 255, 92, 143, 156, 201, 54, 76, 140, 157, 141, 241, 12, 54, 246, 240, 225, 87, 225, 151, 39, 173, 196, 231, 207, 47, 165, 214, 193, 130, 14, 49, 135, 215, 162, 167, 142, 228, 29, 137, 232, 36, 66, 232, 160, 89, 164, 208, 218, 205, 156, 128, 131, 160, 138, 142, 26, 93, 35, 56, 128, 123, 165, 94, 163, 4, 154, 35, 173, 41, 37, 211, 182, 11, 100, 98, 148, 88, 9, 200, 243, 83, 36, 198, 46, 131, 73, 50, 11, 181, 80, 16, 209, 172, 207, 197, 40, 170, 4, 143, 48, 140, 198, 221, 20, 68, 148, 181, 55, 33, 58, 69, 143, 22, 47, 239, 20, 141, 209, 225, 101, 90, 126, 96, 118, 120, 214, 121, 45, 212, 235, 114, 83, 207, 99, 165, 85, 37, 248, 248, 171, 87, 168, 131, 75, 71, 171, 159, 194, 62, 110, 186, 69, 7, 248, 213, 7, 78, 212, 29, 233, 36, 163, 74, 147, 84, 10, 136, 246, 157, 185, 55, 94, 204, 123, 30, 93, 165, 93, 48, 219, 141, 240, 247, 25, 28, 234, 187, 183, 139, 155, 155, 253, 174, 46, 70, 227, 21, 14, 199, 27, 69, 171, 139, 222, 49, 15, 146]);
fileData1.push.apply(fileData1, [241, 233, 10, 182, 50, 16, 86, 17, 3, 65, 173, 199, 177, 231, 159, 133, 219, 79, 185, 13, 137, 230, 100, 109, 152, 218, 221, 21, 184, 250, 185, 27, 145, 227, 72, 71, 89, 83, 165, 62, 116, 189, 48, 62, 18, 53, 88, 92, 150, 45, 160, 63, 175, 117, 11, 30, 250, 239, 108, 156, 57, 253, 159, 100, 60, 198, 194, 99, 239, 194, 75, 124, 135, 159, 118, 245, 209, 72, 121, 162, 13, 161, 162, 92, 84, 151, 148, 74, 104, 135, 48, 243, 251, 93, 251, 245, 74, 190, 191, 79, 127, 80, 103, 100, 95, 254, 224, 106, 28, 117, 210, 167, 28, 35, 35, 218, 138, 41, 0, 56, 154, 127, 190, 198, 115, 25, 12, 116, 72, 31, 209, 20, 107, 18, 227, 20, 108, 194, 222, 19, 14, 193, 222, 217, 243, 184, 38, 68, 99, 67, 168, 20, 11, 27, 86, 106, 141, 213, 172, 5, 106, 93, 248, 168, 244, 110, 28, 233, 217, 31, 99, 236, 51, 40, 220, 35, 142, 115, 41, 196, 88, 96, 128, 47, 41, 252, 14, 139, 99, 252, 251, 90, 174, 45, 60, 78, 101, 175, 70, 13, 193, 70, 92, 178, 226, 25, 142, 122, 20, 202, 24, 253, 57, 198, 105, 69, 91, 51, 199, 141, 215, 152, 36, 179, 20, 169, 133, 12, 232, 19, 237, 159, 161, 164, 181, 147, 51, 39, 5, 53, 65, 221, 159, 92, 59, 57, 192, 15, 111, 72, 22, 192, 56, 172, 106, 254, 15, 150, 123, 38, 96, 158, 253, 106, 4, 156, 244, 1, 159, 204, 118, 145, 12, 225, 168, 138, 25, 251, 117, 194, 144, 162, 51, 218, 11, 67, 37, 184, 169, 230, 91, 77, 91, 202, 85, 15, 204, 96, 165, 93, 59, 208, 15, 63, 205, 183, 152, 41, 153, 170, 238, 6, 124, 82, 119, 7, 230, 179, 147, 5, 20, 37, 7, 19, 253, 136, 219, 119, 44, 42, 63, 41, 67, 180, 77, 218, 17, 198, 107, 160, 21, 244, 114, 189, 159, 66, 8, 71, 124, 0, 109, 237, 65, 52, 53, 74, 15, 232, 226, 205, 222, 252, 34, 48, 17, 127, 224, 48, 165, 177, 155, 14, 174, 76, 130, 12, 101, 13, 124, 134, 21, 41, 4, 20, 2, 67, 141, 128, 98, 128, 135, 26, 81, 85, 222, 238, 129, 0, 215, 60, 139, 182, 46, 89, 48, 189, 136, 11, 82, 18, 119, 71, 252, 111, 97, 132, 210, 244, 141, 100, 90, 155, 185, 40, 37, 112, 81, 236, 115, 35, 216, 11, 20, 225, 213, 172, 163, 181, 13, 218, 210, 74, 147, 40, 49, 15, 140, 152, 56, 70, 238, 146, 72, 208, 76, 148, 138, 52, 70, 134, 94, 95, 181, 10, 151, 205, 255, 63, 100, 231, 78, 8, 159, 246, 226, 232, 219, 222, 212, 52, 52, 158, 78, 238, 136, 217, 184, 118, 182, 77, 232, 149, 85, 47, 225, 200, 230, 253, 48, 39, 126, 2, 226, 24, 76, 227, 212, 185, 135, 96, 233, 228, 231, 81, 177, 220, 139, 248, 164, 24, 180, 52, 146, 105, 151, 245, 92, 173, 170, 154, 22, 176, 142, 131, 57, 158, 129, 87, 150, 63, 179, 28, 207, 30, 244, 58, 174, 63, 126, 14, 152, 1, 10, 19, 76, 197, 152, 125, 243, 165, 248, 252, 195, 83, 209, 209, 104, 229, 102, 154, 225, 88, 100, 192, 70, 40, 112, 154, 198, 148, 187, 49, 201, 36, 125, 202, 252, 51, 112, 224, 194, 249, 244, 145, 179, 19, 13, 62, 24, 253, 36, 73, 59, 229, 14, 122, 144, 144, 158, 72, 31, 108, 135, 118, 167, 152, 51, 247, 73, 225, 211, 18, 248, 198, 187, 255, 4, 228, 253, 249, 124, 92, 232, 47, 160, 249, 100, 16, 126, 106, 234, 118, 114, 183, 54, 198, 126, 166, 51, 145, 212, 59, 173, 205, 109, 120, 227, 205, 215, 177, 106, 245, 42, 70, 53, 142, 70, 167, 187, 227, 167, 55, 156, 132, 59, 68, 255, 117, 161, 205, 118, 98, 194, 223, 162, 163, 242, 88, 108, 200, 77, 119, 96, 53, 53, 120, 142, 112, 206, 162, 200, 59, 197, 64, 223, 70, 163, 149, 55, 186, 179, 113, 250, 156, 91, 229, 86, 82, 8, 11, 87, 125, 141, 55, 30, 93, 137, 113, 185, 69, 88, 83, 94, 131, 40, 166, 34, 79, 76, 205, 194, 215, 139, 150, 226, 211, 111, 23, 163, 232, 128, 195, 233, 83, 108, 195, 145, 135, 206, 197, 199, 100, 130, 95, 43, 93, 66, 55, 96, 7, 107, 208, 223, 53, 122, 57, 219, 127, 118, 27, 17, 51, 153, 167, 196, 86, 166, 20, 74, 164, 21, 0, 131, 47, 109, 151, 126, 71, 231, 91, 244, 96, 63, 33, 99, 23, 235, 154, 128, 49, 135, 44, 198, 129, 135, 252, 10, 135, 205, 190, 14, 185, 212, 104, 203, 227, 230, 165, 6, 240, 209, 103, 31, 68, 210, 147, 244, 74, 201, 232, 130, 161, 154, 102, 205, 219, 87, 219, 237, 187, 137, 115, 35, 206, 239, 164, 213, 204, 38, 252, 243, 189, 217, 56, 99, 234, 195, 52, 147, 29, 139, 128, 169, 139, 179, 200, 130, 168, 206, 0, 166, 126, 67, 167, 135, 196, 177, 212, 252, 149, 107, 65, 7, 187, 196, 236, 249, 7, 208, 252, 118, 107, 54, 125, 107, 117, 102, 104, 243, 43, 201, 232, 58, 78, 180, 231, 192, 180, 236, 28, 92, 116, 224, 68, 220, 255, 90, 5, 205, 129, 227, 24, 240, 223, 67, 147, 228, 120, 142, 64, 35, 246, 76, 27, 135, 108, 227, 52, 22, 97, 192, 219, 203, 23, 224, 173, 229, 31, 104, 26, 68, 31, 177, 20, 42, 251, 96, 60, 26, 126, 22, 135, 49, 249, 252, 146, 155, 8, 156, 121, 22, 92, 11, 254, 5, 131, 35, 149, 7, 218, 233, 139, 74, 33, 108, 83, 16, 251, 157, 71, 152, 99, 244, 231, 216, 217, 108, 132, 245, 190, 55, 201, 132, 230, 194, 220, 178, 133, 243, 198, 65, 241, 133, 13, 147, 10, 169, 165, 76, 214, 25, 116, 43, 163, 30, 103, 50, 253, 158, 120, 219, 72, 194, 121, 46, 96, 252, 24, 28, 133, 24, 88, 82, 210, 92, 151, 172, 161, 217, 118, 5, 77, 185, 71, 179, 28, 74, 47, 130, 121, 121, 12, 5, 77, 33, 143, 87, 230, 19, 69, 60, 25, 237, 212, 198, 82, 88, 73, 138, 171, 104, 193, 184, 45, 229, 140, 214, 204, 75, 101, 204, 6, 201, 0, 139, 1, 23, 179, 155, 83, 203, 77, 97, 222, 138, 66, 52, 181, 27, 81, 64, 65, 64, 23, 173, 89, 86, 22, 237, 77, 155, 170, 181, 112, 153, 137, 219, 16, 83, 136, 243, 147, 226, 4, 184, 104, 18, 86, 207, 190, 203, 10, 78, 207, 125, 116, 216, 236, 200, 46, 114, 160, 229, 51, 31, 140, 178, 191, 32, 245, 53, 207, 181, 11, 212, 135, 66, 64, 33, 48, 40, 4, 20, 3, 60, 40, 216, 212, 77, 187, 61, 2, 92, 123, 152, 45, 146, 221, 52, 32, 153, 107, 114, 216, 24, 9, 158, 214, 46, 180, 149, 234, 139, 125, 72, 51, 149, 219, 5, 36, 168, 226, 213, 76, 183, 168, 37, 217, 129, 88, 191, 152, 75, 211, 114, 16, 206, 102, 174, 200, 5, 12, 0, 50, 101, 15, 140, 50, 138, 58, 152, 113, 175, 154, 62, 69, 220, 194, 245, 162, 87, 225, 238, 144, 82, 124, 19, 141, 185, 58, 152, 6, 37, 41, 31, 27, 239, 255, 0, 91, 14, 127, 11, 248, 217, 4, 109, 67, 53, 110, 204, 84, 20, 49, 146, 107, 201, 114, 222, 35, 38, 142, 244, 51, 54, 80, 179, 172, 105, 134, 228, 254, 17, 79, 86, 230, 26, 173, 71, 113, 123, 54, 110, 63, 251, 43, 28, 176, 231, 127, 113, 232, 216, 163, 184, 11, 50, 227, 183, 69, 199, 160, 241, 158, 179, 177, 224, 140, 199, 177, 57, 147, 50, 250, 170, 6, 106, 210, 244, 141, 201, 72, 133, 77, 24, 225, 49, 121, 227, 181, 159, 93, 195, 128, 177, 111, 245, 71, 169, 207, 98, 68, 139, 169, 255, 55, 224, 212, 241, 243, 113, 124, 238, 28, 100, 248, 236, 84, 142, 137, 201, 174, 232, 250, 118, 70, 140, 154, 75, 205, 163, 213, 98, 69, 117, 115, 5, 74, 234, 86, 107, 12, 176, 228, 236, 236, 244, 145, 1, 238, 93, 41, 185, 179, 130, 127, 176, 243, 145, 57, 216, 72, 159, 88, 23, 91, 97, 227, 171, 202, 76, 166, 216, 146, 72, 59, 85, 172, 228, 79, 50, 159, 115, 254, 226, 115, 46, 91, 104, 75, 130, 17, 65, 106, 139, 11, 174, 45, 199, 68, 251, 44, 30, 3, 190, 241, 215, 224, 153, 154, 55, 25, 90, 47, 6, 213, 86, 6, 211, 226, 88, 116, 54, 181, 50, 79, 46, 95, 58, 101, 155, 176, 248, 195, 199, 113, 220, 180, 125, 153, 222, 38, 13, 163, 109, 123, 97, 212, 172, 61, 24, 126, 122, 9, 76, 29, 100, 210, 244, 98, 181, 114, 182, 249, 224, 220, 208, 52, 245, 114, 144, 233, 93, 102, 141, 158, 137, 5, 247, 46, 132, 137, 214, 40, 70, 58, 109, 107, 193, 253, 120, 74, 174, 18, 50, 208, 141, 68, 230, 147, 48, 234, 242, 88, 25, 232, 2, 98, 137, 107, 71, 78, 250, 40, 190, 127, 83, 52, 198, 192, 213, 213, 138, 191, 60, 117, 43, 254, 244, 203, 123, 16, 155, 18, 135, 182, 234, 70, 142, 61, 59, 215, 7, 211, 229, 242, 196, 98, 185, 115, 19, 30, 88, 58, 137, 204, 239, 163, 176, 118, 21, 67, 220, 88, 131, 82, 62, 199, 123, 94, 254, 129, 120, 246, 174, 191, 226, 171, 121, 191, 67, 113, 198, 104, 172, 143, 218, 64, 95, 215, 129, 136, 114, 180, 230, 15, 249, 71, 192, 32, 12, 102, 12, 74, 203, 23, 96, 121, 232, 111, 244, 193, 102, 90, 166, 96, 30, 198, 120, 143, 224, 241, 63, 211, 114, 59, 71, 243, 143, 70, 13, 175, 27, 207, 81, 158, 107, 129, 49, 90, 244, 132, 49, 48, 175, 108, 4, 22, 138, 214, 155, 17, 132, 41, 104, 160, 215, 61, 90, 170, 235, 80, 225, 229, 59, 43, 56, 6, 19, 205, 89, 248, 247, 152, 121, 56, 19, 255, 66, 166, 73, 152, 218, 16, 115, 218, 231, 51, 143, 240, 102, 92, 92, 248, 111, 164, 153, 245, 181, 165, 186, 107, 5, 124, 159, 113, 214, 100, 123, 224, 47, 231, 188, 26, 37, 15, 169, 1, 133, 163, 104, 5, 45, 150, 7, 164, 96, 167, 23, 158, 205, 108, 131, 88, 224, 139, 63, 182, 206, 23, 107, 231, 6, 243, 97, 150, 2, 42, 41, 159, 169, 161, 40, 135, 12, 48, 19, 51, 209, 205, 129, 190, 193, 228, 61, 141, 213, 178, 62, 242, 157, 147, 100, 65, 172, 172, 185, 36, 43, 211, 105, 133, 170, 36, 162, 50, 215, 102, 9, 220, 160, 55, 75, 59, 55, 160, 15, 222, 23, 9, 182, 102, 105, 240, 34, 36, 81, 172, 201, 208, 139, 37, 4, 24, 0, 78, 138, 53, 208, 132, 159, 213, 15, 41, 9, 207, 29, 148, 114, 233, 55, 221, 74, 13, 183, 136, 147, 132, 1, 102, 154, 98, 36, 143, 74, 160, 144, 195, 133, 4, 149, 7, 120, 72, 49, 87, 133, 41, 4, 182, 71, 128, 79, 160, 34, 133, 128, 66, 96, 7, 4, 184, 224, 69, 132, 202, 126, 89, 172, 228, 2, 30, 11, 250, 2, 8, 186, 117, 233, 122, 72, 118, 108, 187, 66, 145, 10, 122, 40, 67, 138, 14, 113, 179, 150, 30, 27, 194, 170, 205, 13, 56, 254, 172, 253, 176, 103, 182, 248, 240, 250, 216, 12, 27, 22, 188, 248, 34, 90, 55, 53, 114, 179, 67, 62, 141, 218, 45, 33, 47, 119, 3, 174, 232, 205, 252, 43, 13, 239, 173, 191, 27, 179, 14, 159, 129, 130, 224, 92, 56, 82, 242, 80, 112, 204, 161, 192, 135, 159, 162, 107, 11, 245, 104, 209, 14, 4, 218, 250, 210, 224, 104, 197, 141, 144, 15, 109, 139, 195, 136, 207, 94, 166, 63, 225, 38, 108, 211, 38, 92, 243, 244, 241, 200, 191, 230, 91, 20, 219, 41, 112, 160, 207, 217, 77, 39, 93, 143, 220, 143, 22, 161, 248, 133, 6, 172, 167, 252, 192, 225, 218, 197, 113, 31, 33, 200, 238, 172, 155, 186, 0, 166, 255, 88, 74, 112, 164, 124, 3, 133, 65, 81, 242, 179, 179, 210, 123, 62, 159, 202, 104, 184, 81, 137, 186, 207, 163, 209, 204, 141, 187, 48, 137, 63, 65, 210, 132, 2, 210, 110, 230, 84, 213, 222, 77, 252, 51, 72, 166, 208, 21, 246, 177, 14, 201, 230, 153, 83, 219, 192, 72, 202, 33, 250, 80, 198, 38, 120, 209, 208, 156, 141, 107, 47, 96, 32, 36, 147, 48, 76, 118, 120, 42, 214, 227, 253, 191, 191, 134, 241, 9, 217, 104, 169, 37, 167, 35, 68, 94, 163, 41, 184, 137, 177, 127, 71, 227, 63, 107, 23, 226, 76, 223, 235, 72, 51, 156, 70, 129, 153, 3, 5, 167, 29, 135, 212, 135, 222, 64, 221, 202, 90, 10, 220, 200, 204, 146, 193, 237, 153, 116, 161, 132, 140, 111, 82, 84, 2, 146, 198, 232, 49, 11, 122, 190, 182, 231, 163, 242, 118, 170, 107, 109, 198, 11, 181, 203, 176, 252, 201, 103, 241, 159, 155, 31, 65, 138, 35, 5, 245, 109, 245, 124, 255, 9, 195, 188, 93, 221, 242, 24, 147, 244, 217, 68, 31, 215, 244, 44, 60, 254, 232, 109, 56, 169, 240, 56, 216, 252, 197, 194, 21, 98, 121, 197, 183, 200, 143, 207, 99, 10, 57, 39, 191, 154, 113, 253, 193, 39, 2, 247, 47, 198, 115, 23, 61, 143, 172, 130, 81, 168, 220, 84, 65, 110, 136, 37, 136, 171, 195, 15, 68, 126, 98, 106, 97, 47, 202, 42, 91, 241, 238, 242, 69, 152, 62, 253, 183, 148, 195, 49, 122, 97, 126, 142, 214, 34, 143, 199, 134, 228, 232, 100, 52, 182, 85, 97, 143, 188, 153, 56, 36, 239, 231, 72, 48, 165, 80, 134, 83, 141, 45, 109, 171, 245, 86, 199, 4, 224, 233, 98, 108, 131, 152, 68, 84, 86, 174, 194, 39, 27, 31, 195, 252, 177, 217, 100, 139, 115, 48, 201, 153, 161, 229, 117, 118, 173, 163, 225, 111, 178, 137, 209, 174, 245, 45, 224, 104, 251, 158, 100, 57, 45, 212, 41, 187, 113, 203, 183, 143, 104, 204, 88, 187, 95, 119, 239, 49, 106, 235, 28, 25, 106, 54, 195, 42, 8, 19, 250, 160, 137, 235, 96, 135, 46, 57, 210, 194, 86, 8, 39, 58, 72, 18, 102, 157, 206, 13, 154, 31, 176, 198, 255, 107, 229, 240, 152, 172, 143, 100, 8, 67, 46, 86, 24, 111, 64, 90, 162, 81, 51, 121, 150, 211, 93, 30, 90, 227, 116, 136, 222, 148, 247, 237, 202, 112, 241, 222, 72, 24, 15, 205, 18, 155, 178, 29, 237, 185, 225, 175, 100, 250, 196, 247, 32, 154, 230, 153, 161, 33, 169, 10, 20, 204, 117, 82, 0, 190, 117, 54, 115, 254, 25, 156, 58, 195, 47, 2, 62, 157, 228, 247, 174, 116, 50, 92, 140, 250, 165, 16, 80, 8, 108, 131, 128, 98, 128, 183, 129, 67, 125, 81, 8, 124, 135, 64, 100, 249, 145, 61, 145, 246, 55, 87, 41, 75, 12, 77, 97, 19, 184, 42, 147, 34, 231, 191, 187, 99, 8, 255, 162, 63, 28, 152, 127, 209, 233, 43, 100, 161, 27, 49, 118, 238, 89, 100, 134, 103, 208, 220, 203, 134, 50, 211, 22, 216, 62, 95, 199, 16, 26, 177, 72, 45, 206, 216, 102, 51, 104, 182, 89, 144, 230, 247, 226, 169, 255, 181, 226, 194, 35, 99, 81, 48, 154, 190, 93, 52, 48, 251, 89, 241, 222, 120, 105, 116, 54, 124, 27, 218, 16, 27, 109, 67, 179, 129, 91, 76, 181, 166, 134, 71, 49, 4, 43, 163, 25, 87, 50, 248, 76, 65, 81, 62, 150, 253, 9, 120, 102, 210, 43, 184, 250, 152, 61, 120, 156, 110, 119, 182, 60, 252, 254, 230, 63, 225, 182, 231, 78, 70, 186, 33, 15, 117, 214, 82, 170, 202, 6, 201, 129, 177, 198, 159, 44, 133, 231, 75, 144, 251, 179, 149, 235, 86, 160, 186, 178, 26, 14, 43, 125, 18, 183, 103, 70, 250, 232, 160, 152, 64, 123, 56, 63, 211, 70, 49, 27, 246, 232, 49, 220, 190, 138, 222, 99, 39, 20, 169, 151, 207, 223, 183, 107, 191, 69, 85, 101, 37, 35, 79, 211, 124, 90, 234, 237, 215, 28, 214, 25, 38, 43, 213, 43, 181, 13, 85, 216, 178, 138, 170, 38, 146, 215, 77, 129, 199, 112, 238, 112, 119, 210, 173, 161, 57, 29, 126, 11, 241, 151, 137, 204, 83, 92, 139, 112, 34, 12, 48, 70, 166, 66, 123, 65, 201, 123, 36, 201, 11, 71, 69, 30, 112, 220, 38, 28, 154, 240, 14, 49, 183, 83, 140, 230, 193, 202, 154, 175, 232, 236, 75, 166, 102, 106, 18, 70, 183, 50, 142, 111, 58, 11, 161, 121, 123, 136, 209, 113, 19, 166, 49, 200, 214, 43, 27, 80, 113, 49, 141, 83, 15, 114, 104, 126, 136, 23, 196, 31, 130, 123, 230, 230, 112, 240, 107, 169, 53, 19, 237, 59, 73, 170, 223, 102, 12, 132, 249, 101, 25, 225, 83, 149, 161, 118, 172, 114, 133, 48, 154, 17, 235, 99, 168, 5, 22, 131, 117, 143, 185, 5, 209, 198, 18, 106, 228, 147, 17, 19, 69, 223, 84, 74, 24, 125, 1, 47, 211, 59, 217, 208, 230, 111, 194, 170, 47, 87, 96, 89, 67, 37, 62, 89, 248, 49, 94, 252, 252, 13, 106, 53, 107, 48, 42, 42, 29, 53, 38, 58, 61, 211, 234, 86, 216, 165, 109, 235, 148, 202, 132, 157, 208, 216, 40, 114, 71, 65, 236, 155, 157, 7, 155, 241, 55, 48, 208, 12, 154, 112, 224, 253, 53, 111, 227, 188, 139, 126, 141, 159, 159, 243, 43, 220, 120, 250, 229, 176, 248, 188, 24, 111, 205, 196, 45, 39, 95, 5, 219, 87, 27, 240, 196, 163, 203, 144, 148, 159, 140, 38, 10, 27, 53, 225, 129, 224, 247, 3, 80, 136, 60, 157, 93, 210, 229, 149, 82, 0, 176, 100, 10, 168, 2, 166, 217, 182, 1, 181, 51, 105, 134, 116, 0, 151, 132, 255, 185, 225, 42, 180, 209, 98, 55, 136, 156, 156, 81, 200, 117, 166, 107, 67, 240, 126, 227, 106, 188, 254, 213, 98, 141, 65, 20, 165, 191, 159, 49, 38, 66, 241, 28, 33, 78, 245, 154, 87, 234, 208, 53, 155, 107, 22, 21, 170, 53, 204, 38, 128, 99, 247, 66, 194, 159, 151, 161, 46, 201, 129, 206, 117, 20, 6, 157, 71, 228, 114, 116, 14, 54, 137, 86, 47, 207, 191, 240, 158, 214, 115, 95, 216, 223, 62, 34, 167, 21, 67, 165, 173, 99, 46, 181, 106, 193, 44, 120, 169, 204, 129, 93, 160, 173, 114, 228, 94, 202, 97, 16, 112, 46, 98, 156, 59, 228, 84, 181, 116, 106, 252, 26, 244, 50, 170, 184, 38, 136, 230, 251, 67, 26, 184, 43, 195, 197, 71, 68, 40, 194, 8, 235, 223, 244, 79, 105, 210, 214, 246, 117, 63, 49, 4, 127, 71, 154, 44, 51, 55, 242, 22, 148, 241, 103, 54, 44, 62, 163, 236, 169, 68, 251, 214, 40, 114, 101, 248, 171, 250, 165, 16, 80, 8, 12, 9, 2, 138, 1, 30, 18, 24, 85, 33, 187, 29, 2, 92, 115, 2, 218, 202, 30, 160, 143, 24, 125, 115, 40, 31, 151, 255, 178, 26, 26, 162, 195, 43, 166, 172, 186, 114, 108, 168, 137, 117, 136, 134, 35, 33, 46, 21, 173, 85, 173, 200, 162, 223, 227, 126, 179, 36, 253, 3, 205, 26, 73, 119, 191, 251, 8, 94, 124, 124, 129, 246, 119, 203, 122, 54, 174, 39, 226, 190, 241, 173, 99, 30, 195, 196, 209, 169, 136, 243, 141, 194, 172, 130, 34, 156, 61, 255, 96, 220, 250, 206, 227, 180, 170, 78, 132, 197, 202, 8, 214, 222, 159, 252, 238, 191, 167, 158, 15, 234, 88, 72, 34, 141, 248, 141, 168, 96, 94, 229, 252, 236, 76, 252, 241, 132, 7, 48, 189, 174, 30, 135, 165, 220, 78, 243, 77, 39, 174, 206, 58, 26, 142, 199, 174, 193, 245, 167, 220, 138, 140, 49, 185, 8, 53, 211, 248, 60, 178, 63, 25, 84, 141, 63, 189, 155, 182, 50, 30, 52, 183, 127, 255, 227, 119, 113, 197, 69, 87, 98, 242, 164, 73, 112, 185, 251, 111, 77, 96, 115, 56, 176, 226, 155, 111, 112, 197, 95, 110, 197, 53, 23, 228, 209, 4, 83, 182, 126, 125, 111, 240, 186, 215, 251, 225, 39, 239, 13, 170, 94, 209, 38, 153, 173, 12, 42, 67, 211, 205, 198, 114, 137, 244, 106, 69, 11, 53, 140, 59, 169, 250, 71, 59, 72, 17, 13, 168, 37, 38, 86, 148, 155, 26, 117, 249, 3, 168, 105, 98, 159, 196, 97, 35, 44, 28, 16, 163, 222, 180, 228, 28, 148, 55, 150, 226, 252, 203, 111, 64, 156, 157, 12, 44, 169, 178, 174, 2, 191, 188, 246, 114, 237, 239, 229, 95, 45, 215, 126, 111, 251, 177, 81, 251, 122, 206, 171, 167, 97, 143, 105, 69, 152, 22, 55, 131, 165, 154, 240, 151, 223, 157, 142, 147, 238, 101, 190, 84, 218, 19, 119, 145, 13, 211, 153, 221, 110, 227, 167, 253, 25, 97, 142, 77, 248, 170, 238, 27, 92, 247, 240, 195, 216, 115, 179, 145, 239, 47, 27, 149, 171, 65, 248, 130, 91, 24, 124, 120, 51, 162, 114, 178, 80, 156, 61, 31, 115, 102, 31, 74, 235, 150, 201, 12, 74, 70, 69, 159, 45, 134, 1, 149, 74, 241, 155, 43, 206, 6, 109, 115, 105, 200, 77, 223, 207, 148, 116, 84, 120, 132, 249, 21, 205, 117, 63, 136, 207, 165, 211, 96, 129, 223, 103, 130, 137, 211, 235, 185, 37, 47, 224, 234, 171, 175, 192, 150, 5, 101, 184, 189, 234, 10, 20, 103, 197, 226, 156, 3, 207, 99, 174, 221, 0, 10, 19, 167, 224, 208, 107, 110, 198, 19, 45, 135, 35, 245, 37, 35, 26, 51, 98, 105, 114, 219, 22, 177, 28, 239, 71, 101, 195, 112, 73, 12, 59, 192, 215, 122, 69, 213, 139, 212, 235, 206, 163, 54, 126, 26, 142, 118, 142, 197, 162, 9, 147, 241, 237, 255, 214, 49, 7, 124, 58, 53, 181, 38, 196, 207, 217, 0, 83, 156, 188, 255, 179, 96, 90, 93, 135, 142, 207, 215, 210, 144, 152, 145, 214, 25, 5, 92, 204, 250, 253, 194, 77, 81, 76, 90, 95, 182, 8, 149, 45, 239, 33, 57, 238, 116, 76, 74, 24, 135, 75, 246, 56, 13, 247, 98, 25, 70, 199, 22, 16, 226, 21, 56, 253, 208, 139, 145, 21, 63, 78, 235, 200, 179, 198, 181, 136, 122, 171, 145, 35, 75, 207, 252, 182, 48, 187, 25, 126, 207, 137, 213, 185, 182, 242, 113, 140, 69, 192, 98, 176, 135, 199, 93, 126, 237, 194, 58, 40, 38, 240, 90, 21, 180, 174, 49, 36, 68, 214, 36, 30, 17, 198, 150, 211, 217, 152, 202, 65, 220, 212, 138, 14, 95, 18, 215, 100, 121, 95, 144, 97, 140, 182, 195, 146, 44, 150, 28, 156, 19, 6, 177, 89, 230, 159, 225, 230, 200, 249, 126, 19, 5, 114, 122, 229, 82, 55, 239, 146, 234, 217, 151, 32, 255, 104, 104, 244, 82, 120, 44, 86, 202, 131, 41, 184, 239, 22, 72, 115, 77, 18, 220, 139, 66, 185, 20, 166, 145, 211, 123, 197, 131, 172, 202, 192, 64, 19, 98, 5, 32, 184, 40, 82, 8, 40, 4, 134, 15, 1, 197, 0, 15, 31, 182, 170, 228, 159, 50, 2, 20, 117, 71, 44, 225, 42, 155, 200, 0, 187, 185, 50, 209, 4, 204, 66, 230, 215, 54, 74, 95, 152, 12, 62, 94, 20, 225, 133, 7, 209, 87, 81, 90, 216, 169, 201, 18, 146, 192, 64, 240, 234, 11, 173, 240, 98, 140, 89, 195, 173, 159, 29, 21, 161, 50, 204, 155, 244, 115, 140, 73, 44, 218, 186, 199, 248, 221, 248, 115, 113, 206, 138, 147, 160, 155, 166, 245, 80, 177, 52, 143, 107, 107, 40, 141, 129, 52, 232, 9, 70, 89, 57, 61, 196, 114, 49, 126, 194, 190, 12, 132, 242, 56, 220, 91, 168, 20, 97, 100, 79, 221, 243, 168, 135, 251, 71, 226, 33, 129, 158, 78, 144, 62, 230, 104, 110, 140, 169, 226, 151, 92, 156, 247, 135, 123, 177, 234, 31, 183, 33, 158, 187, 147, 24, 218, 226, 205, 60, 252, 84, 224, 194, 103, 16, 253, 96, 39, 90, 51, 169, 145, 9, 112, 83, 62, 2, 247, 40, 210, 101, 95, 52, 181, 167, 164, 246, 170, 14, 52, 4, 169, 53, 99, 84, 211, 157, 145, 104, 108, 83, 83, 82, 245, 203, 152, 111, 198, 40, 190, 123, 3, 160, 193, 214, 171, 85, 193, 155, 67, 242, 64, 243, 121, 237, 162, 19, 104, 72, 184, 173, 157, 55, 121, 0, 173, 251, 126, 47, 53, 135, 219, 158, 215, 229, 11, 103, 128, 149, 169, 104, 128, 155, 76, 131, 83, 38, 165, 152, 79, 202, 53, 156, 166, 113, 109, 14, 212, 242, 207, 211, 210, 79, 67, 116, 56, 165, 75, 10, 53, 170, 95, 223, 179, 156, 65, 133, 248, 162, 233, 9, 7, 222, 110, 96, 202, 41, 191, 205, 133, 108, 103, 246, 214, 206, 29, 91, 120, 50, 114, 142, 252, 13, 202, 222, 96, 32, 42, 6, 39, 14, 117, 108, 61, 213, 237, 143, 112, 129, 44, 218, 92, 221, 132, 234, 103, 159, 192, 183, 171, 186, 157, 214, 254, 164, 38, 82, 184, 60, 44, 64, 241, 62, 139, 112, 237, 223, 39, 227, 196, 105, 199, 192, 17, 216, 11, 199, 207, 62, 3, 207, 189, 149, 138, 139, 111, 249, 45, 130, 79, 108, 96, 202, 29, 14, 90, 103, 63, 153, 95, 41, 155, 140, 131, 159, 12, 140, 153, 66, 190, 231, 62, 127, 1, 103, 253, 234, 28, 120, 150, 119, 32, 171, 48, 3, 237, 235, 13, 184, 229, 145, 243, 49, 122, 154, 11, 115, 98, 127, 171, 189, 39, 15, 41, 56, 4, 23, 158, 123, 3, 30, 124, 243, 70, 100, 120, 115, 80, 157, 192, 118, 137, 28, 129, 24, 244, 136, 141, 212, 49, 140, 228, 9, 137, 64, 41, 21, 11, 215, 45, 195, 23, 141, 31, 227, 232, 164, 105, 152, 96, 205, 197, 1, 41, 83, 240, 49, 150, 211, 36, 157, 192, 178, 127, 71, 21, 221, 140, 28, 219, 56, 50, 177, 109, 120, 188, 233, 27, 148, 55, 48, 35, 64, 172, 1, 174, 176, 75, 140, 139, 38, 204, 41, 24, 133, 79, 27, 42, 240, 106, 37, 93, 56, 114, 143, 215, 172, 129, 14, 200, 201, 192, 189, 124, 12, 227, 59, 232, 74, 64, 154, 109, 63, 136, 66, 209, 120, 237, 239, 187, 190, 120, 9, 157, 213, 92, 151, 24, 18, 155, 86, 198, 26, 5, 52, 83, 119, 35, 202, 57, 137, 90, 232, 35, 155, 67, 190, 211, 101, 139, 134, 43, 131, 19, 128, 36, 124, 234, 214, 197, 73, 59, 50, 192, 15, 14, 111, 27, 215, 58, 103, 134, 27, 241, 25, 157, 218, 205, 124, 19, 163, 179, 177, 66, 43, 215, 27, 14, 232, 181, 174, 162, 25, 109, 211, 186, 184, 46, 114, 61, 102, 221, 157, 217, 81, 218, 220, 215, 98, 113, 12, 118, 172, 12, 178, 208, 235, 139, 184, 57, 143, 98, 49, 241, 103, 38, 25, 61, 173, 72, 172, 88, 46, 203, 40, 153, 125, 206, 189, 158, 158, 17, 237, 202, 193, 125, 72, 115, 131, 18, 0, 193, 106, 65, 138, 77, 2, 44, 234, 20, 160, 80, 102, 101, 109, 53, 199, 45, 149, 46, 244, 34, 192, 80, 164, 16, 80, 8, 12, 23, 2, 138, 1, 30, 46, 100, 85, 185, 63, 109, 4, 184, 54, 133, 180, 0, 50, 110, 108, 222, 20, 11, 87, 19, 151, 168, 44, 174, 149, 6, 110, 220, 178, 39, 242, 231, 53, 58, 203, 177, 139, 166, 176, 20, 122, 128, 189, 53, 240, 201, 11, 249, 29, 112, 135, 181, 103, 113, 188, 159, 58, 69, 109, 211, 37, 12, 176, 131, 251, 17, 159, 48, 221, 148, 74, 31, 122, 90, 45, 82, 19, 61, 100, 50, 120, 158, 76, 90, 62, 205, 251, 240, 221, 158, 84, 238, 234, 147, 124, 140, 124, 42, 218, 77, 251, 193, 115, 16, 127, 194, 190, 240, 221, 189, 24, 70, 230, 129, 212, 152, 247, 129, 241, 32, 125, 214, 243, 147, 63, 73, 233, 191, 129, 224, 183, 149, 27, 144, 146, 219, 140, 170, 127, 70, 227, 134, 249, 167, 226, 238, 99, 159, 103, 48, 49, 27, 246, 143, 29, 139, 135, 206, 188, 14, 23, 188, 118, 14, 198, 87, 21, 163, 174, 144, 61, 30, 226, 141, 209, 79, 1, 67, 233, 178, 41, 156, 143, 87, 124, 38, 253, 204, 203, 99, 8, 112, 83, 46, 187, 186, 94, 72, 34, 71, 251, 45, 1, 24, 195, 102, 125, 86, 70, 62, 31, 168, 130, 99, 48, 245, 110, 223, 28, 97, 130, 125, 93, 194, 188, 255, 116, 7, 206, 70, 224, 186, 92, 228, 60, 45, 76, 126, 147, 148, 24, 238, 34, 117, 189, 161, 6, 88, 61, 37, 212, 2, 166, 146, 9, 214, 55, 207, 233, 100, 116, 154, 55, 132, 48, 229, 30, 160, 48, 179, 93, 187, 86, 122, 30, 29, 21, 141, 201, 123, 78, 10, 223, 187, 243, 95, 114, 143, 12, 175, 143, 101, 155, 207, 187, 24, 49, 111, 220, 7, 79, 124, 34, 253, 48, 229, 37, 184, 61, 125, 55, 17, 76, 28, 247, 88, 71, 22, 99, 37, 177, 85, 169, 204, 202, 203, 160, 93, 98, 174, 28, 100, 46, 54, 179, 197, 7, 91, 32, 5, 235, 63, 91, 129, 51, 207, 126, 3, 209, 79, 76, 195, 113, 83, 246, 210, 4, 21, 39, 21, 31, 14, 195, 77, 38, 156, 85, 247, 75, 184, 222, 169, 128, 51, 62, 10, 46, 166, 220, 233, 207, 176, 249, 41, 20, 48, 219, 237, 120, 126, 201, 139, 56, 229, 252, 179, 16, 90, 225, 66, 28, 163, 223, 87, 86, 85, 35, 61, 99, 20, 54, 61, 3, 252, 59, 111, 25, 38, 95, 223, 129, 24, 107, 52, 146, 41, 109, 188, 229, 192, 75, 16, 250, 191, 10, 60, 244, 167, 71, 145, 149, 153, 137, 74, 47, 133, 96, 98, 122, 251, 3, 80, 136, 154, 235, 24, 178, 132, 245, 31, 69, 161, 106, 113, 46, 112, 164, 68, 248, 182, 160, 116, 188, 62, 214, 190, 18, 50, 200, 251, 143, 69, 126, 180, 190, 8, 180, 55, 49, 26, 242, 215, 75, 181, 128, 84, 214, 68, 166, 40, 35, 198, 50, 2, 94, 94, 102, 78, 166, 42, 248, 107, 154, 62, 191, 99, 70, 104, 42, 159, 81, 90, 66, 7, 70, 83, 213, 122, 108, 42, 140, 15, 113, 236, 138, 128, 20, 154, 74, 155, 133, 17, 36, 23, 155, 247, 222, 39, 98, 21, 79, 230, 140, 23, 74, 96, 42, 146, 207, 111, 226, 50, 212, 133, 5, 155, 128, 134, 6, 74, 3, 71, 113, 125, 162, 127, 108, 236, 228, 52, 96, 42, 151, 145, 175, 248, 226, 140, 251, 238, 122, 237, 166, 1, 124, 88, 248, 14, 9, 80, 100, 145, 151, 207, 248, 87, 25, 92, 248, 56, 217, 204, 126, 166, 33, 90, 91, 207, 244, 127, 156, 46, 249, 250, 54, 181, 114, 179, 19, 30, 183, 222, 7, 27, 3, 179, 69, 209, 82, 167, 18, 140, 230, 206, 181, 109, 176, 100, 145, 252, 238, 98, 238, 78, 174, 122, 124, 65, 0, 201, 22, 93, 208, 98, 118, 251, 144, 81, 81, 202, 234, 163, 224, 28, 6, 115, 120, 201, 141, 221, 212, 209, 206, 0, 155, 81, 136, 223, 106, 123, 205, 160, 128, 116, 1, 160, 82, 158, 233, 158, 56, 94, 140, 180, 173, 72, 33, 160, 16, 24, 62, 4, 6, 255, 230, 24, 190, 54, 169, 146, 21, 2, 63, 60, 2, 92, 19, 67, 222, 32, 82, 140, 113, 168, 125, 181, 13, 93, 229, 92, 228, 73, 197, 193, 4, 92, 22, 51, 5, 19, 147, 98, 81, 199, 84, 26, 113, 52, 181, 27, 40, 25, 168, 117, 49, 113, 95, 98, 222, 119, 20, 78, 63, 243, 12, 204, 59, 225, 16, 180, 230, 112, 35, 34, 5, 197, 56, 197, 251, 7, 78, 99, 10, 186, 154, 221, 200, 152, 12, 28, 28, 255, 123, 110, 104, 179, 168, 21, 246, 195, 195, 205, 111, 135, 199, 13, 15, 131, 223, 120, 124, 252, 145, 223, 61, 252, 120, 229, 28, 127, 252, 158, 14, 88, 185, 225, 236, 98, 169, 199, 163, 24, 191, 156, 116, 176, 182, 175, 51, 183, 25, 180, 168, 172, 3, 109, 251, 238, 126, 189, 166, 205, 32, 254, 13, 52, 131, 140, 161, 137, 223, 223, 207, 120, 3, 111, 55, 158, 79, 172, 168, 29, 224, 70, 249, 244, 105, 39, 227, 202, 27, 47, 101, 170, 25, 238, 204, 68, 246, 49, 66, 73, 199, 137, 114, 21, 58, 6, 118, 114, 167, 221, 209, 217, 129, 142, 142, 222, 127, 218, 59, 219, 57, 79, 221, 220, 224, 113, 226, 147, 228, 126, 254, 31, 48, 13, 180, 222, 237, 219, 212, 217, 73, 239, 201, 254, 132, 158, 30, 112, 203, 190, 191, 27, 186, 40, 187, 10, 184, 232, 219, 74, 45, 166, 165, 152, 76, 2, 73, 24, 204, 107, 58, 150, 131, 86, 176, 12, 22, 100, 70, 131, 95, 103, 128, 19, 140, 99, 121, 110, 61, 126, 191, 231, 191, 144, 206, 160, 110, 66, 194, 28, 53, 5, 253, 208, 222, 17, 61, 188, 59, 186, 191, 79, 188, 62, 31, 58, 152, 31, 152, 53, 138, 93, 40, 223, 67, 192, 187, 211, 127, 195, 4, 58, 228, 131, 188, 212, 32, 234, 6, 44, 122, 161, 60, 214, 19, 137, 239, 166, 56, 145, 184, 232, 7, 220, 214, 222, 134, 182, 182, 102, 184, 219, 218, 224, 102, 58, 182, 154, 182, 38, 164, 100, 116, 32, 110, 37, 112, 252, 37, 215, 96, 9, 181, 158, 6, 10, 71, 252, 52, 231, 62, 49, 247, 80, 60, 118, 195, 95, 96, 205, 35, 47, 218, 210, 9, 171, 131, 204, 87, 175, 36, 117, 232, 166, 215, 102, 250, 165, 127, 180, 225, 3, 92, 117, 211, 239, 52, 230, 55, 38, 33, 30, 173, 45, 108, 49, 25, 194, 70, 230, 18, 206, 162, 70, 251, 177, 219, 158, 192, 223, 222, 191, 157, 65, 194, 152, 74, 139, 249, 160, 19, 109, 201, 184, 246, 119, 23, 225, 103, 231, 236, 69, 70, 185, 10, 153, 177, 97, 75, 133, 94, 235, 27, 190, 19, 126, 250, 183, 90, 226, 184, 174, 176, 207, 27, 171, 74, 180, 231, 196, 98, 115, 32, 125, 202, 158, 192, 56, 25, 107, 230, 119, 63, 126, 45, 162, 243, 116, 14, 221, 86, 223, 2, 251, 66, 25, 35, 34, 32, 210, 83, 242, 173, 218, 179, 197, 41, 224, 151, 228, 198, 164, 234, 214, 118, 84, 155, 41, 98, 229, 215, 163, 211, 115, 113, 115, 241, 126, 248, 130, 177, 134, 113, 12, 109, 93, 38, 56, 88, 162, 137, 102, 207, 181, 168, 93, 218, 172, 93, 143, 136, 137, 1, 191, 5, 136, 155, 147, 81, 196, 241, 4, 25, 241, 77, 186, 112, 35, 147, 198, 233, 191, 141, 58, 24, 51, 45, 249, 188, 203, 205, 136, 197, 131, 127, 25, 90, 232, 98, 34, 41, 153, 38, 165, 95, 202, 238, 157, 163, 155, 239, 123, 104, 205, 176, 76, 36, 190, 148, 243, 152, 244, 53, 182, 254, 3, 54, 191, 129, 204, 48, 155, 114, 40, 3, 122, 93, 148, 70, 60, 72, 102, 70, 225, 50, 139, 125, 246, 96, 136, 140, 190, 69, 76, 156, 227, 210, 177, 127, 194, 141, 92, 101, 103, 104, 165, 4, 27, 2, 88, 245, 70, 9, 93, 52, 98, 16, 148, 32, 92, 131, 122, 91, 245, 222, 32, 9, 34, 102, 165, 48, 201, 49, 197, 11, 115, 190, 222, 207, 74, 174, 204, 127, 244, 81, 90, 193, 103, 202, 76, 65, 93, 139, 230, 98, 208, 123, 25, 234, 140, 66, 64, 33, 176, 107, 8, 40, 13, 240, 174, 225, 167, 238, 222, 141, 17, 240, 113, 227, 102, 79, 160, 196, 185, 145, 193, 119, 92, 85, 140, 71, 226, 71, 148, 209, 140, 64, 106, 60, 131, 114, 136, 63, 46, 211, 75, 200, 118, 82, 246, 4, 253, 222, 205, 27, 16, 157, 28, 64, 123, 77, 26, 46, 190, 189, 4, 247, 206, 94, 67, 205, 111, 39, 78, 92, 245, 31, 124, 254, 143, 39, 144, 240, 208, 231, 104, 201, 78, 98, 240, 150, 32, 173, 240, 26, 113, 210, 47, 175, 64, 92, 81, 182, 102, 170, 7, 75, 19, 110, 126, 239, 21, 108, 250, 120, 3, 246, 116, 38, 163, 123, 114, 76, 0, 0, 60, 204, 73, 68, 65, 84, 208, 68, 138, 129, 78, 34, 28, 65, 183, 113, 144, 99, 22, 166, 124, 241, 6, 58, 224, 140, 89, 140, 19, 78, 185, 19, 121, 105, 211, 180, 54, 238, 119, 208, 126, 120, 109, 255, 92, 148, 124, 188, 133, 26, 24, 230, 90, 100, 64, 34, 69, 59, 34, 32, 238, 115, 129, 104, 14, 42, 21, 109, 183, 159, 223, 140, 253, 158, 175, 167, 145, 96, 10, 204, 102, 39, 38, 159, 114, 50, 240, 229, 187, 192, 63, 87, 107, 155, 245, 29, 239, 30, 97, 71, 180, 61, 113, 223, 15, 129, 228, 250, 13, 202, 230, 124, 171, 218, 183, 223, 15, 76, 239, 96, 246, 163, 222, 222, 111, 254, 233, 158, 177, 27, 28, 156, 150, 77, 56, 96, 86, 14, 230, 77, 32, 83, 203, 253, 185, 153, 230, 146, 206, 101, 228, 34, 201, 211, 104, 193, 172, 26, 92, 112, 50, 224, 145, 107, 61, 25, 154, 83, 210, 144, 55, 105, 60, 249, 6, 125, 185, 95, 182, 241, 93, 76, 125, 227, 109, 220, 218, 153, 202, 224, 83, 126, 237, 245, 213, 19, 26, 65, 190, 95, 98, 99, 146, 177, 178, 238, 78, 156, 122, 202, 117, 56, 112, 242, 153, 44, 195, 138, 132, 228, 120, 156, 253, 236, 81, 120, 252, 231, 111, 32, 51, 63, 5, 85, 155, 133, 9, 215, 6, 163, 167, 98, 194, 199, 68, 172, 199, 188, 230, 97, 109, 154, 136, 65, 52, 81, 8, 5, 40, 245, 117, 13, 72, 207, 73, 65, 235, 226, 6, 92, 250, 198, 84, 252, 43, 239, 11, 20, 219, 166, 107, 109, 59, 121, 230, 137, 120, 239, 250, 203, 240, 216, 57, 127, 129, 217, 109, 160, 6, 154, 245, 200, 60, 234, 101, 250, 104, 135, 201, 11, 249, 218, 221, 8, 86, 11, 99, 193, 32, 109, 180, 80, 16, 254, 93, 168, 139, 124, 98, 91, 122, 57, 162, 92, 185, 184, 254, 153, 155, 49, 109, 90, 30, 14, 203, 56, 151, 130, 66, 31, 146, 19, 247, 194, 94, 191, 61, 23, 111, 125, 187, 12, 222, 47, 201, 19, 37, 199, 161, 181, 65, 179, 203, 209, 111, 254, 222, 62, 105, 122, 110, 21, 116, 18, 241, 101, 197, 53, 84, 8, 230, 97, 79, 156, 130, 139, 28, 227, 177, 132, 120, 255, 111, 77, 57, 14, 31, 123, 42, 70, 217, 51, 180, 22, 149, 55, 174, 101, 112, 55, 166, 113, 226, 245, 93, 210, 215, 110, 228, 10, 212, 113, 196, 114, 240, 90, 245, 19, 56, 190, 98, 20, 10, 114, 110, 161, 185, 109, 1, 28, 142, 153, 188, 234, 37, 50, 145, 183, 35, 195, 58, 87, 187, 227, 162, 202, 197, 88, 88, 189, 65, 51, 134, 110, 221, 170, 149, 36, 150, 76, 213, 19, 140, 35, 178, 156, 74, 139, 26, 54, 98, 31, 97, 120, 25, 21, 60, 148, 202, 0, 92, 140, 158, 141, 207, 55, 51, 80, 23, 181, 211, 50, 5, 122, 25, 23, 173, 130, 30, 62, 228, 22, 63, 223, 177, 66, 99, 38, 4, 116, 121, 10, 199, 175, 174, 107, 53, 86, 118, 45, 161, 137, 115, 52, 90, 25, 52, 45, 201, 22, 143, 207, 203, 54, 96, 89, 7, 115, 33, 35, 147, 125, 178, 35, 186, 184, 88, 211, 70, 119, 85, 112, 110, 57, 89, 146, 54, 161, 244, 178, 250, 251, 105, 114, 120, 225, 163, 48, 56, 127, 47, 35, 50, 11, 245, 73, 18, 100, 255, 182, 116, 124, 206, 196, 192, 236, 82, 134, 9, 62, 62, 75, 67, 77, 118, 198, 62, 104, 105, 175, 195, 172, 25, 19, 48, 121, 76, 150, 254, 12, 123, 219, 96, 253, 244, 67, 77, 80, 3, 9, 96, 214, 44, 237, 25, 4, 168, 67, 221, 88, 85, 158, 66, 96, 55, 69, 64, 49, 192, 187, 233, 192, 170, 110, 237, 42, 2, 140, 86, 234, 102, 228, 82, 39, 213, 45, 164, 231, 223, 191, 11, 243, 166, 76, 196, 184, 132, 61, 144, 87, 52, 26, 211, 142, 152, 134, 149, 239, 60, 79, 6, 40, 145, 230, 196, 220, 220, 247, 195, 7, 82, 203, 131, 201, 220, 149, 113, 182, 116, 202, 187, 107, 112, 234, 164, 135, 181, 178, 227, 130, 177, 184, 169, 96, 62, 246, 153, 246, 1, 138, 30, 98, 189, 204, 79, 106, 93, 75, 115, 191, 108, 224, 231, 204, 67, 155, 71, 73, 177, 56, 9, 125, 176, 124, 57, 158, 186, 226, 10, 148, 173, 232, 192, 179, 218, 157, 125, 127, 196, 115, 43, 211, 194, 127, 190, 177, 79, 226, 138, 249, 163, 97, 245, 199, 225, 168, 204, 185, 120, 101, 214, 52, 141, 1, 182, 120, 184, 209, 82, 235, 107, 143, 32, 10, 44, 46, 142, 127, 34, 67, 167, 46, 122, 249, 77, 92, 253, 202, 137, 248, 199, 9, 52, 133, 246, 165, 224, 164, 232, 189, 16, 60, 245, 90, 156, 254, 207, 95, 80, 83, 181, 237, 134, 179, 199, 194, 212, 193, 129, 238, 139, 21, 98, 61, 32, 32, 62, 255, 146, 55, 220, 230, 113, 82, 87, 68, 31, 214, 194, 211, 200, 218, 204, 214, 4, 11, 70, 177, 244, 248, 130, 182, 147, 100, 12, 40, 163, 211, 152, 129, 44, 91, 42, 74, 176, 6, 55, 29, 250, 40, 246, 136, 219, 75, 103, 78, 56, 177, 143, 185, 227, 60, 10, 111, 202, 113, 77, 15, 117, 244, 116, 40, 14, 249, 120, 220, 123, 62, 154, 239, 248, 25, 253, 225, 51, 145, 100, 78, 197, 37, 211, 46, 198, 227, 120, 29, 49, 166, 56, 222, 162, 107, 161, 123, 186, 119, 219, 99, 242, 84, 109, 71, 114, 136, 230, 243, 77, 29, 245, 200, 201, 46, 194, 103, 87, 214, 226, 95, 197, 247, 226, 234, 163, 254, 138, 104, 137, 74, 68, 134, 249, 23, 103, 95, 140, 165, 95, 44, 196, 138, 7, 191, 128, 137, 202, 194, 128, 164, 33, 235, 131, 9, 150, 26, 164, 88, 121, 223, 106, 156, 197, 118, 14, 170, 237, 53, 204, 237, 62, 202, 133, 206, 103, 128, 71, 115, 191, 193, 184, 155, 106, 145, 71, 13, 48, 185, 71, 92, 55, 225, 76, 4, 126, 181, 9, 183, 158, 123, 55, 210, 253, 9, 232, 136, 181, 50, 101, 220, 247, 253, 140, 7, 232, 254, 34, 238, 219, 77, 216, 244, 97, 49, 106, 79, 204, 5, 57, 96, 152, 44, 41, 200, 206, 36, 211, 71, 188, 199, 69, 93, 164, 197, 117, 216, 220, 94, 139, 251, 150, 47, 192, 106, 6, 67, 76, 139, 79, 65, 45, 185, 73, 233, 123, 132, 15, 165, 193, 3, 70, 81, 224, 90, 241, 2, 80, 122, 116, 20, 12, 191, 144, 147, 70, 56, 11, 69, 235, 10, 228, 101, 88, 16, 99, 19, 13, 39, 48, 241, 157, 37, 32, 135, 73, 129, 44, 85, 144, 126, 54, 32, 76, 65, 6, 107, 114, 49, 106, 118, 60, 223, 133, 127, 121, 245, 34, 28, 55, 115, 47, 76, 205, 220, 27, 89, 25, 89, 152, 126, 226, 28, 124, 246, 244, 167, 176, 120, 77, 204, 71, 76, 211, 246, 118, 157, 137, 140, 220, 219, 235, 111, 109, 8, 25, 236, 49, 42, 4, 19, 219, 136, 41, 192, 17, 135, 207, 215, 26, 78, 59, 17, 188, 246, 245, 151, 248, 223, 187, 75, 49, 38, 185, 24, 235, 154, 215, 35, 55, 46, 31, 141, 43, 55, 224, 195, 143, 30, 194, 1, 249, 121, 72, 182, 101, 98, 191, 185, 115, 49, 107, 254, 12, 44, 122, 228, 11, 56, 45, 52, 145, 167, 32, 121, 155, 206, 247, 90, 57, 47, 99, 253, 34, 59, 118, 88, 99, 201, 215, 183, 224, 248, 19, 247, 197, 140, 66, 170, 215, 9, 69, 149, 183, 25, 15, 44, 120, 89, 187, 219, 200, 136, 232, 76, 57, 76, 18, 84, 119, 157, 180, 160, 113, 212, 174, 27, 218, 69, 99, 222, 142, 153, 211, 79, 35, 59, 63, 131, 67, 18, 164, 59, 65, 59, 218, 254, 183, 137, 199, 169, 117, 22, 137, 141, 135, 127, 118, 31, 204, 93, 175, 94, 149, 160, 16, 80, 8, 116, 67, 64, 86, 8, 69, 10, 1, 133, 192, 246, 8, 200, 6, 139, 220, 161, 159, 105, 60, 98, 204, 49, 88, 247, 86, 29, 170, 203, 87, 82, 200, 220, 193, 240, 72, 185, 56, 118, 234, 145, 24, 205, 61, 147, 191, 201, 4, 27, 25, 214, 157, 145, 137, 126, 78, 65, 50, 191, 233, 197, 113, 168, 219, 82, 131, 153, 15, 1, 147, 108, 178, 27, 161, 132, 217, 200, 72, 211, 171, 168, 189, 57, 239, 101, 74, 156, 71, 195, 220, 217, 72, 223, 166, 22, 236, 123, 74, 12, 10, 198, 240, 18, 46, 202, 45, 92, 13, 151, 108, 222, 128, 178, 250, 0, 50, 179, 115, 145, 49, 42, 19, 105, 105, 169, 72, 167, 147, 159, 252, 164, 133, 127, 235, 223, 211, 144, 146, 156, 132, 204, 73, 148, 206, 147, 202, 86, 102, 162, 197, 75, 147, 103, 250, 96, 66, 204, 197, 206, 60, 140, 234, 13, 73, 109, 226, 238, 61, 144, 150, 118, 231, 200, 253, 208, 54, 144, 244, 87, 109, 141, 19, 13, 80, 62, 30, 188, 251, 99, 252, 119, 203, 235, 140, 42, 27, 96, 244, 78, 35, 230, 205, 60, 22, 133, 143, 95, 192, 173, 226, 247, 189, 57, 30, 185, 99, 50, 146, 123, 46, 251, 96, 97, 126, 19, 50, 104, 129, 66, 141, 156, 248, 94, 30, 113, 252, 9, 26, 195, 96, 228, 187, 106, 121, 195, 167, 76, 105, 251, 33, 25, 5, 70, 142, 119, 183, 50, 66, 46, 249, 185, 90, 94, 71, 190, 119, 92, 33, 3, 247, 73, 192, 49, 22, 242, 110, 231, 151, 136, 249, 138, 166, 203, 164, 244, 140, 180, 109, 222, 33, 145, 119, 73, 228, 29, 146, 150, 150, 66, 127, 216, 44, 36, 143, 231, 189, 127, 3, 214, 136, 221, 179, 16, 31, 14, 79, 86, 6, 114, 255, 92, 172, 165, 85, 67, 62, 77, 104, 251, 33, 0, 212, 111, 222, 238, 147, 101, 25, 248, 254, 243, 53, 209, 216, 162, 171, 14, 217, 9, 177, 248, 247, 141, 37, 88, 184, 249, 91, 114, 176, 12, 86, 198, 127, 7, 82, 99, 121, 239, 21, 55, 2, 147, 105, 138, 27, 203, 182, 203, 187, 89, 2, 99, 13, 154, 232, 226, 80, 83, 143, 220, 236, 108, 188, 244, 231, 127, 224, 193, 215, 126, 3, 183, 129, 113, 149, 37, 242, 32, 5, 8, 127, 60, 235, 42, 156, 254, 135, 35, 80, 211, 210, 140, 148, 96, 148, 38, 124, 28, 116, 85, 131, 188, 81, 20, 185, 150, 152, 104, 148, 211, 21, 99, 115, 131, 46, 96, 240, 49, 26, 95, 233, 180, 209, 28, 120, 250, 112, 231, 200, 123, 137, 115, 130, 121, 145, 173, 255, 171, 211, 181, 134, 226, 134, 219, 161, 13, 143, 118, 78, 27, 112, 242, 132, 126, 250, 235, 10, 213, 149, 248, 184, 142, 8, 118, 92, 117, 138, 211, 129, 163, 24, 8, 139, 99, 107, 161, 201, 185, 80, 249, 102, 222, 76, 162, 251, 180, 198, 28, 106, 95, 228, 131, 183, 116, 145, 1, 182, 167, 133, 224, 121, 50, 3, 171, 55, 126, 193, 213, 168, 9, 105, 93, 137, 56, 102, 238, 241, 140, 174, 86, 12, 83, 123, 61, 146, 163, 146, 52, 243, 228, 173, 247, 245, 246, 135, 52, 135, 88, 135, 156, 33, 100, 37, 100, 176, 201, 237, 184, 238, 230, 67, 49, 53, 142, 235, 18, 207, 85, 116, 181, 97, 233, 103, 159, 50, 251, 159, 147, 1, 201, 90, 97, 168, 101, 247, 156, 13, 100, 192, 29, 248, 102, 201, 70, 212, 54, 111, 224, 117, 126, 58, 244, 20, 227, 176, 115, 207, 149, 120, 133, 136, 109, 229, 56, 197, 50, 174, 0, 219, 170, 49, 141, 189, 213, 45, 199, 89, 135, 48, 191, 209, 76, 3, 229, 104, 160, 230, 122, 54, 161, 56, 229, 8, 196, 5, 138, 224, 229, 156, 251, 178, 161, 12, 141, 207, 173, 132, 197, 156, 132, 118, 9, 128, 213, 31, 146, 122, 251, 65, 50, 159, 19, 83, 157, 104, 246, 212, 99, 252, 185, 123, 97, 254, 97, 199, 114, 128, 4, 226, 46, 44, 169, 254, 47, 254, 187, 116, 37, 70, 209, 95, 189, 85, 162, 158, 147, 180, 8, 248, 253, 40, 87, 93, 162, 16, 80, 8, 12, 28, 129, 93, 89, 69, 6, 94, 155, 186, 67, 33, 240, 83, 65, 32, 188, 160, 53, 119, 186, 17, 151, 18, 135, 134, 21, 21, 120, 97, 221, 147, 52, 74, 46, 211, 24, 210, 67, 167, 30, 138, 61, 254, 239, 52, 74, 157, 235, 145, 101, 79, 132, 41, 153, 11, 112, 47, 100, 162, 184, 57, 64, 159, 158, 180, 220, 100, 56, 43, 105, 118, 152, 178, 55, 238, 156, 255, 6, 162, 152, 150, 69, 152, 219, 230, 64, 39, 254, 186, 228, 37, 77, 219, 216, 224, 232, 132, 211, 43, 12, 117, 16, 199, 77, 189, 19, 227, 98, 247, 209, 174, 105, 228, 162, 252, 25, 35, 154, 162, 134, 242, 241, 14, 23, 115, 176, 86, 161, 182, 182, 14, 53, 53, 250, 79, 109, 248, 183, 254, 189, 22, 245, 13, 141, 216, 88, 95, 201, 189, 65, 14, 30, 249, 242, 42, 124, 93, 241, 25, 215, 125, 214, 199, 126, 93, 83, 124, 34, 172, 115, 109, 108, 59, 55, 89, 162, 37, 145, 13, 137, 162, 29, 17, 224, 110, 42, 208, 106, 66, 106, 198, 102, 154, 249, 1, 247, 222, 255, 38, 45, 76, 215, 113, 239, 205, 32, 53, 22, 19, 222, 59, 229, 143, 56, 96, 202, 60, 109, 51, 101, 216, 78, 203, 180, 99, 97, 234, 200, 80, 34, 160, 165, 8, 225, 188, 21, 211, 106, 241, 207, 30, 232, 207, 143, 41, 197, 136, 129, 207, 160, 104, 119, 123, 234, 131, 137, 65, 122, 236, 140, 18, 43, 188, 197, 168, 130, 100, 152, 170, 71, 51, 60, 82, 11, 238, 184, 243, 124, 76, 99, 84, 96, 49, 41, 238, 116, 183, 225, 137, 215, 222, 2, 150, 16, 143, 4, 3, 218, 26, 59, 144, 30, 149, 129, 210, 182, 18, 28, 187, 239, 41, 216, 107, 252, 254, 196, 73, 212, 194, 116, 227, 124, 235, 109, 172, 94, 189, 154, 58, 38, 51, 106, 170, 233, 243, 217, 237, 29, 18, 121, 151, 68, 222, 33, 181, 181, 245, 244, 135, 173, 68, 109, 125, 155, 118, 239, 131, 31, 254, 81, 148, 164, 26, 77, 182, 79, 196, 5, 123, 255, 26, 155, 81, 135, 92, 67, 6, 115, 251, 138, 154, 108, 112, 47, 18, 201, 216, 100, 54, 25, 209, 84, 67, 166, 46, 57, 6, 190, 101, 229, 184, 250, 165, 185, 168, 116, 173, 228, 179, 102, 68, 128, 125, 156, 83, 120, 0, 78, 185, 254, 66, 216, 107, 218, 97, 205, 137, 135, 133, 194, 196, 193, 19, 219, 73, 166, 163, 166, 179, 153, 162, 173, 49, 184, 253, 161, 231, 241, 230, 183, 203, 97, 160, 139, 113, 208, 239, 97, 138, 167, 100, 28, 126, 249, 229, 96, 6, 34, 52, 119, 52, 35, 138, 218, 197, 239, 155, 2, 18, 9, 154, 17, 130, 81, 90, 131, 37, 27, 254, 197, 117, 167, 142, 90, 206, 56, 56, 179, 198, 50, 14, 1, 80, 152, 225, 212, 172, 186, 95, 113, 111, 192, 75, 93, 203, 104, 35, 148, 128, 182, 160, 166, 170, 236, 54, 12, 250, 34, 214, 217, 213, 174, 141, 254, 125, 149, 15, 97, 73, 205, 251, 90, 87, 102, 217, 243, 113, 244, 228, 217, 200, 142, 137, 130, 141, 76, 255, 27, 237, 31, 225, 233, 74, 253, 28, 167, 226, 54, 36, 90, 75, 87, 187, 139, 150, 6, 14, 30, 175, 198, 237, 175, 60, 132, 13, 173, 245, 154, 96, 96, 90, 252, 20, 60, 120, 197, 13, 168, 155, 206, 185, 87, 227, 71, 76, 102, 58, 5, 173, 219, 220, 190, 205, 23, 77, 110, 17, 178, 192, 153, 194, 20, 84, 169, 121, 168, 172, 168, 198, 17, 191, 63, 20, 191, 57, 252, 239, 12, 126, 198, 65, 225, 2, 181, 176, 236, 191, 120, 238, 217, 23, 48, 134, 1, 203, 218, 234, 106, 181, 185, 91, 87, 219, 142, 164, 81, 89, 248, 252, 201, 69, 120, 233, 253, 119, 225, 166, 223, 118, 144, 107, 234, 57, 51, 207, 192, 5, 215, 94, 64, 123, 170, 58, 174, 195, 233, 8, 49, 136, 150, 81, 186, 45, 81, 208, 123, 32, 189, 126, 43, 18, 71, 209, 192, 188, 49, 21, 85, 216, 132, 219, 174, 185, 20, 71, 164, 156, 202, 171, 25, 64, 140, 204, 248, 195, 139, 30, 199, 226, 37, 229, 200, 204, 164, 171, 65, 139, 206, 136, 246, 80, 84, 248, 144, 94, 143, 60, 187, 242, 175, 199, 103, 152, 201, 228, 197, 228, 153, 222, 4, 24, 149, 159, 142, 166, 170, 12, 96, 2, 112, 237, 21, 71, 99, 76, 112, 12, 87, 122, 63, 154, 154, 27, 241, 228, 191, 222, 211, 92, 24, 76, 81, 38, 184, 155, 253, 140, 47, 200, 181, 89, 31, 194, 222, 171, 87, 103, 20, 2, 10, 129, 65, 35, 160, 175, 138, 131, 190, 93, 221, 168, 16, 216, 125, 17, 48, 112, 37, 13, 117, 154, 209, 153, 200, 192, 41, 220, 42, 189, 254, 244, 219, 56, 98, 218, 9, 152, 159, 63, 26, 182, 80, 10, 78, 188, 228, 50, 188, 66, 251, 168, 13, 215, 61, 199, 179, 41, 112, 231, 37, 162, 181, 173, 149, 1, 44, 130, 212, 246, 114, 49, 148, 157, 29, 119, 19, 102, 155, 1, 137, 113, 113, 104, 222, 24, 141, 77, 99, 214, 226, 177, 135, 158, 192, 172, 28, 138, 241, 181, 133, 154, 65, 58, 87, 46, 198, 255, 254, 246, 111, 228, 37, 229, 160, 172, 189, 12, 73, 245, 57, 0, 173, 193, 138, 38, 68, 211, 215, 137, 102, 202, 102, 63, 181, 17, 21, 104, 250, 90, 95, 140, 125, 154, 38, 151, 69, 203, 34, 47, 162, 236, 29, 136, 236, 24, 15, 123, 107, 154, 225, 24, 29, 203, 68, 152, 12, 166, 249, 243, 247, 49, 183, 112, 50, 131, 107, 165, 179, 173, 177, 248, 195, 37, 23, 226, 250, 215, 254, 12, 123, 156, 25, 222, 70, 122, 50, 107, 162, 243, 29, 10, 26, 217, 7, 52, 104, 169, 157, 175, 118, 32, 43, 42, 30, 239, 223, 255, 26, 30, 59, 224, 48, 220, 112, 232, 4, 56, 124, 6, 20, 152, 169, 69, 161, 214, 69, 2, 246, 152, 205, 74, 150, 56, 220, 147, 69, 182, 154, 102, 147, 190, 100, 69, 199, 69, 35, 55, 138, 207, 73, 98, 207, 27, 221, 222, 218, 34, 254, 241, 98, 26, 235, 246, 81, 116, 85, 223, 72, 215, 5, 114, 116, 82, 68, 79, 143, 81, 111, 133, 12, 209, 113, 155, 217, 129, 196, 180, 120, 6, 91, 139, 239, 181, 1, 226, 138, 217, 69, 63, 217, 214, 106, 27, 42, 26, 55, 34, 230, 192, 6, 220, 244, 187, 51, 241, 155, 3, 254, 68, 91, 96, 154, 82, 210, 178, 228, 153, 117, 239, 226, 185, 167, 158, 68, 250, 168, 60, 148, 53, 83, 93, 198, 71, 222, 224, 215, 153, 182, 226, 253, 18, 144, 20, 151, 192, 40, 221, 6, 212, 208, 151, 210, 249, 229, 50, 77, 91, 232, 225, 134, 220, 160, 229, 1, 239, 171, 227, 2, 12, 131, 17, 145, 81, 140, 166, 169, 243, 19, 119, 61, 140, 191, 159, 244, 59, 26, 194, 142, 215, 130, 97, 29, 150, 53, 1, 111, 158, 154, 131, 138, 167, 25, 177, 183, 128, 185, 135, 235, 200, 180, 137, 22, 114, 16, 228, 39, 67, 107, 226, 219, 174, 188, 166, 18, 197, 69, 133, 248, 230, 74, 224, 245, 169, 11, 112, 246, 92, 250, 171, 178, 67, 193, 144, 13, 87, 30, 244, 71, 60, 115, 204, 203, 40, 126, 53, 26, 235, 83, 201, 32, 212, 81, 99, 57, 168, 177, 35, 110, 252, 231, 109, 234, 64, 91, 30, 181, 167, 31, 80, 193, 125, 231, 127, 80, 240, 151, 28, 76, 77, 25, 75, 127, 224, 46, 28, 27, 63, 23, 127, 187, 226, 1, 252, 245, 253, 95, 97, 139, 84, 194, 105, 103, 96, 186, 156, 72, 254, 229, 65, 116, 113, 64, 183, 48, 70, 25, 243, 37, 139, 180, 193, 142, 111, 150, 86, 160, 242, 132, 106, 236, 153, 56, 9, 151, 167, 165, 227, 149, 241, 55, 97, 148, 105, 46, 197, 32, 110, 108, 220, 252, 53, 176, 174, 129, 87, 101, 208, 111, 182, 78, 135, 99, 187, 33, 117, 209, 34, 128, 250, 122, 84, 188, 191, 5, 101, 167, 212, 80, 245, 175, 231, 91, 30, 51, 113, 12, 83, 26, 237, 207, 58, 12, 216, 188, 114, 53, 26, 151, 174, 167, 150, 213, 137, 246, 144, 119, 155, 182, 106, 57, 210, 131, 70, 52, 187, 107, 233, 243, 157, 129, 85, 247, 108, 198, 127, 14, 120, 4, 191, 63, 242, 10, 196, 251, 211, 112, 193, 164, 83, 97, 188, 217, 131, 243, 175, 57, 23, 163, 190, 98, 64, 229, 236, 28, 180, 250, 93, 48, 185, 186, 40, 160, 9, 232, 90, 89, 62, 96, 34, 107, 21, 230, 56, 38, 150, 145, 216, 55, 143, 166, 128, 118, 13, 142, 188, 104, 62, 254, 118, 217, 223, 144, 28, 44, 6, 131, 77, 227, 19, 223, 90, 60, 112, 247, 109, 200, 91, 149, 141, 117, 185, 117, 176, 87, 75, 4, 108, 130, 225, 182, 162, 62, 176, 1, 249, 105, 163, 113, 195, 95, 111, 197, 180, 253, 242, 113, 120, 254, 47, 145, 17, 176, 227, 150, 83, 254, 4, 75, 179, 13, 247, 254, 254, 239, 212, 9, 83, 211, 93, 152, 75, 31, 240, 54, 24, 60, 188, 143, 207, 187, 174, 21, 102, 253, 28, 70, 163, 35, 128, 120, 135, 13, 165, 165, 185, 104, 74, 44, 193, 85, 247, 92, 137, 223, 29, 116, 19, 115, 189, 219, 209, 200, 250, 159, 93, 243, 38, 62, 191, 241, 37, 100, 147, 249, 222, 226, 105, 134, 184, 9, 73, 0, 201, 30, 137, 229, 57, 173, 9, 200, 76, 119, 192, 226, 224, 205, 242, 24, 247, 64, 33, 54, 67, 158, 225, 186, 26, 59, 218, 233, 171, 157, 114, 24, 112, 197, 85, 87, 226, 132, 177, 23, 201, 9, 248, 40, 228, 250, 215, 234, 151, 241, 218, 191, 222, 70, 86, 110, 62, 182, 112, 173, 103, 209, 20, 112, 244, 82, 111]);
fileData1.push.apply(fileData1, [15, 117, 168, 67, 10, 1, 133, 192, 192, 17, 80, 12, 240, 192, 49, 83, 119, 140, 16, 4, 132, 127, 21, 31, 160, 230, 114, 46, 116, 249, 62, 84, 189, 10, 252, 99, 236, 59, 24, 119, 229, 92, 20, 36, 20, 224, 20, 251, 20, 152, 174, 188, 21, 37, 73, 123, 225, 15, 143, 252, 158, 254, 83, 90, 86, 9, 52, 88, 83, 224, 160, 235, 176, 159, 209, 158, 253, 62, 166, 59, 104, 240, 161, 153, 185, 24, 115, 247, 159, 129, 7, 110, 187, 11, 71, 237, 51, 139, 12, 114, 23, 37, 188, 22, 124, 236, 93, 139, 195, 30, 184, 12, 89, 37, 137, 40, 77, 169, 67, 170, 49, 158, 178, 236, 50, 156, 177, 247, 92, 76, 153, 48, 86, 86, 65, 184, 77, 46, 60, 187, 226, 3, 44, 89, 179, 156, 17, 76, 211, 153, 162, 131, 210, 119, 82, 36, 160, 204, 142, 195, 65, 205, 165, 240, 99, 65, 110, 26, 12, 91, 168, 29, 152, 136, 39, 75, 255, 130, 249, 109, 135, 97, 108, 12, 165, 228, 92, 93, 127, 189, 247, 47, 241, 240, 30, 127, 70, 83, 153, 19, 38, 155, 23, 1, 154, 72, 235, 210, 241, 29, 75, 27, 241, 71, 12, 110, 52, 57, 141, 136, 37, 236, 15, 255, 223, 237, 152, 85, 152, 141, 3, 139, 14, 97, 58, 29, 31, 53, 232, 146, 206, 71, 182, 43, 187, 55, 117, 239, 97, 247, 191, 135, 187, 215, 221, 235, 18, 115, 192, 134, 86, 50, 44, 164, 149, 37, 52, 145, 29, 2, 50, 216, 249, 28, 245, 211, 202, 113, 87, 171, 147, 190, 104, 188, 137, 124, 240, 203, 202, 154, 183, 208, 68, 126, 181, 137, 172, 204, 206, 40, 145, 242, 178, 243, 167, 156, 132, 121, 199, 207, 198, 33, 147, 78, 102, 154, 152, 84, 241, 102, 192, 35, 237, 223, 224, 252, 71, 174, 66, 206, 151, 57, 104, 201, 117, 209, 98, 193, 141, 68, 230, 72, 245, 84, 250, 17, 189, 95, 49, 14, 220, 103, 15, 56, 185, 55, 151, 189, 244, 115, 52, 225, 127, 228, 91, 190, 196, 132, 140, 62, 242, 6, 219, 113, 74, 250, 153, 110, 159, 114, 158, 233, 149, 232, 115, 27, 138, 161, 189, 200, 210, 40, 188, 186, 229, 90, 156, 153, 251, 34, 143, 154, 48, 145, 2, 181, 227, 103, 156, 140, 203, 159, 190, 19, 69, 166, 49, 104, 53, 232, 38, 180, 225, 94, 118, 43, 167, 31, 127, 178, 170, 160, 137, 118, 191, 237, 14, 84, 198, 108, 196, 152, 184, 201, 184, 248, 159, 151, 98, 6, 163, 214, 79, 75, 156, 200, 244, 89, 124, 183, 50, 50, 243, 197, 55, 95, 139, 251, 62, 250, 45, 50, 227, 242, 80, 213, 78, 127, 87, 121, 153, 233, 168, 246, 163, 146, 110, 151, 8, 87, 196, 255, 173, 149, 29, 116, 51, 201, 193, 162, 167, 158, 192, 95, 15, 171, 197, 93, 167, 254, 21, 105, 54, 178, 81, 244, 123, 253, 205, 33, 231, 225, 190, 7, 150, 33, 248, 171, 135, 25, 16, 139, 193, 152, 26, 58, 152, 187, 154, 126, 174, 100, 102, 134, 157, 4, 122, 142, 25, 29, 85, 16, 252, 140, 66, 216, 141, 84, 79, 211, 90, 55, 55, 127, 95, 156, 154, 201, 73, 67, 138, 118, 119, 34, 241, 35, 254, 189, 150, 151, 102, 114, 144, 171, 25, 20, 81, 99, 157, 228, 230, 239, 40, 208, 110, 66, 32, 155, 99, 179, 5, 168, 173, 92, 199, 107, 218, 97, 139, 78, 193, 65, 251, 159, 136, 12, 71, 50, 45, 10, 232, 98, 243, 109, 35, 152, 81, 8, 45, 244, 227, 53, 109, 255, 60, 176, 56, 137, 150, 221, 69, 5, 125, 39, 57, 210, 156, 196, 2, 252, 249, 218, 187, 80, 156, 214, 138, 179, 103, 220, 64, 172, 178, 112, 222, 193, 231, 192, 159, 28, 139, 139, 94, 124, 2, 184, 237, 13, 201, 174, 164, 165, 82, 182, 38, 165, 33, 64, 166, 55, 196, 5, 201, 227, 14, 162, 165, 209, 198, 31, 206, 37, 6, 127, 252, 205, 121, 135, 224, 210, 35, 254, 134, 188, 68, 226, 205, 58, 90, 66, 141, 56, 232, 223, 119, 33, 233, 193, 53, 112, 21, 165, 193, 88, 66, 199, 31, 17, 44, 118, 5, 233, 215, 238, 67, 91, 53, 35, 241, 23, 108, 64, 210, 215, 69, 184, 254, 129, 243, 144, 113, 181, 7, 83, 18, 46, 65, 82, 84, 10, 110, 186, 248, 79, 240, 141, 78, 195, 63, 223, 121, 138, 47, 233, 53, 24, 205, 250, 91, 227, 19, 24, 29, 218, 194, 101, 144, 243, 151, 220, 117, 135, 155, 190, 204, 181, 113, 124, 218, 54, 96, 230, 5, 108, 251, 207, 127, 143, 51, 103, 223, 0, 155, 68, 176, 102, 53, 75, 235, 190, 192, 37, 183, 94, 140, 49, 107, 99, 81, 146, 75, 97, 206, 150, 78, 4, 68, 11, 239, 235, 153, 17, 149, 231, 103, 225, 250, 13, 52, 37, 248, 14, 235, 190, 254, 202, 56, 6, 56, 99, 250, 197, 56, 232, 216, 61, 176, 223, 184, 211, 97, 237, 114, 194, 205, 226, 239, 174, 251, 8, 215, 61, 126, 23, 10, 155, 57, 167, 163, 219, 217, 112, 106, 242, 105, 17, 65, 211, 135, 190, 138, 83, 231, 20, 2, 10, 129, 93, 68, 64, 49, 192, 187, 8, 160, 186, 125, 247, 70, 64, 98, 151, 154, 24, 129, 170, 178, 174, 18, 249, 133, 133, 120, 247, 207, 47, 224, 234, 232, 0, 254, 113, 233, 63, 144, 234, 204, 196, 73, 150, 2, 6, 77, 185, 12, 19, 102, 79, 194, 226, 111, 214, 224, 206, 103, 238, 101, 200, 232, 141, 104, 174, 248, 14, 151, 227, 206, 204, 198, 188, 131, 238, 194, 180, 217, 7, 98, 90, 254, 20, 10, 125, 169, 237, 224, 2, 183, 128, 9, 36, 14, 120, 224, 70, 56, 238, 95, 131, 202, 116, 26, 37, 214, 123, 96, 180, 37, 3, 169, 45, 152, 62, 253, 72, 198, 192, 154, 42, 251, 2, 238, 58, 184, 40, 126, 86, 74, 231, 40, 174, 139, 153, 92, 24, 171, 40, 85, 231, 191, 190, 252, 131, 116, 229, 179, 31, 141, 92, 156, 199, 231, 134, 176, 236, 82, 186, 84, 77, 117, 96, 236, 126, 218, 222, 27, 190, 232, 76, 148, 95, 117, 18, 242, 127, 241, 30, 54, 103, 199, 193, 92, 222, 74, 151, 103, 150, 173, 215, 184, 205, 54, 74, 182, 152, 63, 74, 234, 214, 48, 253, 207, 240, 103, 183, 227, 59, 111, 119, 228, 98, 254, 150, 63, 53, 192, 183, 187, 139, 199, 60, 141, 157, 204, 148, 193, 188, 147, 171, 54, 227, 238, 103, 111, 199, 184, 107, 246, 67, 22, 125, 195, 169, 235, 223, 241, 226, 237, 142, 252, 164, 191, 70, 224, 97, 39, 186, 243, 249, 221, 14, 15, 174, 123, 221, 11, 235, 169, 132, 110, 21, 124, 103, 238, 108, 196, 113, 251, 159, 132, 61, 159, 155, 74, 115, 80, 73, 23, 70, 70, 68, 198, 171, 219, 181, 82, 148, 240, 117, 145, 226, 35, 127, 235, 191, 233, 211, 239, 239, 130, 195, 230, 192, 151, 27, 63, 199, 3, 247, 221, 143, 186, 141, 173, 176, 57, 44, 204, 153, 186, 173, 214, 171, 167, 38, 237, 234, 49, 105, 170, 60, 97, 145, 246, 222, 126, 218, 91, 104, 221, 223, 205, 119, 129, 112, 168, 60, 171, 255, 151, 43, 244, 246, 147, 185, 11, 89, 24, 209, 157, 81, 173, 226, 10, 58, 177, 231, 232, 105, 136, 183, 112, 107, 79, 141, 146, 104, 36, 239, 119, 149, 224, 146, 59, 110, 197, 232, 251, 74, 81, 159, 151, 130, 182, 82, 74, 104, 232, 61, 225, 48, 196, 49, 134, 64, 41, 206, 56, 118, 95, 76, 75, 58, 14, 230, 174, 120, 205, 92, 213, 252, 89, 21, 157, 128, 233, 254, 207, 127, 29, 145, 208, 187, 90, 109, 125, 127, 104, 239, 25, 191, 149, 23, 117, 226, 193, 199, 124, 56, 229, 70, 234, 106, 105, 150, 28, 160, 176, 206, 59, 119, 10, 48, 139, 253, 218, 228, 71, 151, 228, 130, 149, 0, 85, 145, 14, 74, 177, 50, 16, 218, 96, 72, 239, 251, 38, 209, 118, 155, 152, 135, 181, 147, 205, 108, 31, 83, 3, 251, 179, 236, 227, 156, 103, 240, 192, 133, 55, 210, 135, 217, 204, 120, 192, 6, 92, 55, 230, 100, 116, 252, 254, 115, 44, 188, 246, 45, 164, 143, 206, 160, 217, 116, 59, 162, 173, 210, 54, 121, 35, 118, 171, 121, 39, 245, 202, 124, 16, 115, 85, 63, 25, 221, 170, 166, 50, 140, 75, 158, 130, 167, 254, 248, 46, 14, 43, 248, 24, 167, 206, 28, 171, 153, 164, 75, 105, 119, 92, 240, 7, 28, 179, 162, 4, 182, 251, 215, 33, 42, 195, 138, 206, 234, 38, 72, 26, 187, 16, 173, 62, 134, 155, 124, 116, 4, 182, 59, 28, 248, 218, 92, 138, 79, 131, 239, 113, 53, 72, 67, 17, 131, 66, 21, 105, 122, 78, 96, 177, 171, 28, 239, 215, 147, 251, 37, 185, 34, 185, 143, 194, 140, 253, 54, 109, 35, 176, 110, 109, 188, 179, 241, 110, 233, 173, 56, 210, 55, 29, 147, 44, 199, 224, 144, 212, 67, 181, 57, 247, 10, 54, 226, 134, 218, 197, 196, 151, 152, 80, 27, 217, 230, 222, 177, 111, 154, 48, 152, 42, 220, 214, 90, 174, 93, 89, 204, 167, 188, 98, 2, 174, 186, 230, 97, 36, 255, 165, 29, 71, 236, 121, 15, 145, 74, 199, 133, 123, 157, 128, 172, 49, 83, 176, 106, 159, 99, 112, 205, 215, 156, 104, 207, 173, 6, 86, 175, 220, 218, 20, 75, 2, 48, 247, 52, 224, 103, 179, 231, 98, 234, 172, 83, 49, 109, 226, 193, 52, 197, 207, 215, 206, 127, 100, 40, 199, 202, 7, 255, 129, 132, 95, 61, 10, 71, 94, 58, 26, 55, 213, 112, 12, 248, 92, 132, 113, 22, 141, 184, 153, 227, 213, 176, 41, 132, 204, 130, 38, 124, 117, 231, 4, 92, 225, 249, 53, 238, 190, 49, 128, 201, 9, 191, 69, 66, 84, 44, 110, 62, 238, 74, 204, 217, 119, 30, 94, 152, 253, 21, 94, 91, 245, 58, 112, 199, 219, 91, 235, 150, 63, 82, 184, 180, 206, 188, 176, 30, 167, 204, 252, 21, 246, 158, 59, 7, 123, 36, 31, 197, 163, 14, 205, 21, 232, 237, 198, 47, 240, 229, 77, 255, 7, 231, 83, 62, 184, 115, 41, 80, 216, 210, 200, 250, 249, 144, 245, 192, 132, 202, 60, 147, 103, 213, 204, 92, 190, 175, 95, 254, 42, 124, 231, 144, 65, 167, 37, 134, 246, 226, 209, 79, 109, 125, 255, 136, 180, 153, 22, 223, 154, 159, 117, 194, 232, 14, 76, 46, 58, 136, 193, 221, 82, 117, 193, 182, 48, 191, 141, 31, 227, 186, 155, 174, 197, 152, 71, 183, 160, 50, 47, 25, 238, 210, 134, 239, 79, 200, 34, 253, 80, 164, 16, 24, 193, 8, 240, 9, 87, 164, 16, 80, 8, 244, 138, 0, 23, 186, 160, 129, 18, 217, 78, 35, 54, 215, 109, 68, 81, 122, 33, 158, 191, 233, 101, 68, 209, 36, 239, 166, 95, 255, 25, 163, 226, 114, 200, 32, 155, 113, 204, 30, 135, 98, 246, 30, 7, 225, 224, 25, 251, 35, 174, 213, 3, 137, 83, 99, 230, 22, 221, 64, 243, 229, 164, 116, 39, 138, 178, 185, 81, 228, 145, 128, 47, 0, 139, 213, 132, 247, 235, 86, 225, 144, 23, 238, 65, 244, 165, 207, 194, 17, 31, 7, 55, 253, 223, 162, 51, 146, 232, 151, 87, 129, 153, 39, 31, 138, 25, 243, 184, 57, 161, 66, 36, 104, 13, 226, 147, 198, 133, 88, 176, 229, 25, 68, 113, 147, 209, 18, 162, 244, 156, 164, 153, 165, 177, 109, 125, 145, 152, 53, 51, 134, 23, 218, 50, 27, 120, 153, 25, 111, 87, 61, 138, 105, 222, 60, 164, 153, 178, 16, 77, 243, 203, 39, 167, 94, 136, 211, 241, 60, 114, 2, 249, 40, 99, 142, 72, 35, 165, 244, 58, 67, 167, 179, 214, 194, 98, 7, 184, 83, 12, 208, 60, 209, 72, 77, 167, 166, 49, 218, 73, 157, 125, 181, 103, 168, 207, 201, 38, 86, 72, 218, 199, 17, 34, 88, 52, 26, 227, 134, 37, 16, 217, 180, 68, 46, 144, 115, 178, 99, 33, 73, 32, 33, 109, 123, 71, 243, 81, 9, 74, 22, 12, 10, 227, 19, 102, 252, 181, 75, 100, 123, 179, 99, 39, 101, 3, 216, 64, 83, 208, 12, 107, 42, 222, 185, 190, 6, 111, 142, 125, 3, 23, 156, 120, 170, 22, 144, 136, 69, 105, 2, 141, 16, 55, 154, 52, 180, 227, 253, 59, 110, 32, 121, 240, 123, 37, 233, 65, 164, 23, 65, 54, 94, 90, 166, 109, 198, 200, 184, 8, 69, 206, 105, 95, 250, 248, 136, 64, 40, 184, 250, 100, 51, 202, 205, 127, 128, 56, 111, 197, 184, 143, 123, 123, 60, 21, 46, 80, 76, 143, 67, 50, 86, 132, 219, 68, 237, 210, 246, 244, 93, 189, 1, 205, 124, 80, 206, 251, 217, 246, 233, 19, 167, 107, 63, 219, 95, 63, 208, 239, 113, 235, 236, 120, 242, 217, 199, 200, 0, 119, 50, 101, 24, 221, 0, 190, 7, 6, 152, 160, 193, 37, 19, 137, 191, 165, 47, 243, 246, 62, 28, 216, 123, 96, 45, 151, 153, 101, 228, 59, 229, 129, 234, 143, 112, 201, 63, 238, 71, 209, 109, 175, 81, 91, 149, 66, 95, 81, 177, 10, 97, 116, 95, 43, 57, 224, 112, 100, 242, 3, 232, 163, 107, 113, 50, 93, 13, 25, 154, 181, 150, 45, 248, 148, 81, 228, 133, 186, 226, 232, 63, 217, 182, 35, 230, 218, 201, 94, 62, 186, 140, 242, 156, 56, 208, 252, 191, 18, 44, 189, 230, 85, 236, 99, 60, 154, 147, 200, 143, 131, 71, 79, 199, 243, 83, 103, 161, 126, 209, 74, 196, 143, 142, 167, 165, 75, 45, 251, 22, 22, 11, 177, 138, 32, 231, 140, 140, 243, 214, 103, 172, 151, 242, 35, 135, 3, 12, 166, 37, 57, 93, 171, 214, 213, 32, 167, 48, 11, 143, 95, 116, 43, 102, 238, 99, 195, 249, 147, 255, 64, 102, 53, 132, 84, 83, 26, 14, 62, 238, 28, 252, 251, 225, 103, 48, 182, 34, 29, 29, 233, 132, 83, 52, 138, 228, 144, 252, 145, 103, 187, 159, 245, 6, 57, 6, 38, 214, 229, 169, 15, 162, 49, 135, 150, 50, 37, 185, 248, 243, 141, 175, 163, 232, 169, 25, 152, 158, 68, 65, 37, 77, 161, 143, 182, 229, 224, 133, 43, 174, 199, 137, 111, 29, 136, 164, 242, 44, 116, 166, 36, 32, 84, 223, 204, 238, 112, 226, 134, 159, 165, 72, 219, 135, 250, 183, 151, 1, 152, 98, 140, 12, 250, 245, 77, 13, 190, 252, 236, 101, 180, 239, 117, 18, 226, 136, 121, 87, 72, 23, 226, 44, 88, 255, 21, 150, 110, 252, 24, 133, 140, 35, 188, 209, 87, 175, 9, 0, 34, 207, 205, 246, 109, 241, 184, 44, 24, 69, 91, 131, 133, 175, 80, 11, 252, 179, 36, 45, 56, 90, 43, 5, 171, 113, 81, 49, 72, 46, 217, 128, 73, 75, 215, 226, 27, 222, 20, 19, 224, 155, 180, 151, 169, 33, 239, 75, 35, 133, 164, 77, 149, 110, 36, 229, 173, 66, 227, 135, 99, 112, 222, 229, 207, 226, 119, 151, 59, 112, 222, 254, 119, 34, 201, 145, 132, 163, 162, 10, 113, 208, 145, 133, 216, 107, 206, 1, 136, 61, 186, 77, 203, 67, 111, 228, 67, 110, 48, 48, 216, 150, 197, 0, 103, 178, 23, 227, 242, 146, 56, 83, 39, 109, 125, 7, 189, 92, 185, 12, 199, 63, 119, 15, 112, 249, 83, 136, 205, 74, 71, 69, 37, 153, 95, 89, 139, 104, 125, 213, 157, 252, 124, 118, 36, 95, 113, 213, 166, 70, 164, 142, 110, 197, 71, 255, 40, 198, 229, 161, 223, 225, 215, 231, 25, 113, 244, 30, 151, 32, 133, 22, 85, 191, 72, 159, 142, 25, 103, 76, 199, 197, 141, 7, 32, 234, 248, 63, 114, 136, 252, 44, 139, 111, 59, 190, 99, 172, 100, 88, 163, 115, 219, 48, 54, 101, 2, 139, 29, 165, 117, 51, 192, 254, 222, 241, 229, 51, 184, 241, 137, 191, 81, 218, 178, 140, 204, 119, 26, 202, 74, 43, 181, 122, 196, 55, 87, 234, 211, 41, 252, 198, 36, 192, 50, 207, 152, 208, 156, 125, 50, 224, 200, 131, 248, 28, 12, 144, 4, 222, 0, 131, 120, 221, 65, 171, 174, 63, 62, 248, 71, 140, 185, 127, 9, 214, 177, 94, 148, 214, 114, 12, 185, 107, 208, 124, 161, 7, 88, 168, 186, 92, 33, 160, 16, 24, 48, 2, 138, 1, 30, 48, 100, 234, 134, 145, 134, 128, 172, 119, 6, 58, 213, 10, 51, 89, 18, 218, 136, 130, 152, 66, 60, 126, 221, 51, 232, 220, 108, 192, 25, 151, 22, 97, 159, 81, 23, 33, 42, 222, 132, 100, 36, 225, 144, 98, 97, 116, 123, 166, 70, 46, 168, 54, 43, 35, 92, 126, 186, 0, 135, 208, 228, 9, 143, 127, 6, 71, 82, 2, 234, 221, 45, 48, 112, 223, 106, 111, 167, 6, 133, 116, 208, 17, 123, 99, 134, 149, 139, 52, 87, 74, 178, 157, 248, 124, 225, 26, 172, 124, 30, 24, 157, 101, 199, 134, 230, 154, 62, 55, 58, 221, 107, 150, 13, 30, 195, 235, 208, 119, 176, 150, 230, 131, 227, 112, 223, 163, 143, 227, 183, 135, 95, 131, 52, 238, 169, 88, 29, 142, 207, 221, 23, 119, 252, 243, 120, 212, 159, 255, 46, 162, 179, 83, 208, 81, 46, 155, 104, 246, 149, 155, 28, 97, 227, 252, 212, 76, 69, 83, 243, 34, 102, 190, 66, 154, 166, 74, 83, 97, 105, 95, 127, 240, 15, 147, 108, 66, 73, 9, 244, 233, 162, 142, 75, 26, 200, 224, 84, 78, 68, 71, 209, 164, 141, 164, 167, 65, 145, 191, 196, 255, 76, 127, 213, 89, 165, 79, 114, 136, 18, 123, 155, 141, 185, 36, 157, 163, 248, 101, 17, 77, 252, 168, 30, 208, 40, 188, 209, 9, 127, 139, 252, 146, 205, 142, 159, 185, 69, 221, 169, 212, 54, 121, 214, 227, 194, 71, 126, 129, 209, 251, 36, 226, 160, 81, 243, 233, 111, 45, 27, 53, 138, 65, 76, 209, 172, 135, 166, 132, 210, 26, 205, 241, 44, 114, 247, 247, 255, 91, 244, 97, 38, 241, 151, 101, 187, 69, 123, 22, 35, 179, 134, 255, 133, 217, 211, 255, 148, 77, 169, 142, 95, 95, 173, 19, 6, 65, 40, 142, 17, 105, 19, 136, 151, 236, 90, 173, 140, 22, 20, 21, 43, 51, 168, 59, 198, 218, 215, 94, 63, 164, 38, 65, 214, 16, 246, 149, 118, 166, 70, 193, 202, 113, 211, 103, 150, 69, 155, 115, 221, 111, 254, 174, 222, 24, 36, 88, 245, 231, 130, 114, 163, 93, 38, 97, 222, 77, 156, 207, 110, 151, 155, 46, 4, 122, 255, 123, 30, 241, 93, 174, 106, 107, 1, 18, 200, 73, 72, 34, 24, 39, 75, 95, 248, 157, 114, 132, 62, 73, 195, 138, 87, 104, 230, 169, 20, 239, 216, 60, 237, 72, 240, 219, 241, 116, 211, 87, 88, 251, 242, 251, 184, 125, 201, 163, 72, 126, 182, 10, 37, 89, 100, 126, 183, 8, 243, 67, 255, 84, 110, 242, 29, 86, 59, 173, 85, 234, 49, 245, 162, 125, 49, 189, 120, 31, 142, 59, 31, 118, 7, 173, 63, 86, 174, 192, 243, 75, 159, 211, 234, 52, 144, 33, 216, 185, 249, 115, 247, 230, 49, 255, 46, 253, 41, 163, 248, 228, 172, 251, 166, 4, 239, 188, 247, 62, 102, 29, 121, 12, 221, 125, 45, 152, 30, 53, 26, 103, 156, 114, 6, 46, 91, 120, 1, 198, 210, 116, 20, 241, 81, 136, 231, 51, 22, 37, 183, 179, 219, 118, 126, 183, 106, 81, 242, 185, 185, 55, 104, 71, 187, 23, 220, 227, 223, 194, 64, 11, 227, 81, 70, 171, 155, 44, 228, 225, 130, 107, 110, 192, 156, 23, 207, 199, 88, 186, 127, 8, 29, 49, 118, 22, 30, 125, 230, 30, 156, 123, 228, 165, 200, 51, 20, 33, 224, 160, 164, 208, 18, 203, 122, 205, 3, 174, 87, 132, 103, 102, 214, 85, 87, 214, 132, 81, 69, 54, 172, 120, 231, 191, 204, 15, 220, 132, 71, 46, 121, 154, 65, 149, 242, 181, 250, 78, 200, 63, 0, 175, 189, 241, 44, 142, 62, 230, 231, 24, 219, 153, 137, 181, 177, 244, 111, 109, 163, 219, 72, 100, 82, 107, 87, 13, 195, 135, 155, 101, 38, 115, 38, 116, 50, 158, 195, 39, 118, 248, 207, 112, 195, 156, 104, 38, 47, 167, 79, 158, 44, 90, 47, 96, 1, 159, 171, 60, 62, 151, 229, 34, 2, 236, 189, 65, 65, 10, 94, 253, 233, 28, 159, 175, 59, 81, 222, 32, 179, 138, 204, 174, 60, 207, 164, 142, 114, 102, 56, 88, 81, 198, 187, 147, 40, 16, 100, 165, 125, 60, 16, 34, 76, 147, 128, 109, 141, 165, 33, 196, 101, 173, 131, 231, 131, 2, 92, 253, 237, 227, 216, 240, 115, 43, 78, 252, 21, 125, 168, 51, 206, 167, 207, 185, 9, 135, 50, 109, 17, 121, 220, 30, 169, 133, 71, 13, 62, 31, 150, 84, 108, 193, 151, 11, 223, 198, 181, 239, 60, 130, 232, 103, 86, 32, 58, 53, 141, 249, 140, 235, 24, 81, 156, 75, 31, 25, 230, 29, 218, 193, 118, 9, 83, 108, 96, 26, 167, 186, 13, 126, 164, 100, 175, 199, 71, 247, 102, 227, 163, 101, 191, 193, 141, 199, 214, 224, 248, 211, 38, 50, 10, 250, 145, 40, 162, 159, 111, 81, 210, 24, 176, 59, 61, 146, 24, 144, 71, 209, 124, 252, 233, 234, 207, 177, 254, 169, 15, 105, 209, 115, 27, 114, 215, 240, 89, 203, 73, 70, 51, 153, 80, 38, 116, 226, 216, 242, 157, 222, 13, 135, 200, 187, 210, 64, 38, 58, 86, 222, 171, 28, 130, 157, 60, 194, 218, 237, 50, 34, 205, 252, 105, 167, 52, 219, 193, 58, 237, 244, 41, 254, 79, 243, 87, 216, 200, 122, 239, 122, 239, 5, 100, 44, 42, 193, 58, 230, 235, 22, 230, 87, 74, 12, 145, 49, 238, 94, 47, 15, 42, 82, 8, 40, 4, 134, 9, 1, 125, 87, 56, 76, 133, 171, 98, 21, 2, 187, 11, 2, 33, 110, 26, 181, 69, 176, 195, 128, 77, 129, 141, 90, 144, 140, 231, 31, 123, 26, 239, 108, 102, 94, 205, 188, 141, 216, 255, 100, 51, 246, 24, 187, 15, 226, 125, 7, 209, 164, 146, 156, 114, 208, 70, 223, 167, 120, 70, 171, 244, 50, 170, 115, 23, 154, 200, 84, 62, 191, 254, 99, 212, 125, 182, 0, 159, 188, 244, 36, 76, 92, 112, 19, 153, 202, 168, 94, 130, 214, 184, 66, 220, 40, 114, 35, 210, 194, 141, 220, 254, 220, 152, 36, 149, 162, 180, 100, 53, 60, 44, 195, 31, 170, 65, 219, 226, 176, 153, 155, 153, 154, 14, 254, 15, 9, 227, 210, 155, 168, 127, 59, 192, 169, 231, 164, 234, 146, 1, 95, 10, 58, 128, 247, 129, 143, 151, 110, 66, 40, 159, 186, 93, 110, 104, 77, 209, 86, 156, 157, 62, 22, 151, 225, 37, 6, 85, 97, 206, 203, 240, 189, 1, 154, 137, 202, 150, 189, 133, 145, 164, 55, 108, 41, 69, 130, 219, 205, 173, 175, 25, 13, 229, 53, 220, 137, 201, 54, 107, 160, 27, 232, 237, 26, 53, 68, 95, 3, 62, 217, 244, 209, 101, 170, 162, 28, 27, 202, 54, 193, 237, 161, 143, 153, 183, 157, 155, 89, 209, 120, 139, 27, 31, 207, 135, 55, 49, 17, 169, 122, 13, 163, 103, 175, 44, 47, 67, 10, 251, 95, 213, 90, 9, 87, 125, 29, 175, 140, 98, 48, 36, 110, 60, 250, 32, 97, 24, 132, 169, 108, 105, 100, 64, 153, 212, 28, 84, 191, 87, 134, 251, 30, 127, 5, 137, 103, 140, 131, 189, 141, 102, 152, 9, 81, 212, 92, 84, 129, 49, 208, 72, 162, 133, 214, 43, 238, 231, 48, 245, 81, 243, 224, 78, 133, 184, 177, 215, 52, 21, 220, 104, 214, 85, 87, 98, 121, 217, 22, 196, 123, 131, 216, 88, 181, 17, 70, 15, 133, 27, 212, 9, 247, 199, 151, 81, 76, 134, 133, 234, 136, 211, 218, 13, 235, 225, 36, 76, 62, 114, 162, 85, 155, 57, 23, 72, 94, 209, 54, 138, 74, 99, 39, 164, 161, 193, 235, 124, 124, 22, 132, 42, 215, 54, 96, 227, 250, 205, 176, 7, 153, 243, 58, 121, 11, 90, 218, 184, 203, 39, 69, 148, 247, 221, 235, 93, 179, 177, 4, 14, 250, 1, 186, 41, 240, 208, 89, 73, 237, 210, 1, 127, 200, 99, 35, 115, 34, 54, 58, 30, 149, 101, 149, 12, 238, 196, 231, 84, 195, 97, 103, 91, 217, 1, 87, 165, 221, 16, 97, 50, 187, 232, 43, 46, 212, 86, 83, 139, 111, 54, 111, 66, 182, 188, 75, 68, 19, 44, 13, 234, 131, 184, 207, 199, 91, 29, 85, 248, 95, 21, 3, 231, 44, 95, 5, 103, 153, 11, 247, 213, 125, 13, 188, 178, 84, 82, 132, 163, 126, 84, 42, 221, 34, 100, 254, 202, 19, 201, 242, 184, 154, 139, 214, 74, 40, 101, 116, 29, 26, 59, 86, 98, 99, 13, 153, 226, 228, 32, 106, 190, 248, 18, 9, 139, 249, 172, 208, 145, 52, 192, 168, 243, 3, 35, 142, 158, 200, 120, 162, 216, 15, 242, 78, 75, 95, 53, 97, 217, 148, 114, 56, 90, 152, 123, 56, 214, 140, 73, 206, 84, 228, 68, 39, 162, 193, 197, 201, 239, 52, 163, 182, 170, 18, 171, 18, 152, 53, 214, 111, 64, 89, 201, 102, 116, 232, 15, 5, 235, 237, 199, 68, 9, 55, 76, 211, 254, 113, 120, 26, 18, 43, 129, 183, 147, 112, 195, 63, 174, 193, 45, 39, 94, 171, 89, 208, 56, 57, 255, 246, 73, 29, 143, 185, 7, 102, 97, 209, 243, 45, 200, 26, 197, 241, 227, 252, 169, 27, 100, 189, 126, 58, 24, 155, 130, 22, 84, 84, 85, 99, 116, 193, 4, 188, 243, 235, 207, 241, 74, 193, 66, 204, 31, 207, 110, 211, 50, 192, 72, 166, 199, 17, 93, 0, 156, 48, 17, 254, 59, 54, 129, 157, 69, 136, 12, 176, 54, 126, 195, 249, 128, 19, 118, 79, 64, 222, 101, 233, 88, 211, 241, 30, 222, 93, 127, 31, 102, 39, 159, 71, 75, 12, 10, 140, 44, 124, 30, 87, 113, 46, 144, 188, 50, 158, 50, 62, 50, 157, 244, 215, 142, 28, 222, 134, 252, 93, 110, 106, 142, 117, 161, 213, 167, 107, 174, 195, 196, 177, 22, 100, 121, 246, 192, 58, 90, 6, 220, 191, 242, 109, 180, 242, 229, 159, 232, 160, 38, 220, 47, 154, 254, 190, 73, 172, 104, 196, 228, 183, 181, 210, 128, 152, 180, 77, 200, 106, 203, 198, 163, 127, 127, 8, 111, 172, 166, 112, 34, 127, 61, 230, 156, 76, 183, 155, 194, 57, 72, 232, 154, 11, 155, 157, 121, 232, 169, 197, 166, 206, 26, 102, 102, 47, 240, 146, 177, 124, 201, 91, 133, 13, 255, 253, 8, 107, 63, 92, 134, 165, 239, 191, 195, 240, 145, 124, 47, 140, 74, 71, 29, 173, 7, 66, 94, 174, 45, 125, 244, 67, 250, 23, 34, 115, 44, 190, 223, 245, 229, 33, 164, 140, 170, 128, 127, 113, 38, 110, 88, 124, 43, 62, 89, 18, 141, 241, 249, 39, 99, 223, 195, 98, 49, 62, 225, 36, 10, 156, 18, 97, 51, 119, 192, 203, 117, 216, 203, 60, 197, 209, 62, 15, 45, 33, 44, 120, 113, 253, 98, 24, 222, 249, 12, 15, 175, 251, 152, 115, 107, 21, 117, 193, 41, 40, 207, 34, 99, 45, 235, 6, 159, 201, 128, 60, 155, 97, 28, 217, 26, 13, 140, 46, 190, 71, 133, 106, 202, 203, 81, 186, 190, 4, 78, 98, 32, 2, 16, 105, 106, 175, 196, 91, 153, 226, 26, 175, 180, 149, 99, 9, 223, 187, 201, 124, 134, 141, 155, 218, 241, 72, 253, 151, 192, 155, 43, 88, 47, 223, 131, 89, 212, 134, 151, 49, 24, 159, 184, 31, 137, 32, 53, 92, 111, 175, 101, 170, 19, 10, 1, 133, 192, 144, 33, 208, 215, 171, 102, 200, 42, 81, 5, 41, 4, 118, 27, 4, 248, 196, 24, 185, 51, 13, 82, 219, 146, 145, 153, 6, 87, 133, 157, 155, 202, 45, 112, 230, 0, 123, 80, 105, 27, 31, 152, 15, 171, 189, 147, 218, 55, 43, 121, 224, 120, 180, 187, 125, 112, 114, 19, 85, 207, 149, 237, 139, 85, 239, 115, 197, 163, 178, 130, 11, 110, 116, 134, 1, 205, 194, 124, 133, 249, 46, 81, 178, 6, 3, 102, 196, 231, 51, 197, 69, 97, 6, 77, 221, 114, 184, 184, 70, 115, 211, 216, 132, 138, 234, 141, 216, 92, 193, 141, 24, 35, 215, 118, 13, 52, 223, 38, 219, 171, 185, 133, 209, 151, 44, 198, 17, 66, 82, 209, 158, 200, 143, 166, 62, 144, 155, 81, 73, 175, 210, 213, 84, 131, 207, 87, 86, 114, 1, 238, 64, 167, 139, 156, 17, 73, 124, 220, 28, 212, 14, 248, 156, 78, 140, 157, 56, 1, 73, 148, 120, 219, 233, 143, 85, 94, 87, 130, 141, 37, 155, 224, 115, 137, 94, 90, 118, 92, 63, 44, 153, 184, 49, 13, 248, 253, 72, 203, 207, 67, 65, 94, 30, 98, 45, 86, 184, 92, 94, 108, 218, 76, 127, 42, 50, 163, 22, 115, 216, 124, 150, 155, 10, 19, 83, 78, 153, 233, 251, 25, 207, 220, 159, 133, 185, 185, 112, 122, 124, 240, 49, 218, 233, 202, 213, 11, 225, 170, 139, 133, 207, 220, 38, 86, 148, 253, 32, 2, 74, 197, 73, 140, 39, 4, 71, 102, 49, 114, 198, 103, 34, 150, 121, 129, 109, 84, 110, 185, 92, 245, 88, 191, 174, 28, 141, 45, 94, 90, 161, 186, 57, 158, 253, 40, 110, 24, 47, 49, 219, 153, 224, 196, 225, 68, 106, 113, 17, 82, 18, 18, 17, 75, 230, 179, 157, 190, 128, 95, 151, 44, 129, 161, 198, 9, 47, 131, 171, 105, 202, 235, 190, 218, 64, 95, 117, 11, 231, 138, 49, 39, 7, 197, 121, 185, 200, 36, 134, 62, 154, 47, 111, 161, 246, 102, 211, 134, 13, 212, 40, 115, 14, 9, 19, 220, 159, 141, 27, 161, 51, 153, 152, 2, 197, 31, 66, 124, 70, 46, 138, 198, 231, 107, 115, 211, 20, 227, 198, 202, 175, 86, 162, 170, 130, 57, 63, 185, 17, 212, 34, 237, 134, 235, 53, 228, 100, 99, 108, 126, 62, 210, 205, 86, 62, 42, 122, 136, 159, 190, 154, 219, 215, 57, 77, 139, 79, 65, 135, 221, 238, 64, 93, 75, 37, 214, 173, 220, 136, 206, 78, 15, 235, 164, 153, 110, 127, 218, 223, 87, 225, 125, 156, 51, 241, 217, 179, 241, 249, 142, 201, 166, 251, 65, 110, 14, 18, 232, 31, 97, 22, 192, 250, 96, 128, 229, 153, 245, 240, 158, 13, 100, 128, 107, 182, 80, 90, 86, 165, 87, 144, 200, 95, 177, 25, 217, 12, 147, 215, 142, 96, 181, 232, 210, 182, 37, 139, 211, 128, 46, 87, 52, 210, 167, 183, 163, 40, 109, 6, 204, 109, 113, 212, 214, 251, 177, 177, 182, 20, 107, 74, 170, 96, 239, 8, 194, 19, 22, 106, 108, 123, 103, 63, 190, 113, 76, 28, 124, 39, 88, 104, 181, 50, 102, 252, 68, 56, 153, 26, 199, 97, 183, 192, 76, 55, 130, 175, 190, 92, 133, 54, 154, 155, 202, 59, 100, 226, 204, 25, 52, 135, 117, 48, 226, 188, 9, 213, 141, 21, 88, 207, 152, 8, 46, 17, 86, 49, 199, 106, 127, 132, 37, 91, 91, 194, 249, 34, 48, 197, 36, 59, 24, 61, 215, 141, 121, 243, 230, 105, 76, 180, 48, 37, 118, 186, 134, 148, 85, 108, 192, 70, 106, 65, 77, 166, 0, 58, 189, 126, 76, 220, 123, 23, 234, 213, 234, 226, 123, 47, 46, 128, 88, 119, 18, 162, 199, 20, 32, 47, 157, 230, 206, 130, 21, 199, 169, 145, 65, 11, 203, 125, 101, 104, 94, 222, 64, 107, 17, 198, 5, 238, 224, 156, 15, 183, 111, 107, 123, 135, 227, 15, 206, 1, 11, 163, 72, 117, 229, 68, 161, 128, 249, 150, 11, 204, 249, 172, 55, 6, 30, 79, 3, 74, 203, 87, 145, 105, 167, 143, 56, 205, 120, 187, 40, 240, 218, 25, 209, 56, 128, 154, 252, 116, 100, 142, 175, 65, 97, 86, 1, 99, 107, 79, 196, 10, 67, 41, 202, 202, 190, 69, 114, 5, 133, 13, 30, 118, 136, 207, 102, 127, 73, 227, 217, 104, 69, 97, 142, 161, 105, 122, 92, 6, 5, 145, 22, 42, 171, 203, 16, 95, 8, 140, 45, 230, 90, 24, 60, 140, 107, 97, 59, 131, 65, 70, 145, 249, 182, 195, 76, 11, 154, 118, 50, 175, 27, 58, 42, 81, 179, 152, 115, 154, 36, 153, 15, 234, 45, 46, 116, 214, 146, 249, 236, 127, 213, 122, 19, 195, 248, 199, 166, 80, 43, 107, 206, 226, 58, 41, 214, 55, 29, 244, 67, 230, 26, 154, 206, 56, 1, 206, 100, 90, 92, 117, 80, 96, 23, 7, 47, 53, 175, 14, 175, 15, 165, 156, 195, 171, 214, 174, 0, 54, 87, 106, 86, 67, 177, 89, 124, 150, 220, 77, 140, 68, 71, 33, 66, 31, 227, 105, 230, 124, 182, 147, 233, 119, 228, 23, 96, 98, 90, 6, 205, 170, 249, 114, 15, 91, 32, 233, 141, 217, 241, 51, 242, 12, 175, 39, 3, 92, 183, 101, 253, 214, 96, 89, 137, 172, 40, 154, 249, 181, 203, 124, 34, 225, 161, 208, 168, 143, 122, 119, 44, 85, 29, 81, 8, 40, 4, 134, 10, 1, 245, 232, 13, 21, 146, 170, 156, 17, 133, 128, 104, 3, 101, 35, 22, 155, 76, 165, 7, 253, 210, 188, 94, 51, 90, 169, 193, 13, 146, 213, 237, 141, 82, 157, 241, 176, 198, 49, 183, 160, 215, 133, 150, 38, 77, 85, 184, 205, 165, 70, 250, 72, 5, 201, 76, 105, 28, 150, 22, 154, 67, 118, 4, 220, 1, 209, 62, 218, 108, 226, 70, 162, 95, 12, 218, 54, 69, 234, 95, 194, 79, 185, 217, 97, 229, 174, 186, 75, 215, 12, 118, 187, 204, 105, 119, 194, 229, 161, 106, 185, 27, 25, 104, 198, 104, 102, 144, 14, 179, 135, 1, 84, 186, 29, 55, 210, 207, 74, 243, 184, 29, 232, 102, 165, 91, 25, 67, 249, 167, 214, 53, 49, 111, 238, 198, 189, 74, 208, 50, 157, 247, 212, 181, 141, 145, 250, 76, 54, 26, 109, 122, 201, 156, 242, 192, 119, 80, 58, 105, 145, 74, 102, 149, 230, 226, 253, 162, 48, 150, 38, 7, 71, 137, 154, 168, 206, 214, 109, 185, 92, 49, 235, 245, 147, 185, 22, 45, 201, 143, 129, 12, 52, 121, 14, 9, 211, 199, 198, 232, 226, 13, 217, 111, 17, 47, 50, 13, 98, 213, 208, 47, 18, 198, 135, 23, 122, 201, 8, 71, 182, 217, 146, 127, 87, 230, 102, 68, 227, 216, 175, 114, 228, 34, 222, 102, 97, 248, 98, 38, 247, 18, 99, 130, 109, 40, 34, 208, 216, 122, 48, 92, 175, 135, 245, 246, 179, 165, 91, 111, 237, 207, 31, 146, 27, 55, 56, 236, 38, 135, 250, 132, 49, 83, 216, 20, 224, 6, 92, 112, 220, 246, 73, 235, 187, 165, 105, 116, 86, 48, 209, 189, 34, 96, 162, 185, 56, 131, 61, 181, 7, 60, 104, 111, 225, 134, 93, 87, 72, 245, 120, 179, 164, 107, 53, 186, 163, 248, 12, 116, 215, 244, 58, 41, 212, 10, 193, 237, 237, 254, 52, 247, 120, 123, 159, 7, 229, 25, 178, 6, 89, 57, 5, 113, 219, 150, 100, 96, 108, 3, 226, 73, 70, 119, 219, 39, 130, 109, 225, 243, 168, 197, 81, 24, 228, 32, 26, 153, 71, 53, 145, 209, 138, 35, 17, 192, 191, 107, 160, 137, 2, 30, 3, 163, 11, 51, 174, 2, 185, 141, 237, 101, 131, 3, 173, 87, 228, 17, 242, 216, 58, 25, 204, 203, 229, 227, 236, 220, 182, 131, 218, 216, 185, 169, 225, 54, 184, 68, 20, 243, 125, 17, 87, 26, 51, 53, 174, 52, 127, 39, 107, 206, 74, 69, 227, 175, 147, 147, 174, 30, 46, 10, 112, 6, 66, 98, 189, 11, 127, 18, 203, 18, 123, 31, 47, 251, 20, 173, 153, 141, 55, 58, 58, 232, 43, 62, 144, 146, 194, 215, 234, 211, 91, 251, 18, 71, 85, 174, 131, 105, 246, 60, 148, 220, 180, 48, 14, 6, 152, 189, 184, 39, 74, 162, 241, 188, 35, 149, 22, 71, 28, 179, 150, 14, 246, 167, 83, 23, 108, 13, 10, 83, 173, 126, 126, 80, 184, 155, 18, 27, 11, 179, 33, 154, 121, 177, 3, 180, 196, 169, 237, 169, 106, 237, 88, 102, 140, 29, 6, 166, 181, 107, 228, 60, 246, 52, 241, 89, 146, 197, 160, 91, 63, 118, 188, 81, 63, 105, 162, 64, 209, 232, 241, 234, 241, 38, 118, 188, 168, 215, 35, 73, 68, 216, 198, 252, 220, 1, 163, 131, 65, 198, 204, 104, 161, 111, 183, 187, 129, 134, 209, 242, 50, 237, 179, 222, 94, 139, 84, 39, 20, 2, 10, 129, 33, 64, 64, 61, 126, 67, 0, 162, 42, 98, 100, 34, 160, 111, 152, 244, 71, 40, 58, 142, 27, 123, 51, 125, 64, 185, 184, 131, 82, 238, 16, 181, 185, 154, 223, 48, 87, 57, 49, 215, 146, 181, 174, 153, 230, 208, 104, 11, 27, 26, 71, 118, 91, 219, 64, 199, 178, 152, 123, 56, 58, 214, 70, 141, 17, 243, 106, 106, 182, 96, 52, 253, 164, 239, 144, 155, 154, 100, 209, 96, 69, 204, 42, 183, 185, 173, 31, 95, 36, 103, 176, 164, 77, 138, 142, 39, 19, 78, 230, 86, 118, 122, 82, 94, 23, 219, 212, 198, 54, 109, 83, 118, 164, 109, 212, 4, 199, 198, 48, 66, 52, 239, 149, 94, 122, 168, 213, 236, 164, 214, 103, 103, 100, 36, 227, 34, 17, 50, 165, 223, 210, 5, 145, 132, 107, 5, 200, 141, 145, 93, 142, 20, 40, 95, 249, 61, 82, 157, 252, 214, 206, 135, 207, 105, 23, 132, 63, 182, 94, 199, 11, 186, 168, 149, 209, 152, 183, 240, 141, 22, 106, 165, 162, 40, 161, 151, 220, 199, 226, 163, 230, 242, 208, 236, 141, 41, 47, 34, 66, 138, 238, 229, 216, 163, 163, 225, 164, 118, 219, 192, 2, 131, 84, 127, 182, 49, 71, 102, 128, 218, 220, 1, 81, 184, 94, 43, 181, 171, 78, 6, 25, 50, 134, 177, 12, 112, 67, 213, 70, 115, 104, 209, 252, 26, 205, 100, 51, 153, 130, 67, 199, 85, 239, 163, 212, 17, 233, 199, 214, 250, 164, 234, 30, 250, 171, 157, 143, 52, 43, 130, 21, 251, 46, 152, 6, 56, 191, 252, 18, 172, 230, 59, 46, 126, 107, 113, 61, 253, 225, 228, 198, 208, 78, 77, 173, 136, 108, 252, 12, 176, 210, 218, 78, 225, 203, 246, 92, 74, 79, 55, 202, 177, 112, 95, 141, 100, 224, 98, 162, 196, 16, 94, 134, 136, 76, 7, 25, 41, 87, 167, 171, 71, 140, 123, 43, 74, 47, 78, 159, 195, 118, 226, 22, 69, 252, 52, 162, 6, 182, 131, 121, 59, 189, 52, 209, 222, 74, 61, 214, 187, 245, 236, 46, 253, 33, 190, 225, 62, 109, 222, 83, 3, 67, 33, 143, 248, 52, 111, 157, 171, 44, 185, 95, 99, 212, 125, 220, 182, 251, 91, 2, 212, 233, 227, 68, 191, 75, 74, 173, 12, 204, 161, 42, 90, 109, 75, 84, 20, 162, 236, 118, 109, 190, 244, 167, 3, 50, 119, 58, 57, 153, 60, 18, 20, 71, 204, 249, 195, 129, 186, 180, 199, 68, 251, 232, 189, 20, 107, 140, 1, 81, 214, 88, 182, 131, 207, 33, 101, 106, 62, 154, 127, 182, 135, 205, 204, 123, 191, 171, 127, 103, 44, 124, 214, 98, 248, 204, 9, 80, 210, 198, 32, 219, 216, 218, 218, 186, 85, 136, 20, 121, 199, 136, 144, 68, 195, 185, 157, 56, 71, 230, 114, 255, 170, 216, 225, 42, 190, 14, 17, 111, 79, 98, 149, 122, 157, 130, 167, 203, 213, 70, 102, 139, 166, 171, 108, 131, 28, 31, 138, 122, 35, 239, 201, 40, 62, 51, 54, 154, 203, 74, 31, 229, 1, 245, 243, 153, 235, 96, 110, 91, 107, 7, 197, 158, 20, 84, 202, 187, 84, 234, 237, 145, 34, 243, 33, 242, 59, 124, 145, 20, 21, 185, 37, 242, 119, 164, 63, 126, 10, 240, 2, 180, 172, 216, 129, 34, 131, 205, 117, 33, 134, 57, 219, 173, 204, 199, 44, 22, 186, 52, 225, 33, 227, 223, 73, 12, 248, 158, 11, 247, 127, 135, 123, 123, 57, 96, 143, 38, 191, 104, 139, 227, 60, 164, 102, 153, 47, 145, 54, 90, 22, 129, 26, 237, 157, 76, 169, 94, 74, 211, 15, 119, 127, 215, 114, 201, 224, 251, 95, 98, 118, 51, 139, 61, 11, 13, 105, 230, 77, 196, 139, 237, 150, 220, 182, 109, 252, 12, 184, 57, 39, 152, 22, 41, 210, 189, 93, 157, 31, 50, 70, 218, 36, 227, 144, 197, 114, 174, 152, 25, 161, 92, 172, 73, 100, 225, 13, 242, 121, 55, 18, 63, 190, 240, 217, 91, 154, 110, 139, 153, 183, 172, 195, 50, 30, 252, 23, 49, 115, 238, 171, 131, 145, 121, 97, 229, 250, 33, 81, 199, 251, 141, 21, 47, 108, 165, 118, 62, 32, 207, 176, 88, 65, 144, 129, 22, 234, 111, 189, 125, 181, 73, 157, 83, 8, 40, 4, 118, 13, 129, 126, 63, 199, 187, 86, 141, 186, 91, 33, 176, 251, 34, 208, 211, 98, 38, 113, 111, 36, 188, 138, 190, 2, 127, 183, 177, 255, 65, 31, 184, 239, 163, 114, 205, 46, 142, 154, 230, 173, 250, 198, 161, 31, 119, 134, 245, 65, 59, 205, 209, 232, 172, 53, 244, 133, 239, 114, 137, 244, 83, 165, 198, 38, 232, 167, 83, 55, 51, 78, 14, 23, 113, 143, 135, 78, 9, 40, 229, 255, 110, 110, 13, 87, 93, 187, 107, 185, 186, 219, 193, 240, 142, 147, 176, 248, 244, 24, 232, 191, 192, 161, 7, 176, 35, 143, 109, 79, 239, 153, 30, 46, 87, 135, 118, 21, 129, 8, 224, 219, 148, 163, 141, 228, 54, 71, 134, 242, 139, 88, 6, 136, 174, 220, 45, 92, 226, 176, 191, 214, 122, 236, 224, 16, 117, 103, 187, 178, 229, 43, 95, 83, 154, 4, 184, 91, 191, 182, 187, 106, 136, 234, 150, 98, 182, 45, 89, 123, 198, 229, 176, 188, 38, 183, 175, 127, 219, 75, 229, 170, 97, 163, 72, 85, 218, 239, 200, 151, 97, 171, 77, 21, 172, 16, 80, 8, 244, 7, 1, 245, 40, 246, 7, 37, 117, 141, 66, 64, 33, 208, 55, 2, 242, 38, 161, 161, 173, 153, 254, 209, 182, 108, 23, 82, 163, 179, 96, 245, 75, 158, 92, 93, 67, 211, 247, 205, 253, 56, 203, 205, 139, 228, 168, 172, 99, 40, 238, 166, 202, 74, 196, 182, 49, 95, 165, 166, 105, 235, 143, 252, 190, 31, 229, 15, 201, 37, 100, 81, 36, 90, 120, 32, 6, 177, 73, 237, 72, 73, 204, 102, 176, 105, 110, 109, 101, 227, 165, 225, 179, 107, 149, 136, 214, 200, 68, 109, 79, 43, 211, 160, 84, 183, 213, 195, 81, 219, 14, 247, 143, 86, 16, 176, 107, 125, 29, 222, 187, 57, 24, 154, 70, 136, 90, 237, 76, 31, 210, 25, 201, 88, 211, 22, 13, 164, 210, 222, 198, 148, 199, 229, 148, 140, 83, 35, 53, 134, 245, 205, 229, 112, 54, 27, 224, 210, 234, 27, 72, 5, 234, 218, 31, 3, 2, 250, 6, 41, 138, 126, 207, 157, 72, 99, 10, 164, 168, 80, 26, 181, 121, 1, 106, 20, 251, 120, 160, 123, 155, 27, 219, 117, 72, 220, 36, 100, 158, 184, 25, 171, 160, 172, 165, 17, 214, 42, 102, 3, 32, 183, 232, 213, 184, 181, 237, 46, 86, 95, 21, 2, 10, 1, 133, 128, 66, 96, 72, 17, 16, 21, 149, 34, 133, 128, 66, 64, 33, 176, 75, 8, 88, 28, 70, 6, 213, 138, 66, 123, 115, 35, 206, 188, 225, 44, 156, 180, 207, 105, 72, 108, 142, 99, 0, 20, 50, 192, 221, 184, 63, 97, 226, 132, 184, 239, 211, 232, 59, 83, 64, 253, 88, 228, 187, 126, 54, 252, 25, 102, 42, 172, 244, 159, 170, 54, 213, 226, 209, 55, 31, 199, 43, 215, 189, 128, 196, 140, 20, 52, 85, 49, 5, 12, 11, 27, 172, 105, 248, 54, 245, 236, 194, 23, 61, 32, 12, 51, 111, 100, 37, 160, 161, 172, 25, 39, 255, 225, 28, 156, 49, 243, 108, 154, 215, 218, 53, 83, 235, 136, 185, 228, 246, 253, 219, 254, 123, 247, 38, 200, 57, 161, 239, 176, 98, 142, 212, 144, 9, 141, 206, 54, 60, 246, 209, 211, 120, 254, 178, 71, 145, 152, 150, 68, 12, 24, 64, 70, 209, 0, 16, 160, 57, 105, 114, 44, 218, 235, 218, 112, 214, 253, 87, 226, 231, 153, 199, 193, 204, 112, 173, 226, 105, 44, 88, 111, 63, 38, 219, 127, 151, 138, 186, 31, 219, 254, 111, 137, 200, 108, 101, 158, 240, 42, 91, 41, 30, 124, 245, 30, 252, 247, 79, 159, 34, 129, 1, 149, 154, 171, 232, 247, 167, 232, 39, 133, 64, 116, 108, 52, 77, 199, 59, 112, 208, 185, 115, 113, 209, 105, 151, 33, 173, 61, 29, 65, 147, 238, 214, 210, 237, 181, 182, 77, 159, 34, 243, 33, 242, 59, 114, 114, 135, 239, 34, 42, 161, 101, 108, 128, 121, 153, 95, 93, 254, 26, 238, 186, 229, 78, 196, 50, 149, 148, 33, 198, 11, 15, 3, 70, 41, 82, 8, 40, 4, 20, 2, 10, 129, 225, 67, 64, 49, 192, 195, 135, 173, 42, 89, 33, 48, 98, 16, 48, 25, 233, 223, 104, 49, 49, 54, 45, 48, 165, 232, 151, 152, 55, 126, 86, 111, 251, 195, 93, 196, 132, 76, 160, 103, 131, 198, 0, 39, 199, 88, 193, 16, 38, 146, 86, 149, 90, 153, 93, 44, 118, 151, 111, 215, 237, 92, 29, 81, 233, 44, 169, 25, 227, 15, 191, 10, 179, 25, 125, 121, 120, 40, 128, 168, 182, 229, 120, 158, 133, 39, 58, 237, 26, 6, 195, 83, 207, 110, 88, 106, 152, 195, 117, 56, 18, 56, 87, 219, 48, 107, 238, 31, 176, 111, 156, 4, 23, 26, 122, 154, 138, 28, 120, 182, 188, 139, 255, 226, 83, 36, 209, 231, 185, 153, 255, 126, 12, 194, 154, 161, 239, 233, 238, 91, 162, 217, 65, 103, 3, 50, 192, 5, 5, 39, 227, 224, 61, 142, 212, 2, 97, 13, 71, 111, 211, 236, 165, 88, 150, 101, 192, 71, 107, 249, 76, 51, 184, 222, 192, 66, 91, 13, 71, 139, 84, 153, 10, 1, 133, 128, 66, 96, 247, 70, 64, 49, 192, 187, 247, 248, 170, 222, 41, 4, 190, 23, 4, 196, 36, 208, 239, 210, 3, 100, 121, 60, 109, 104, 96, 144, 38, 59, 55, 142, 65, 6, 220, 234, 195, 88, 112, 64, 109, 19, 222, 197, 16, 234, 68, 91, 139, 238, 91, 235, 255, 129, 115, 237, 110, 219, 120, 93, 93, 187, 53, 183, 46, 3, 134, 53, 123, 60, 176, 48, 127, 228, 208, 121, 233, 50, 249, 20, 53, 149, 113, 241, 29, 104, 96, 14, 86, 33, 49, 199, 140, 104, 45, 183, 109, 143, 250, 214, 19, 2, 50, 23, 101, 164, 180, 84, 75, 252, 221, 206, 220, 163, 173, 12, 246, 38, 105, 77, 194, 10, 247, 158, 110, 27, 224, 49, 70, 203, 14, 216, 152, 135, 180, 153, 249, 141, 245, 72, 228, 126, 70, 178, 214, 105, 232, 106, 25, 96, 163, 212, 229, 131, 64, 64, 242, 105, 11, 185, 59, 218, 208, 194, 200, 208, 93, 46, 55, 131, 58, 233, 49, 208, 7, 81, 220, 14, 183, 72, 0, 49, 7, 3, 212, 213, 53, 118, 50, 59, 64, 248, 29, 210, 223, 136, 244, 59, 148, 166, 14, 40, 4, 20, 2, 10, 1, 133, 64, 127, 17, 80, 12, 112, 127, 145, 82, 215, 41, 4, 20, 2, 189, 34, 224, 117, 49, 229, 10, 115, 196, 10, 189, 247, 239, 127, 163, 122, 209, 103, 176, 48, 226, 101, 72, 184, 179, 33, 34, 209, 158, 69, 197, 52, 48, 255, 236, 55, 44, 209, 136, 230, 70, 157, 9, 20, 211, 194, 31, 154, 34, 27, 229, 230, 250, 122, 173, 41, 255, 186, 243, 46, 212, 230, 231, 195, 192, 212, 55, 67, 153, 18, 41, 68, 31, 107, 171, 205, 139, 181, 235, 191, 212, 234, 105, 110, 110, 215, 204, 113, 127, 232, 254, 255, 84, 234, 143, 152, 202, 187, 90, 244, 52, 100, 111, 255, 245, 111, 216, 16, 67, 179, 83, 50, 58, 67, 57, 141, 36, 130, 187, 205, 225, 195, 138, 21, 37, 26, 52, 45, 173, 122, 74, 162, 31, 195, 92, 253, 169, 140, 213, 143, 161, 157, 158, 176, 80, 239, 243, 119, 63, 192, 77, 140, 62, 31, 223, 216, 138, 80, 56, 138, 254, 174, 182, 79, 94, 141, 126, 191, 1, 241, 241, 204, 131, 93, 182, 2, 95, 109, 100, 132, 97, 230, 74, 238, 100, 46, 115, 69, 10, 1, 133, 128, 66, 64, 33, 48, 188, 8, 68, 4, 226, 195, 91, 139, 42, 93, 33, 160, 16, 216, 237, 17, 48, 82, 147, 102, 182, 218, 225, 19, 102, 120, 152, 41, 33, 33, 22, 205, 205, 109, 63, 46, 147, 210, 176, 42, 214, 206, 20, 42, 254, 182, 182, 254, 102, 41, 26, 52, 82, 54, 187, 21, 94, 230, 28, 86, 52, 56, 4, 236, 76, 75, 228, 233, 28, 254, 185, 26, 21, 229, 68, 39, 83, 70, 41, 250, 105, 34, 32, 105, 196, 92, 124, 158, 135, 155, 18, 105, 138, 223, 234, 233, 100, 190, 232, 31, 220, 159, 99, 184, 187, 170, 202, 87, 8, 40, 4, 20, 2, 63, 56, 2, 138, 1, 254, 193, 135, 64, 53, 64, 33, 176, 27, 32, 16, 102, 254, 164, 39, 73, 153, 153, 136, 101, 158, 80, 163, 152, 15, 202, 241, 33, 36, 3, 211, 132, 184, 60, 45, 168, 170, 104, 134, 137, 12, 119, 192, 255, 227, 218, 44, 138, 16, 32, 200, 54, 37, 102, 103, 35, 222, 102, 163, 201, 246, 80, 234, 21, 245, 224, 75, 38, 6, 225, 233, 116, 181, 162, 170, 178, 9, 38, 230, 92, 14, 108, 53, 175, 29, 66, 160, 119, 243, 162, 12, 52, 99, 21, 173, 125, 106, 110, 46, 98, 152, 179, 122, 88, 200, 192, 156, 203, 109, 205, 104, 96, 176, 45, 53, 78, 195, 130, 240, 176, 23, 26, 121, 173, 197, 166, 164, 32, 62, 49, 1, 150, 46, 70, 173, 26, 194, 119, 154, 188, 30, 68, 161, 44, 185, 203, 43, 43, 107, 181, 116, 61, 202, 79, 124, 216, 135, 85, 85, 160, 16, 80, 8, 40, 4, 52, 247, 188, 161, 221, 161, 41, 80, 21, 2, 10, 129, 145, 139, 192, 247, 36, 82, 251, 49, 111, 18, 35, 204, 213, 112, 79, 2, 241, 187, 14, 42, 127, 193, 65, 195, 252, 189, 205, 161, 239, 233, 153, 24, 52, 16, 234, 198, 190, 17, 136, 112, 193, 125, 95, 181, 203, 103, 191, 167, 106, 118, 185, 157, 170, 0, 133, 128, 66, 64, 33, 176, 59, 32, 160, 150, 230, 221, 97, 20, 85, 31, 20, 2, 63, 34, 4, 12, 100, 204, 36, 175, 170, 104, 63, 135, 86, 186, 198, 215, 21, 115, 255, 138, 31, 103, 232, 71, 206, 248, 9, 19, 44, 12, 214, 112, 96, 96, 8, 99, 160, 152, 223, 93, 159, 244, 195, 53, 78, 17, 230, 58, 24, 162, 21, 196, 208, 62, 4, 187, 222, 105, 85, 194, 128, 17, 208, 158, 101, 121, 166, 135, 252, 157, 38, 77, 145, 52, 110, 244, 65, 23, 117, 176, 34, 133, 128, 66, 64, 33, 160, 16, 248, 94, 16, 80, 12, 240, 247, 2, 179, 170, 68, 33, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 126, 104, 4, 152, 65, 83, 145, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 118, 127, 4, 20, 3, 188, 251, 143, 177, 234, 161, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 16, 1, 197, 0, 171, 105, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 35, 2, 1, 197, 0, 143, 136, 97, 86, 157, 84, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 197, 0, 171, 57, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 35, 2, 1, 197, 0, 143, 136, 97, 86, 157, 84, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 197, 0, 171, 57, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 35, 2, 1, 197, 0, 143, 136, 97, 86, 157, 84, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 197, 0, 171, 57, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 35, 2, 1, 197, 0, 143, 136, 97, 86, 157, 84, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 197, 0, 171, 57, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 35, 2, 1, 197, 0, 143, 136, 97, 86, 157, 84, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 197, 0, 171, 57, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 35, 2, 1, 197, 0, 143, 136, 97, 86, 157, 84, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 197, 0, 171, 57, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 35, 2, 1, 197, 0, 143, 136, 97, 86, 157, 84, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 197, 0, 171, 57, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 35, 2, 1, 197, 0, 143, 136, 97, 86, 157, 84, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 197, 0, 171, 57, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 35, 2, 1, 197, 0, 143, 136, 97, 86, 157, 84, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 197, 0, 171, 57, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 35, 2, 1, 197, 0, 143, 136, 97, 86, 157, 84, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 197, 0, 171, 57, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 35, 2, 1, 197, 0, 143, 136, 97, 86, 157, 84, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 197, 0, 171, 57, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 35, 2, 1, 197, 0, 143, 136, 97, 86, 157, 84, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 197, 0, 171, 57, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 35, 2, 1, 197, 0, 143, 136, 97, 86, 157, 84, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 197, 0, 171, 57, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 35, 2, 1, 197, 0, 143, 136, 97, 86, 157, 84, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 197, 0, 171, 57, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 35, 2, 1, 197, 0, 143, 136, 97, 86, 157, 84, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 197, 0, 171, 57, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 35, 2, 1, 197, 0, 143, 136, 97, 86, 157, 84, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 197, 0, 171, 57, 160, 16, 80, 8, 40, 4, 20, 2, 10, 1, 133, 128, 66, 64, 33, 160, 16, 80, 8, 40, 4, 20, 2, 35, 2, 129, 255, 111, 191, 142, 9, 0, 0, 0, 16, 132, 245, 111, 77, 16, 22, 193, 233, 163, 3, 188, 168, 89, 72, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 112, 128, 109, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 22, 2, 14, 240, 162, 102, 33, 9, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 192, 1, 182, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 88, 8, 56, 192, 139, 154, 133, 36, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 7, 216, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 96, 33, 224, 0, 47, 106, 22, 146, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 28, 96, 27, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 129, 133, 128, 3, 188, 168, 89, 72, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 112]);
fileData1.push.apply(fileData1, [128, 109, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 22, 2, 14, 240, 162, 102, 33, 9, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 192, 1, 182, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 88, 8, 56, 192, 139, 154, 133, 36, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 7, 216, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 96, 33, 224, 0, 47, 106, 22, 146, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 28, 96, 27, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 129, 133, 128, 3, 188, 168, 89, 72, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 112, 128, 109, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 22, 2, 14, 240, 162, 102, 33, 9, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 192, 1, 182, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 88, 8, 56, 192, 139, 154, 133, 36, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 7, 216, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 96, 33, 224, 0, 47, 106, 22, 146, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 28, 96, 27, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 129, 133, 128, 3, 188, 168, 89, 72, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 112, 128, 109, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 22, 2, 14, 240, 162, 102, 33, 9, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 192, 1, 182, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 88, 8, 56, 192, 139, 154, 133, 36, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 7, 216, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 96, 33, 224, 0, 47, 106, 22, 146, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 28, 96, 27, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 129, 133, 128, 3, 188, 168, 89, 72, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 112, 128, 109, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 22, 2, 14, 240, 162, 102, 33, 9, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 192, 1, 182, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 88, 8, 56, 192, 139, 154, 133, 36, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 7, 216, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 96, 33, 224, 0, 47, 106, 22, 146, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 28, 96, 27, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 129, 133, 128, 3, 188, 168, 89, 72, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 112, 128, 109, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 22, 2, 14, 240, 162, 102, 33, 9, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 192, 1, 182, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 88, 8, 56, 192, 139, 154, 133, 36, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 7, 216, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 96, 33, 224, 0, 47, 106, 22, 146, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 28, 96, 27, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 129, 133, 128, 3, 188, 168, 89, 72, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 112, 128, 109, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 22, 2, 14, 240, 162, 102, 33, 9, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 192, 1, 182, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 88, 8, 56, 192, 139, 154, 133, 36, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 7, 216, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 96, 33, 224, 0, 47, 106, 22, 146, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 28, 96, 27, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 129, 133, 128, 3, 188, 168, 89, 72, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 112, 128, 109, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 22, 2, 14, 240, 162, 102, 33, 9, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 192, 1, 182, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 88, 8, 56, 192, 139, 154, 133, 36, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 7, 216, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 96, 33, 224, 0, 47, 106, 22, 146, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 28, 96, 27, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 129, 133, 128, 3, 188, 168, 89, 72, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 112, 128, 109, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 22, 2, 14, 240, 162, 102, 33, 9, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 192, 1, 182, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 88, 8, 56, 192, 139, 154, 133, 36, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 7, 216, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 96, 33, 224, 0, 47, 106, 22, 146, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 28, 96, 27, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 129, 133, 128, 3, 188, 168, 89, 72, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 112, 128, 109, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 22, 2, 14, 240, 162, 102, 33, 9, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 192, 1, 182, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 88, 8, 56, 192, 139, 154, 133, 36, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 7, 216, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 96, 33, 224, 0, 47, 106, 22, 146, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 28, 96, 27, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 129, 133, 128, 3, 188, 168, 89, 72, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 112, 128, 109, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 22, 2, 14, 240, 162, 102, 33, 9, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 192, 1, 182, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 88, 8, 56, 192, 139, 154, 133, 36, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 7, 216, 6, 8, 16, 32, 64, 128, 0, 1, 2, 4, 8, 16, 32, 64, 96, 33, 224, 0, 47, 106, 22, 146, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 1, 2, 4, 2, 11, 253, 233, 162, 174, 118, 236, 6, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130]);
Module['FS_createDataFile']('/', 'title.png', fileData1, true, true, false);
var fileData2 = [];
fileData2.push.apply(fileData2, [137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 96, 0, 0, 0, 96, 8, 3, 0, 0, 0, 213, 70, 135, 10, 0, 0, 0, 51, 80, 76, 84, 69, 0, 0, 0, 220, 84, 158, 151, 37, 130, 95, 44, 131, 161, 219, 232, 155, 208, 141, 22, 135, 136, 76, 76, 76, 51, 51, 51, 246, 219, 186, 219, 96, 76, 177, 51, 83, 94, 32, 82, 116, 201, 158, 49, 124, 135, 39, 24, 84, 26, 16, 22, 179, 52, 34, 170, 0, 0, 0, 17, 116, 82, 78, 83, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 16, 21, 64, 161, 0, 0, 2, 245, 73, 68, 65, 84, 104, 129, 237, 153, 217, 146, 227, 32, 12, 69, 9, 133, 139, 206, 68, 6, 253, 255, 215, 142, 22, 48, 216, 153, 158, 37, 18, 243, 100, 85, 151, 151, 135, 190, 7, 73, 32, 100, 18, 194, 109, 183, 221, 118, 219, 109, 183, 253, 163, 33, 46, 6, 196, 148, 234, 74, 8, 70, 168, 100, 105, 21, 3, 35, 34, 57, 64, 132, 148, 86, 233, 171, 177, 23, 235, 0, 149, 245, 87, 196, 233, 228, 0, 155, 55, 224, 20, 32, 185, 118, 194, 230, 162, 223, 196, 117, 252, 141, 211, 1, 219, 86, 200, 140, 250, 81, 52, 91, 124, 154, 39, 45, 15, 187, 154, 141, 112, 10, 255, 241, 34, 128, 125, 99, 43, 155, 41, 82, 35, 181, 67, 95, 8, 2, 40, 91, 121, 150, 71, 177, 16, 234, 164, 63, 0, 200, 105, 216, 21, 240, 124, 148, 221, 199, 129, 231, 97, 146, 244, 14, 40, 54, 192, 60, 254, 47, 178, 76, 127, 153, 8, 180, 162, 21, 192, 136, 207, 1, 115, 128, 134, 190, 0, 234, 4, 248, 124, 26, 197, 147, 254, 75, 244, 233, 42, 128, 66, 147, 40, 23, 27, 128, 214, 192, 117, 252, 194, 224, 36, 32, 1, 114, 46, 166, 165, 134, 128, 8, 100, 29, 32, 241, 225, 251, 67, 1, 193, 10, 128, 8, 32, 4, 2, 125, 77, 38, 128, 32, 128, 16, 136, 241, 121, 132, 128, 125, 80, 123, 204, 134, 10, 200, 25, 197, 137, 207, 115, 60, 244, 223, 141, 1, 116, 179, 2, 190, 39, 16, 128, 215, 91, 206, 155, 1, 240, 27, 23, 2, 1, 128, 210, 139, 57, 88, 234, 245, 175, 1, 32, 181, 148, 1, 21, 11, 154, 0, 92, 139, 226, 85, 93, 245, 9, 80, 192, 236, 65, 120, 27, 60, 104, 124, 26, 128, 60, 40, 190, 0, 110, 45, 26, 129, 70, 207, 222, 228, 96, 218, 209, 90, 200, 69, 250, 180, 43, 4, 41, 219, 64, 33, 170, 150, 89, 52, 121, 112, 222, 116, 82, 194, 242, 131, 238, 165, 86, 219, 52, 101, 229, 40, 81, 57, 57, 144, 120, 250, 224, 139, 0, 193, 214, 85, 32, 21, 58, 169, 168, 147, 27, 162, 79, 251, 13, 229, 128, 41, 6, 117, 5, 196, 209, 16, 117, 74, 146, 38, 6, 43, 175, 51, 51, 32, 226, 21, 80, 49, 137, 79, 169, 246, 249, 100, 2, 204, 145, 233, 207, 66, 209, 238, 200, 3, 0, 115, 83, 71, 207, 123, 125, 233, 122, 168, 232, 1, 136, 87, 0, 233, 247, 6, 210, 174, 31, 96, 94, 100, 93, 127, 119, 7, 192, 52, 63, 95, 175, 164, 250, 224, 3, 136, 173, 84, 244, 8, 241, 178, 232, 69, 207, 227, 179, 19, 166, 90, 77, 154, 212, 181, 143, 234, 77, 239, 102, 253, 6, 208, 68, 240, 53, 225, 108, 118, 253, 195, 3, 232, 152, 116, 140, 222, 69, 159, 68, 47, 251, 89, 117, 27, 251, 25, 0, 23, 128, 35, 97, 138, 209, 164, 239, 7, 32, 66, 212, 12, 64, 235, 33, 125, 1, 188, 227, 192, 53, 13, 30, 11, 108, 70, 192, 85, 223, 153, 112, 237, 30, 221, 1, 136, 239, 0, 79, 194, 81, 27, 68, 119, 108, 252, 75, 244, 79, 95, 204, 78, 0, 128, 41, 46, 11, 8, 48, 239, 201, 11, 92, 0, 104, 103, 45, 245, 45, 72, 110, 128, 111, 244, 125, 230, 209, 17, 160, 115, 103, 234, 10, 104, 167, 81, 67, 219, 115, 169, 81, 129, 235, 25, 96, 197, 24, 71, 176, 124, 234, 29, 98, 79, 177, 234, 247, 208, 212, 200, 175, 118, 125, 1, 104, 71, 81, 169, 104, 31, 77, 118, 235, 43, 28, 0, 250, 121, 3, 216, 87, 115, 141, 17, 157, 55, 77, 241, 225, 216, 240, 91, 205, 112, 221, 113, 112, 234, 131, 120, 252, 71, 237, 118, 210, 159, 139, 245, 232, 232, 92, 119, 131, 147, 15, 253, 155, 19, 192, 17, 208, 125, 208, 62, 145, 96, 190, 234, 7, 161, 29, 31, 176, 55, 222, 250, 189, 57, 210, 231, 37, 128, 240, 95, 0, 225, 6, 252, 9, 48, 114, 176, 128, 112, 1, 240, 89, 139, 47, 64, 215, 114, 26, 0, 111, 66, 3, 36, 156, 126, 145, 90, 0, 120, 200, 176, 163, 158, 251, 58, 3, 250, 121, 178, 194, 228, 237, 47, 254, 237, 39, 64, 175, 114, 93, 117, 101, 147, 3, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130]);
Module['FS_createDataFile']('/', 'player.png', fileData2, true, true, false);

    }
    if (Module['calledRun']) {
      runWithFS();
    } else {
      if (!Module['preRun']) Module['preRun'] = [];
      Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
    }
  
   }
   loadPackage({"files": []});
  
  })();
  

    // All the pre-js content up to here must remain later on, we need to run
    // it.
    var necessaryPreJSTasks = Module['preRun'].slice();
  
    if (!Module['preRun']) throw 'Module.preRun should exist because file support used it; did a pre-js delete it?';
    necessaryPreJSTasks.forEach(function(task) {
      if (Module['preRun'].indexOf(task) < 0) throw 'All preRun tasks that exist before user pre-js code should remain after; did you replace Module or modify Module.preRun?';
    });
  

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}



// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require('path').dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }




read_ = function shell_read(filename, binary) {
  if (!nodeFS) nodeFS = require('fs');
  if (!nodePath) nodePath = require('path');
  filename = nodePath['normalize'](filename);
  return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
};

readBinary = function readBinary(filename) {
  var ret = read_(filename, true);
  if (!ret.buffer) {
    ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
};



  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };



} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr !== 'undefined' ? printErr : print);
  }


} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {




  read_ = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';






// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}




// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {

  // If the type reflection proposal is available, use the new
  // "WebAssembly.Function" constructor.
  // Otherwise, construct a minimal wasm module importing the JS function and
  // re-exporting it.
  if (typeof WebAssembly.Function === "function") {
    var typeNames = {
      'i': 'i32',
      'j': 'i64',
      'f': 'f32',
      'd': 'f64'
    };
    var type = {
      parameters: [],
      results: sig[0] == 'v' ? [] : [typeNames[sig[0]]]
    };
    for (var i = 1; i < sig.length; ++i) {
      type.parameters.push(typeNames[sig[i]]);
    }
    return new WebAssembly.Function(type, func);
  }

  // The module is static, with the exception of the type section, which is
  // generated based on the signature passed in.
  var typeSection = [
    0x01, // id: section,
    0x00, // length: 0 (placeholder)
    0x01, // count: 1
    0x60, // form: func
  ];
  var sigRet = sig.slice(0, 1);
  var sigParam = sig.slice(1);
  var typeCodes = {
    'i': 0x7f, // i32
    'j': 0x7e, // i64
    'f': 0x7d, // f32
    'd': 0x7c, // f64
  };

  // Parameters, length + signatures
  typeSection.push(sigParam.length);
  for (var i = 0; i < sigParam.length; ++i) {
    typeSection.push(typeCodes[sigParam[i]]);
  }

  // Return values, length + signatures
  // With no multi-return in MVP, either 0 (void) or 1 (anything else)
  if (sigRet == 'v') {
    typeSection.push(0x00);
  } else {
    typeSection = typeSection.concat([0x01, typeCodes[sigRet]]);
  }

  // Write the overall length of the type section back into the section header
  // (excepting the 2 bytes for the section id and length)
  typeSection[1] = typeSection.length - 2;

  // Rest of the module is static
  var bytes = new Uint8Array([
    0x00, 0x61, 0x73, 0x6d, // magic ("\0asm")
    0x01, 0x00, 0x00, 0x00, // version: 1
  ].concat(typeSection, [
    0x02, 0x07, // import section
      // (import "e" "f" (func 0 (type 0)))
      0x01, 0x01, 0x65, 0x01, 0x66, 0x00, 0x00,
    0x07, 0x05, // export section
      // (export "f" (func 0 (type 0)))
      0x01, 0x01, 0x66, 0x00, 0x00,
  ]));

   // We can compile this wasm module synchronously because it is very small.
  // This accepts an import (at "e.f"), that it reroutes to an export (at "f")
  var module = new WebAssembly.Module(bytes);
  var instance = new WebAssembly.Instance(module, {
    'e': {
      'f': func
    }
  });
  var wrappedFunc = instance.exports['f'];
  return wrappedFunc;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  var table = wasmTable;

  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    for (var i = 0; i < table.length; i++) {
      var item = table.get(i);
      // Ignore null values.
      if (item) {
        functionsInTableMap.set(item, i);
      }
    }
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.


  var ret;
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    ret = freeTableIndexes.pop();
  } else {
    ret = table.length;
    // Grow the table
    try {
      table.grow(1);
    } catch (err) {
      if (!(err instanceof RangeError)) {
        throw err;
      }
      throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
    }
  }

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    table.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction');
    var wrapped = convertJsFunctionToWasm(func, sig);
    table.set(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunctionWasm(index) {
  functionsInTableMap.delete(wasmTable.get(index));
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

function removeFunction(index) {
  removeFunctionWasm(index);
}









function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });


if (typeof WebAssembly !== 'object') {
  abort('no native wasm support detected');
}




// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
  if (noSafe) {
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
  } else {
    switch(type) {
      case 'i1': SAFE_HEAP_STORE(((ptr)|0), ((value)|0), 1); break;
      case 'i8': SAFE_HEAP_STORE(((ptr)|0), ((value)|0), 1); break;
      case 'i16': SAFE_HEAP_STORE(((ptr)|0), ((value)|0), 2); break;
      case 'i32': SAFE_HEAP_STORE(((ptr)|0), ((value)|0), 4); break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],SAFE_HEAP_STORE(((ptr)|0), ((tempI64[0])|0), 4),SAFE_HEAP_STORE((((ptr)+(4))|0), ((tempI64[1])|0), 4)); break;
      case 'float': SAFE_HEAP_STORE_D(((ptr)|0), Math_fround(value), 4); break;
      case 'double': SAFE_HEAP_STORE_D(((ptr)|0), (+(value)), 8); break;
      default: abort('invalid type for setValue: ' + type);
    }
  }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
  if (noSafe) {
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  } else {
    switch(type) {
      case 'i1': return ((SAFE_HEAP_LOAD(((ptr)|0), 1, 0))|0);
      case 'i8': return ((SAFE_HEAP_LOAD(((ptr)|0), 1, 0))|0);
      case 'i16': return ((SAFE_HEAP_LOAD(((ptr)|0), 2, 0))|0);
      case 'i32': return ((SAFE_HEAP_LOAD(((ptr)|0), 4, 0))|0);
      case 'i64': return ((SAFE_HEAP_LOAD(((ptr)|0), 8, 0))|0);
      case 'float': return Math_fround(SAFE_HEAP_LOAD_D(((ptr)|0), 4, 0));
      case 'double': return (+(SAFE_HEAP_LOAD_D(((ptr)|0), 8, 0)));
      default: abort('invalid type for getValue: ' + type);
    }
  }
  return null;
}


/** @param {number|boolean=} isFloat */
function getSafeHeapType(bytes, isFloat) {
  switch (bytes) {
    case 1: return 'i8';
    case 2: return 'i16';
    case 4: return isFloat ? 'float' : 'i32';
    case 8: return 'double';
    default: assert(0);
  }
}


/** @param {number|boolean=} isFloat */
function SAFE_HEAP_STORE(dest, value, bytes, isFloat) {
  var brk = _sbrk() >>> 0;
  if (dest <= 0) abort('segmentation fault storing ' + bytes + ' bytes to address ' + dest);
  if (dest % bytes !== 0) abort('alignment error storing to address ' + dest + ', which was expected to be aligned to a multiple of ' + bytes);
  if (dest + bytes > brk) abort('segmentation fault, exceeded the top of the available dynamic heap when storing ' + bytes + ' bytes to address ' + dest + '. DYNAMICTOP=' + brk);
  assert(brk >= STACK_BASE); // sbrk-managed memory must be above the stack
  assert(brk <= HEAP8.length);
  setValue(dest, value, getSafeHeapType(bytes, isFloat), 1);
}
function SAFE_HEAP_STORE_D(dest, value, bytes) {
  SAFE_HEAP_STORE(dest, value, bytes, true);
}

/** @param {number|boolean=} isFloat */
function SAFE_HEAP_LOAD(dest, bytes, unsigned, isFloat) {
  var brk = _sbrk() >>> 0;
  if (dest <= 0) abort('segmentation fault loading ' + bytes + ' bytes from address ' + dest);
  if (dest % bytes !== 0) abort('alignment error loading from address ' + dest + ', which was expected to be aligned to a multiple of ' + bytes);
  if (dest + bytes > brk) abort('segmentation fault, exceeded the top of the available dynamic heap when loading ' + bytes + ' bytes from address ' + dest + '. DYNAMICTOP=' + brk);
  assert(brk >= STACK_BASE); // sbrk-managed memory must be above the stack
  assert(brk <= HEAP8.length);
  var type = getSafeHeapType(bytes, isFloat);
  var ret = getValue(dest, type, 1);
  if (unsigned) ret = unSign(ret, parseInt(type.substr(1), 10));
  return ret;
}
function SAFE_HEAP_LOAD_D(dest, bytes, unsigned) {
  return SAFE_HEAP_LOAD(dest, bytes, unsigned, true);
}

function SAFE_FT_MASK(value, mask) {
  var ret = value & mask;
  if (ret !== value) {
    abort('Function table mask error: function pointer is ' + value + ' which is masked by ' + mask + ', the likely cause of this is that the function pointer is being called by the wrong type.');
  }
  return ret;
}

function segfault() {
  abort('segmentation fault');
}
function alignfault() {
  abort('alignment fault');
}
function ftfault() {
  abort('Function table mask error');
}




// Wasm globals

var wasmMemory;
var wasmTable;


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((Uint8Array|Array<number>), number)} */
function allocate(slab, allocator) {
  var ret;
  assert(typeof allocator === 'number', 'allocate no longer takes a type argument')
  assert(typeof slab !== 'number', 'allocate no longer takes a number as arg0')

  if (allocator == ALLOC_STACK) {
    ret = stackAlloc(slab.length);
  } else {
    ret = _malloc(slab.length);
  }

  if (slab.subarray || slab.slice) {
    HEAPU8.set(/** @type {!Uint8Array} */(slab), ret);
  } else {
    HEAPU8.set(new Uint8Array(slab), ret);
  }
  return ret;
}




// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}





// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = ((SAFE_HEAP_LOAD(((ptr++)|0), 1, 1))>>>0);
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = ((SAFE_HEAP_LOAD((((ptr)+(i*2))|0), 2, 0))|0);
      if (codeUnit == 0 || i == maxBytesToRead / 2) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    SAFE_HEAP_STORE(((outPtr)|0), ((codeUnit)|0), 2);
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  SAFE_HEAP_STORE(((outPtr)|0), ((0)|0), 2);
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = ((SAFE_HEAP_LOAD((((ptr)+(i*4))|0), 4, 0))|0);
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    SAFE_HEAP_STORE(((outPtr)|0), ((codeUnit)|0), 4);
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  SAFE_HEAP_STORE(((outPtr)|0), ((0)|0), 4);
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    SAFE_HEAP_STORE(((buffer++)|0), ((str.charCodeAt(i))|0), 1);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) SAFE_HEAP_STORE(((buffer)|0), ((0)|0), 1);
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STACK_BASE = 5287216,
    STACKTOP = STACK_BASE,
    STACK_MAX = 44336;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 67108864;if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) Object.defineProperty(Module, 'INITIAL_MEMORY', { configurable: true, get: function() { abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });

assert(INITIAL_INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');


// In non-standalone/normal mode, we create the memory here.



// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE
      ,
      'maximum': INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE
    });
  }


if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_INITIAL_MEMORY % WASM_PAGE_SIZE === 0);
updateGlobalBufferAndViews(buffer);










// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  // The stack grows downwards
  HEAPU32[(STACK_MAX >> 2)+1] = 0x2135467;
  HEAPU32[(STACK_MAX >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2)+1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)+2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}





// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}



var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}




// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  var e = new WebAssembly.RuntimeError(what);

  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

var memoryInitializer = null;











function hasPrefix(str, prefix) {
  return String.prototype.startsWith ?
      str.startsWith(prefix) :
      str.indexOf(prefix) === 0;
}

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return hasPrefix(filename, dataURIPrefix);
}

var fileURIPrefix = "file://";

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return hasPrefix(filename, fileURIPrefix);
}



function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    assert(!runtimeExited, 'native function `' + displayName + '` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}


var wasmBinaryFile = 'loopman.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
  try {
    if (wasmBinary) {
      return new Uint8Array(wasmBinary);
    }

    if (readBinary) {
      return readBinary(wasmBinaryFile);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, and have the Fetch api, use that;
  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function'
      // Let's not use fetch to get objects over file:// as it's most likely Cordova which doesn't support fetch for file://
      && !isFileURI(wasmBinaryFile)
      ) {
    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
      if (!response['ok']) {
        throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response['arrayBuffer']();
    }).catch(function () {
      return getBinary();
    });
  }
  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(getBinary);
}



// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;




    Module['asm'] = exports;

    wasmTable = Module['asm']['__indirect_function_table'];
    assert(wasmTable, "table not found in wasm exports");


    removeRunDependency('wasm-instantiate');
  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');


  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }


  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);


      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
        !isFileURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiatedSource, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            return instantiateArrayBuffer(receiveInstantiatedSource);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiatedSource);
    }
  }
  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};





// {{PRE_LIBRARY}}


  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          var Browser_setImmediate_messageHandler = function(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = /** @type{function(function(): ?, ...?): number} */(function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          })
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  var _emscripten_get_now;if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else _emscripten_get_now = function() { return performance.now(); }
  ;
  function setMainLoop(browserIterationFunc, fps, simulateInfiniteLoop, arg, noSetTiming) {
      noExitRuntime = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = browserIterationFunc;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
  
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          warnOnce('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'unwind';
      }
    }
  var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function() {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function() {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          setMainLoop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function() {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function(func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else if (e == 'unwind') {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) err('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function() {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
  
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function(canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false,
            majorVersion: (typeof WebGL2RenderingContext !== 'undefined') ? 2 : 1,
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          // This check of existence of GL is here to satisfy Closure compiler, which yells if variable GL is referenced below but GL object is not
          // actually compiled in because application is not doing any GL operations. TODO: Ideally if GL is not being used, this function
          // Browser.createContext() should not even be emitted.
          if (typeof GL !== 'undefined') {
            contextHandle = GL.createContext(canvas, contextAttributes);
            if (contextHandle) {
              ctx = GL.getContext(contextHandle).GLctx;
            }
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function(canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function(lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = Browser.exitFullscreen;
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) {
              Browser.setFullscreenCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          } else {
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
  
            if (Browser.resizeCanvas) {
              Browser.setWindowedCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        canvasContainer.requestFullscreen();
      },requestFullScreen:function() {
        abort('Module.requestFullScreen has been replaced by Module.requestFullscreen (without a capital S)');
      },exitFullscreen:function() {
        // This is workaround for chrome. Trying to exit from fullscreen
        // not in fullscreen state will cause "TypeError: Document not active"
        // in chrome. See https://github.com/emscripten-core/emscripten/pull/8236
        if (!Browser.isFullscreen) {
          return false;
        }
  
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['msExitFullscreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
        return true;
      },nextRAF:0,fakeRequestAnimationFrame:function(func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function(func) {
        if (typeof requestAnimationFrame === 'function') {
          requestAnimationFrame(func);
          return;
        }
        var RAF = Browser.fakeRequestAnimationFrame;
        RAF(func);
      },safeCallback:function(func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function() {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function() { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function(func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function(func, timeout) {
        noExitRuntime = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function(func, timeout) {
        noExitRuntime = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function(name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function(func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function(event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function(event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function(event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll':
            // 3 lines make up a step
            delta = event.detail / 3;
            break;
          case 'mousewheel':
            // 120 units make up a step
            delta = event.wheelDelta / 120;
            break;
          case 'wheel':
            delta = event.deltaY
            switch(event.deltaMode) {
              case 0:
                // DOM_DELTA_PIXEL: 100 pixels make up a step
                delta /= 100;
                break;
              case 1:
                // DOM_DELTA_LINE: 3 lines make up a step
                delta /= 3;
                break;
              case 2:
                // DOM_DELTA_PAGE: A page makes up 80 steps
                delta *= 80;
                break;
              default:
                throw 'unrecognized mouse wheel delta mode: ' + event.deltaMode;
            }
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function(event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
  
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
  
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            }
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function(url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        readAsync(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function() {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function(width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function() {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = ((SAFE_HEAP_LOAD(((SDL.screen)|0), 4, 1))>>>0);
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          SAFE_HEAP_STORE(((SDL.screen)|0), ((flags)|0), 4)
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function() {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = ((SAFE_HEAP_LOAD(((SDL.screen)|0), 4, 1))>>>0);
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          SAFE_HEAP_STORE(((SDL.screen)|0), ((flags)|0), 4)
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function(canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function() {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function abortStackOverflow(allocSize) {
      abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
    }

  function callRuntimeCallbacks(callbacks) {
      while(callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
          callback(Module); // Pass the module as the first argument.
          continue;
        }
        var func = callback.func;
        if (typeof func === 'number') {
          if (callback.arg === undefined) {
            wasmTable.get(func)();
          } else {
            wasmTable.get(func)(callback.arg);
          }
        } else {
          func(callback.arg === undefined ? null : callback.arg);
        }
      }
    }

  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function dynCallLegacy(sig, ptr, args) {
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      if (args && args.length) {
        // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
        assert(args.length === sig.substring(1).replace(/j/g, '--').length);
      } else {
        assert(sig.length == 1);
      }
      if (args && args.length) {
        return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
      }
      return Module['dynCall_' + sig].call(null, ptr);
    }
  function dynCall(sig, ptr, args) {
      // Without WASM_BIGINT support we cannot directly call function with i64 as
      // part of thier signature, so we rely the dynCall functions generated by
      // wasm-emscripten-finalize
      if (sig.indexOf('j') != -1) {
        return dynCallLegacy(sig, ptr, args);
      }
  
      return wasmTable.get(ptr).apply(null, args)
    }

  function jsStackTrace() {
      var error = new Error();
      if (!error.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          error = e;
        }
        if (!error.stack) {
          return '(no stack trace available)';
        }
      }
      return error.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function unSign(value, bits) {
      if (value >= 0) {
        return value;
      }
      // Need some trickery, since if bits == 32, we are right at the limit of the
      // bits JS uses in bitshifts
      return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value
                        : Math.pow(2, bits)         + value;
    }

  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  var ExceptionInfoAttrs={DESTRUCTOR_OFFSET:0,REFCOUNT_OFFSET:4,TYPE_OFFSET:8,CAUGHT_OFFSET:12,RETHROWN_OFFSET:13,SIZE:16};
  function ___cxa_allocate_exception(size) {
      // Thrown object is prepended by exception metadata block
      return _malloc(size + ExceptionInfoAttrs.SIZE) + ExceptionInfoAttrs.SIZE;
    }

  function ExceptionInfo(excPtr) {
      this.excPtr = excPtr;
      this.ptr = excPtr - ExceptionInfoAttrs.SIZE;
  
      this.set_type = function(type) {
        SAFE_HEAP_STORE((((this.ptr)+(ExceptionInfoAttrs.TYPE_OFFSET))|0), ((type)|0), 4);
      };
  
      this.get_type = function() {
        return ((SAFE_HEAP_LOAD((((this.ptr)+(ExceptionInfoAttrs.TYPE_OFFSET))|0), 4, 0))|0);
      };
  
      this.set_destructor = function(destructor) {
        SAFE_HEAP_STORE((((this.ptr)+(ExceptionInfoAttrs.DESTRUCTOR_OFFSET))|0), ((destructor)|0), 4);
      };
  
      this.get_destructor = function() {
        return ((SAFE_HEAP_LOAD((((this.ptr)+(ExceptionInfoAttrs.DESTRUCTOR_OFFSET))|0), 4, 0))|0);
      };
  
      this.set_refcount = function(refcount) {
        SAFE_HEAP_STORE((((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))|0), ((refcount)|0), 4);
      };
  
      this.set_caught = function (caught) {
        caught = caught ? 1 : 0;
        SAFE_HEAP_STORE((((this.ptr)+(ExceptionInfoAttrs.CAUGHT_OFFSET))|0), ((caught)|0), 1);
      };
  
      this.get_caught = function () {
        return ((SAFE_HEAP_LOAD((((this.ptr)+(ExceptionInfoAttrs.CAUGHT_OFFSET))|0), 1, 0))|0) != 0;
      };
  
      this.set_rethrown = function (rethrown) {
        rethrown = rethrown ? 1 : 0;
        SAFE_HEAP_STORE((((this.ptr)+(ExceptionInfoAttrs.RETHROWN_OFFSET))|0), ((rethrown)|0), 1);
      };
  
      this.get_rethrown = function () {
        return ((SAFE_HEAP_LOAD((((this.ptr)+(ExceptionInfoAttrs.RETHROWN_OFFSET))|0), 1, 0))|0) != 0;
      };
  
      // Initialize native structure fields. Should be called once after allocated.
      this.init = function(type, destructor) {
        this.set_type(type);
        this.set_destructor(destructor);
        this.set_refcount(0);
        this.set_caught(false);
        this.set_rethrown(false);
      }
  
      this.add_ref = function() {
        var value = ((SAFE_HEAP_LOAD((((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))|0), 4, 0))|0);
        SAFE_HEAP_STORE((((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))|0), ((value + 1)|0), 4);
      };
  
      // Returns true if last reference released.
      this.release_ref = function() {
        var prev = ((SAFE_HEAP_LOAD((((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))|0), 4, 0))|0);
        SAFE_HEAP_STORE((((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))|0), ((prev - 1)|0), 4);
        assert(prev > 0);
        return prev === 1;
      };
    }
  
  var exceptionLast=0;
  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return __ZSt18uncaught_exceptionv.uncaught_exceptions > 0;
    }
  function ___cxa_throw(ptr, type, destructor) {
      var info = new ExceptionInfo(ptr);
      // Initialize ExceptionInfo content after it was allocated in __cxa_allocate_exception.
      info.init(type, destructor);
      exceptionLast = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exceptions = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exceptions++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function setErrNo(value) {
      SAFE_HEAP_STORE(((___errno_location())|0), ((value)|0), 4);
      return value;
    }
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        path = PATH.normalize(path);
        path = path.replace(/\/$/, "");
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  function getRandomDevice() {
      if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
        // for modern web browsers
        var randomBuffer = new Uint8Array(1);
        return function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
      } else
      if (ENVIRONMENT_IS_NODE) {
        // for nodejs with or without crypto support included
        try {
          var crypto_module = require('crypto');
          // nodejs has crypto support
          return function() { return crypto_module['randomBytes'](1)[0]; };
        } catch (e) {
          // nodejs doesn't have crypto support
        }
      }
      // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
      return function() { abort("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
    }
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  function mmapAlloc(size) {
      var alignedSize = alignMemory(size, 16384);
      var ptr = _malloc(alignedSize);
      while (size < alignedSize) HEAP8[ptr + size++] = 0;
      return ptr;
    }
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) {
            // Use typed array write which is available.
            node.contents.set(buffer.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, address, length, position, prot, flags) {
          // We don't currently support location hints for the address of the mapping
          assert(address === 0);
  
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents.buffer === buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            HEAP8.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};
  var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = /** @constructor */ function(){};
          FS.FSStream.prototype = {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          };
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
  
        // let the errors from non existant directories percolate up
        lookup = FS.lookupPath(old_path, { parent: true });
        old_dir = lookup.node;
        lookup = FS.lookupPath(new_path, { parent: true });
        new_dir = lookup.node;
  
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, address, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device = getRandomDevice();
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = /** @this{Object} */ function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) setErrNo(29);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        /** @constructor */
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: /** @this {FSNode} */ function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(29);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(29);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },absolutePath:function() {
        abort('FS.absolutePath has been removed; use PATH_FS.resolve instead');
      },createFolder:function() {
        abort('FS.createFolder has been removed; use FS.mkdir instead');
      },createLink:function() {
        abort('FS.createLink has been removed; use FS.symlink instead');
      },joinPath:function() {
        abort('FS.joinPath has been removed; use PATH.join instead');
      },mmapAlloc:function() {
        abort('FS.mmapAlloc has been replaced by the top level function mmapAlloc');
      },standardizePath:function() {
        abort('FS.standardizePath has been removed; use PATH.normalize instead');
      }};
  var SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(8);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        SAFE_HEAP_STORE(((buf)|0), ((stat.dev)|0), 4);
        SAFE_HEAP_STORE((((buf)+(4))|0), ((0)|0), 4);
        SAFE_HEAP_STORE((((buf)+(8))|0), ((stat.ino)|0), 4);
        SAFE_HEAP_STORE((((buf)+(12))|0), ((stat.mode)|0), 4);
        SAFE_HEAP_STORE((((buf)+(16))|0), ((stat.nlink)|0), 4);
        SAFE_HEAP_STORE((((buf)+(20))|0), ((stat.uid)|0), 4);
        SAFE_HEAP_STORE((((buf)+(24))|0), ((stat.gid)|0), 4);
        SAFE_HEAP_STORE((((buf)+(28))|0), ((stat.rdev)|0), 4);
        SAFE_HEAP_STORE((((buf)+(32))|0), ((0)|0), 4);
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],SAFE_HEAP_STORE((((buf)+(40))|0), ((tempI64[0])|0), 4),SAFE_HEAP_STORE((((buf)+(44))|0), ((tempI64[1])|0), 4));
        SAFE_HEAP_STORE((((buf)+(48))|0), ((4096)|0), 4);
        SAFE_HEAP_STORE((((buf)+(52))|0), ((stat.blocks)|0), 4);
        SAFE_HEAP_STORE((((buf)+(56))|0), (((stat.atime.getTime() / 1000)|0)|0), 4);
        SAFE_HEAP_STORE((((buf)+(60))|0), ((0)|0), 4);
        SAFE_HEAP_STORE((((buf)+(64))|0), (((stat.mtime.getTime() / 1000)|0)|0), 4);
        SAFE_HEAP_STORE((((buf)+(68))|0), ((0)|0), 4);
        SAFE_HEAP_STORE((((buf)+(72))|0), (((stat.ctime.getTime() / 1000)|0)|0), 4);
        SAFE_HEAP_STORE((((buf)+(76))|0), ((0)|0), 4);
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],SAFE_HEAP_STORE((((buf)+(80))|0), ((tempI64[0])|0), 4),SAFE_HEAP_STORE((((buf)+(84))|0), ((tempI64[1])|0), 4));
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = ((SAFE_HEAP_LOAD((((iov)+(i*8))|0), 4, 0))|0);
          var len = ((SAFE_HEAP_LOAD((((iov)+(i*8 + 4))|0), 4, 0))|0);
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = ((SAFE_HEAP_LOAD((((iov)+(i*8))|0), 4, 0))|0);
          var len = ((SAFE_HEAP_LOAD((((iov)+(i*8 + 4))|0), 4, 0))|0);
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = ((SAFE_HEAP_LOAD((((SYSCALLS.varargs)-(4))|0), 4, 0))|0);
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },getStreamFromFD:function(fd) {
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function(low, high) {
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      }};
  function ___sys_fcntl64(fd, cmd, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          SAFE_HEAP_STORE((((arg)+(offset))|0), ((2)|0), 2);
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_ioctl(fd, op, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          SAFE_HEAP_STORE(((argp)|0), ((0)|0), 4);
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_open(path, flags, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var pathname = SYSCALLS.getStr(path);
      var mode = SYSCALLS.get();
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }
  var embind_charCodes=undefined;
  function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  var char_0=48;
  
  var char_9=57;
  function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }
  function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }
  function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }
  var BindingError=undefined;
  function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  var InternalError=undefined;
  function throwInternalError(message) {
      throw new InternalError(message);
    }
  function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }
  /** @param {Object=} options */
  function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }
  function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];
  function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }
  function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }
  function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }
  function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }
  function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }
  function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(buffer, data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
  
              var str;
              if (stdStringIsUTF8) {
                  var decodeStartPtr = value + 4;
                  // Looping here to support possible embedded '0' bytes
                  for (var i = 0; i <= length; ++i) {
                      var currentBytePtr = value + 4 + i;
                      if (i == length || HEAPU8[currentBytePtr] == 0) {
                          var maxRead = currentBytePtr - decodeStartPtr;
                          var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
                          if (str === undefined) {
                              str = stringSegment;
                          } else {
                              str += String.fromCharCode(0);
                              str += stringSegment;
                          }
                          decodeStartPtr = currentBytePtr + 1;
                      }
                  }
              } else {
                  var a = new Array(length);
                  for (var i = 0; i < length; ++i) {
                      a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                  }
                  str = a.join('');
              }
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              var getLength;
              var valueIsOfTypeString = (typeof value === 'string');
  
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                  throwBindingError('Cannot pass non-string to std::string');
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  getLength = function() {return lengthBytesUTF8(value);};
              } else {
                  getLength = function() {return value.length;};
              }
  
              // assumes 4-byte alignment
              var length = getLength();
              var ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  stringToUTF8(value, ptr + 4, length + 1);
              } else {
                  if (valueIsOfTypeString) {
                      for (var i = 0; i < length; ++i) {
                          var charCode = value.charCodeAt(i);
                          if (charCode > 255) {
                              _free(ptr);
                              throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                          }
                          HEAPU8[ptr + 4 + i] = charCode;
                      }
                  } else {
                      for (var i = 0; i < length; ++i) {
                          HEAPU8[ptr + 4 + i] = value[i];
                      }
                  }
              }
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      name = readLatin1String(name);
      var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
      if (charSize === 2) {
          decodeString = UTF16ToString;
          encodeString = stringToUTF16;
          lengthBytesUTF = lengthBytesUTF16;
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          decodeString = UTF32ToString;
          encodeString = stringToUTF32;
          lengthBytesUTF = lengthBytesUTF32;
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              // Code mostly taken from _embind_register_std_string fromWireType
              var length = HEAPU32[value >> 2];
              var HEAP = getHeap();
              var str;
  
              var decodeStartPtr = value + 4;
              // Looping here to support possible embedded '0' bytes
              for (var i = 0; i <= length; ++i) {
                  var currentBytePtr = value + 4 + i * charSize;
                  if (i == length || HEAP[currentBytePtr >> shift] == 0) {
                      var maxReadBytes = currentBytePtr - decodeStartPtr;
                      var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
                      if (str === undefined) {
                          str = stringSegment;
                      } else {
                          str += String.fromCharCode(0);
                          str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + charSize;
                  }
              }
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (!(typeof value === 'string')) {
                  throwBindingError('Cannot pass non-string to C++ string type ' + name);
              }
  
              // assumes 4-byte alignment
              var length = lengthBytesUTF(value);
              var ptr = _malloc(4 + length + charSize);
              HEAPU32[ptr >> 2] = length >> shift;
  
              encodeString(value, ptr + 4, length + charSize);
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  function _abort() {
      abort();
    }

  var EGL={errorCode:12288,defaultDisplayInitialized:false,currentContext:0,currentReadSurface:0,currentDrawSurface:0,contextAttributes:{alpha:false,depth:false,stencil:false,antialias:false},stringCache:{},setErrorCode:function(code) {
        EGL.errorCode = code;
      },chooseConfig:function(display, attribList, config, config_size, numConfigs) {
        if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
          EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
          return 0;
        }
  
        if (attribList) {
          // read attribList if it is non-null
          for(;;) {
            var param = ((SAFE_HEAP_LOAD(((attribList)|0), 4, 0))|0);
            if (param == 0x3021 /*EGL_ALPHA_SIZE*/) {
              var alphaSize = ((SAFE_HEAP_LOAD((((attribList)+(4))|0), 4, 0))|0);
              EGL.contextAttributes.alpha = (alphaSize > 0);
            } else if (param == 0x3025 /*EGL_DEPTH_SIZE*/) {
              var depthSize = ((SAFE_HEAP_LOAD((((attribList)+(4))|0), 4, 0))|0);
              EGL.contextAttributes.depth = (depthSize > 0);
            } else if (param == 0x3026 /*EGL_STENCIL_SIZE*/) {
              var stencilSize = ((SAFE_HEAP_LOAD((((attribList)+(4))|0), 4, 0))|0);
              EGL.contextAttributes.stencil = (stencilSize > 0);
            } else if (param == 0x3031 /*EGL_SAMPLES*/) {
              var samples = ((SAFE_HEAP_LOAD((((attribList)+(4))|0), 4, 0))|0);
              EGL.contextAttributes.antialias = (samples > 0);
            } else if (param == 0x3032 /*EGL_SAMPLE_BUFFERS*/) {
              var samples = ((SAFE_HEAP_LOAD((((attribList)+(4))|0), 4, 0))|0);
              EGL.contextAttributes.antialias = (samples == 1);
            } else if (param == 0x3100 /*EGL_CONTEXT_PRIORITY_LEVEL_IMG*/) {
              var requestedPriority = ((SAFE_HEAP_LOAD((((attribList)+(4))|0), 4, 0))|0);
              EGL.contextAttributes.lowLatency = (requestedPriority != 0x3103 /*EGL_CONTEXT_PRIORITY_LOW_IMG*/);
            } else if (param == 0x3038 /*EGL_NONE*/) {
                break;
            }
            attribList += 8;
          }
        }
  
        if ((!config || !config_size) && !numConfigs) {
          EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
          return 0;
        }
        if (numConfigs) {
          SAFE_HEAP_STORE(((numConfigs)|0), ((1)|0), 4); // Total number of supported configs: 1.
        }
        if (config && config_size > 0) {
          SAFE_HEAP_STORE(((config)|0), ((62002)|0), 4);
        }
  
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      }};
  function _eglGetProcAddress(name_) {
      return _emscripten_GetProcAddress(name_);
    }

  var JSEvents={inEventHandler:0,removeAllEventListeners:function() {
        for(var i = JSEvents.eventHandlers.length-1; i >= 0; --i) {
          JSEvents._removeHandler(i);
        }
        JSEvents.eventHandlers = [];
        JSEvents.deferredCalls = [];
      },registerRemoveEventListeners:function() {
        if (!JSEvents.removeEventListenersRegistered) {
          __ATEXIT__.push(JSEvents.removeAllEventListeners);
          JSEvents.removeEventListenersRegistered = true;
        }
      },deferredCalls:[],deferCall:function(targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for(var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for(var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList
        });
  
        JSEvents.deferredCalls.sort(function(x,y) { return x.precedence < y.precedence; });
      },removeDeferredCalls:function(targetFunction) {
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },canPerformEventHandlerRequests:function() {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },runDeferredCalls:function() {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(null, call.argsList);
        }
      },eventHandlers:[],removeAllHandlersOnTarget:function(target, eventTypeString) {
        for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target && 
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },_removeHandler:function(i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },registerOrRemoveHandler:function(eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
          // Increment nesting count for the event handler.
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          // Process any old deferred calls the user has placed.
          JSEvents.runDeferredCalls();
          // Process the actual event, calls back to user C code handler.
          eventHandler.handlerFunc(event);
          // Process any new deferred calls that were placed right now from this event handler.
          JSEvents.runDeferredCalls();
          // Out of event handler - restore nesting count.
          --JSEvents.inEventHandler;
        };
        
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
      },getNodeNameForTarget:function(target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == screen) return '#screen';
        return (target && target.nodeName) ? target.nodeName : '';
      },fullscreenEnabled:function() {
        return document.fullscreenEnabled
        // Safari 13.0.3 on macOS Catalina 10.15.1 still ships with prefixed webkitFullscreenEnabled.
        // TODO: If Safari at some point ships with unprefixed version, update the version check above.
        || document.webkitFullscreenEnabled
         ;
      }};
  
  function __requestPointerLock(target) {
      if (target.requestPointerLock) {
        target.requestPointerLock();
      } else if (target.msRequestPointerLock) {
        target.msRequestPointerLock();
      } else {
        // document.body is known to accept pointer lock, so use that to differentiate if the user passed a bad element,
        // or if the whole browser just doesn't support the feature.
        if (document.body.requestPointerLock
          || document.body.msRequestPointerLock
          ) {
          return -3;
        } else {
          return -1;
        }
      }
      return 0;
    }
  function _emscripten_exit_pointerlock() {
      // Make sure no queued up calls will fire after this.
      JSEvents.removeDeferredCalls(__requestPointerLock);
  
      if (document.exitPointerLock) {
        document.exitPointerLock();
      } else if (document.msExitPointerLock) {
        document.msExitPointerLock();
      } else {
        return -1;
      }
      return 0;
    }

  function maybeCStringToJsString(cString) {
      // "cString > 2" checks if the input is a number, and isn't of the special
      // values we accept here, EMSCRIPTEN_EVENT_TARGET_* (which map to 0, 1, 2).
      // In other words, if cString > 2 then it's a pointer to a valid place in
      // memory, and points to a C string.
      return cString > 2 ? UTF8ToString(cString) : cString;
    }
  
  var specialHTMLTargets=[0, typeof document !== 'undefined' ? document : 0, typeof window !== 'undefined' ? window : 0];
  function findEventTarget(target) {
      target = maybeCStringToJsString(target);
      var domElement = specialHTMLTargets[target] || (typeof document !== 'undefined' ? document.querySelector(target) : undefined);
      return domElement;
    }
  
  function __getBoundingClientRect(e) {
      return specialHTMLTargets.indexOf(e) < 0 ? e.getBoundingClientRect() : {'left':0,'top':0};
    }
  function _emscripten_get_element_css_size(target, width, height) {
      target = findEventTarget(target);
      if (!target) return -4;
  
      var rect = __getBoundingClientRect(target);
      SAFE_HEAP_STORE_D(((width)|0), (+(rect.width)), 8);
      SAFE_HEAP_STORE_D(((height)|0), (+(rect.height)), 8);
  
      return 0;
    }

  function __fillGamepadEventData(eventStruct, e) {
      SAFE_HEAP_STORE_D(((eventStruct)|0), (+(e.timestamp)), 8);
      for(var i = 0; i < e.axes.length; ++i) {
        SAFE_HEAP_STORE_D((((eventStruct+i*8)+(16))|0), (+(e.axes[i])), 8);
      }
      for(var i = 0; i < e.buttons.length; ++i) {
        if (typeof(e.buttons[i]) === 'object') {
          SAFE_HEAP_STORE_D((((eventStruct+i*8)+(528))|0), (+(e.buttons[i].value)), 8);
        } else {
          SAFE_HEAP_STORE_D((((eventStruct+i*8)+(528))|0), (+(e.buttons[i])), 8);
        }
      }
      for(var i = 0; i < e.buttons.length; ++i) {
        if (typeof(e.buttons[i]) === 'object') {
          SAFE_HEAP_STORE((((eventStruct+i*4)+(1040))|0), ((e.buttons[i].pressed)|0), 4);
        } else {
          // Assigning a boolean to HEAP32, that's ok, but Closure would like to warn about it:
          /** @suppress {checkTypes} */
          SAFE_HEAP_STORE((((eventStruct+i*4)+(1040))|0), ((e.buttons[i] == 1)|0), 4);
        }
      }
      SAFE_HEAP_STORE((((eventStruct)+(1296))|0), ((e.connected)|0), 4);
      SAFE_HEAP_STORE((((eventStruct)+(1300))|0), ((e.index)|0), 4);
      SAFE_HEAP_STORE((((eventStruct)+(8))|0), ((e.axes.length)|0), 4);
      SAFE_HEAP_STORE((((eventStruct)+(12))|0), ((e.buttons.length)|0), 4);
      stringToUTF8(e.id, eventStruct + 1304, 64);
      stringToUTF8(e.mapping, eventStruct + 1368, 64);
    }
  function _emscripten_get_gamepad_status(index, gamepadState) {
      if (!JSEvents.lastGamepadState) throw 'emscripten_get_gamepad_status() can only be called after having first called emscripten_sample_gamepad_data() and that function has returned EMSCRIPTEN_RESULT_SUCCESS!';
  
      // INVALID_PARAM is returned on a Gamepad index that never was there.
      if (index < 0 || index >= JSEvents.lastGamepadState.length) return -5;
  
      // NO_DATA is returned on a Gamepad index that was removed.
      // For previously disconnected gamepads there should be an empty slot (null/undefined/false) at the index.
      // This is because gamepads must keep their original position in the array.
      // For example, removing the first of two gamepads produces [null/undefined/false, gamepad].
      if (!JSEvents.lastGamepadState[index]) return -7;
  
      __fillGamepadEventData(gamepadState, JSEvents.lastGamepadState[index]);
      return 0;
    }

  function _emscripten_get_num_gamepads() {
      if (!JSEvents.lastGamepadState) throw 'emscripten_get_num_gamepads() can only be called after having first called emscripten_sample_gamepad_data() and that function has returned EMSCRIPTEN_RESULT_SUCCESS!';
      // N.B. Do not call emscripten_get_num_gamepads() unless having first called emscripten_sample_gamepad_data(), and that has returned EMSCRIPTEN_RESULT_SUCCESS.
      // Otherwise the following line will throw an exception.
      return JSEvents.lastGamepadState.length;
    }

  function __fillPointerlockChangeEventData(eventStruct) {
      var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
      var isPointerlocked = !!pointerLockElement;
      /** @suppress {checkTypes} */
      SAFE_HEAP_STORE(((eventStruct)|0), ((isPointerlocked)|0), 4);
      var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
      var id = (pointerLockElement && pointerLockElement.id) ? pointerLockElement.id : '';
      stringToUTF8(nodeName, eventStruct + 4, 128);
      stringToUTF8(id, eventStruct + 132, 128);
    }
  /** @suppress {missingProperties} */
  function _emscripten_get_pointerlock_status(pointerlockStatus) {
      if (pointerlockStatus) __fillPointerlockChangeEventData(pointerlockStatus);
      if (!document.body || (!document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock)) {
        return -1;
      }
      return 0;
    }

  function __webgl_enable_ANGLE_instanced_arrays(ctx) {
      // Extension available in WebGL 1 from Firefox 26 and Google Chrome 30 onwards. Core feature in WebGL 2.
      var ext = ctx.getExtension('ANGLE_instanced_arrays');
      if (ext) {
        ctx['vertexAttribDivisor'] = function(index, divisor) { ext['vertexAttribDivisorANGLE'](index, divisor); };
        ctx['drawArraysInstanced'] = function(mode, first, count, primcount) { ext['drawArraysInstancedANGLE'](mode, first, count, primcount); };
        ctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { ext['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
        return 1;
      }
    }
  
  function __webgl_enable_OES_vertex_array_object(ctx) {
      // Extension available in WebGL 1 from Firefox 25 and WebKit 536.28/desktop Safari 6.0.3 onwards. Core feature in WebGL 2.
      var ext = ctx.getExtension('OES_vertex_array_object');
      if (ext) {
        ctx['createVertexArray'] = function() { return ext['createVertexArrayOES'](); };
        ctx['deleteVertexArray'] = function(vao) { ext['deleteVertexArrayOES'](vao); };
        ctx['bindVertexArray'] = function(vao) { ext['bindVertexArrayOES'](vao); };
        ctx['isVertexArray'] = function(vao) { return ext['isVertexArrayOES'](vao); };
        return 1;
      }
    }
  
  function __webgl_enable_WEBGL_draw_buffers(ctx) {
      // Extension available in WebGL 1 from Firefox 28 onwards. Core feature in WebGL 2.
      var ext = ctx.getExtension('WEBGL_draw_buffers');
      if (ext) {
        ctx['drawBuffers'] = function(n, bufs) { ext['drawBuffersWEBGL'](n, bufs); };
        return 1;
      }
    }
  
  function __webgl_enable_WEBGL_draw_instanced_base_vertex_base_instance(ctx) {
      // Closure is expected to be allowed to minify the '.dibvbi' property, so not accessing it quoted.
      return !!(ctx.dibvbi = ctx.getExtension('WEBGL_draw_instanced_base_vertex_base_instance'));
    }
  
  function __webgl_enable_WEBGL_multi_draw_instanced_base_vertex_base_instance(ctx) {
      // Closure is expected to be allowed to minify the '.mdibvbi' property, so not accessing it quoted.
      return !!(ctx.mdibvbi = ctx.getExtension('WEBGL_multi_draw_instanced_base_vertex_base_instance'));
    }
  
  function __webgl_enable_WEBGL_multi_draw(ctx) {
      // Closure is expected to be allowed to minify the '.multiDrawWebgl' property, so not accessing it quoted.
      return !!(ctx.multiDrawWebgl = ctx.getExtension('WEBGL_multi_draw'));
    }
  var GL={counter:1,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],offscreenCanvases:{},timerQueriesEXT:[],queries:[],samplers:[],transformFeedbacks:[],syncs:[],programInfos:{},stringCache:{},stringiCache:{},unpackAlignment:4,recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function(table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },getSource:function(shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var len = length ? ((SAFE_HEAP_LOAD((((length)+(i*4))|0), 4, 0))|0) : -1;
          source += UTF8ToString(((SAFE_HEAP_LOAD((((string)+(i*4))|0), 4, 0))|0), len < 0 ? undefined : len);
        }
        return source;
      },createContext:function(canvas, webGLContextAttributes) {
  
  
  
  
  
        var ctx = 
          (webGLContextAttributes.majorVersion > 1)
          ?
            canvas.getContext("webgl2", webGLContextAttributes)
          :
          (canvas.getContext("webgl", webGLContextAttributes)
            // https://caniuse.com/#feat=webgl
            );
  
  
        if (!ctx) return 0;
  
        var handle = GL.registerContext(ctx, webGLContextAttributes);
  
  
  
        return handle;
      },registerContext:function(ctx, webGLContextAttributes) {
        // without pthreads a context is just an integer ID
        var handle = GL.getNewId(GL.contexts);
  
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
  
  
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes.enableExtensionsByDefault === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
  
  
  
  
        return handle;
      },makeContextCurrent:function(contextHandle) {
  
        GL.currentContext = GL.contexts[contextHandle]; // Active Emscripten GL layer context object.
        Module.ctx = GLctx = GL.currentContext && GL.currentContext.GLctx; // Active WebGL context object.
        return !(contextHandle && !GLctx);
      },getContext:function(contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function(contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function(context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist.
  
        // Extensions that are only available in WebGL 1 (the calls will be no-ops if called on a WebGL 2 context active)
        __webgl_enable_ANGLE_instanced_arrays(GLctx);
        __webgl_enable_OES_vertex_array_object(GLctx);
        __webgl_enable_WEBGL_draw_buffers(GLctx);
        // Extensions that are available from WebGL >= 2 (no-op if called on a WebGL 1 context active)
        __webgl_enable_WEBGL_draw_instanced_base_vertex_base_instance(GLctx);
        __webgl_enable_WEBGL_multi_draw_instanced_base_vertex_base_instance(GLctx);
  
        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
        __webgl_enable_WEBGL_multi_draw(GLctx);
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ // Khronos ratified WebGL extensions ordered by number (no debug extensions):
                                               "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "EXT_frag_depth",
                                               "WEBGL_draw_buffers", "ANGLE_instanced_arrays", "OES_texture_float_linear",
                                               "OES_texture_half_float_linear", "EXT_blend_minmax", "EXT_shader_texture_lod",
                                               "EXT_texture_norm16",
                                               // Community approved WebGL extensions ordered by number:
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_sRGB", "WEBGL_compressed_texture_etc1", "EXT_disjoint_timer_query",
                                               "WEBGL_compressed_texture_etc", "WEBGL_compressed_texture_astc", "EXT_color_buffer_float",
                                               "WEBGL_compressed_texture_s3tc_srgb", "EXT_disjoint_timer_query_webgl2",
                                               // Old style prefixed forms of extensions (but still currently used on e.g. iPhone Xs as
                                               // tested on iOS 12.4.1):
                                               "WEBKIT_WEBGL_compressed_texture_pvrtc"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (extension.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions() || []; // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
        exts.forEach(function(ext) {
          if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
            GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
          }
        });
      },populateUniformTable:function(program) {
        var p = GL.programs[program];
        var ptable = GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1, // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
          maxUniformBlockNameLength: -1 // Lazily computed as well
        };
  
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, 0x8B86/*GL_ACTIVE_UNIFORMS*/);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // If we are dealing with an array, e.g. vec4 foo[3], strip off the array index part to canonicalize that "foo", "foo[]",
          // and "foo[0]" will mean the same. Loop below will populate foo[1] and foo[2].
          if (name.slice(-1) == ']') {
            name = name.slice(0, name.lastIndexOf('['));
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          if (loc) {
            var id = GL.getNewId(GL.uniforms);
            utable[name] = [u.size, id];
            GL.uniforms[id] = loc;
  
            for (var j = 1; j < u.size; ++j) {
              var n = name + '['+j+']';
              loc = GLctx.getUniformLocation(p, n);
              id = GL.getNewId(GL.uniforms);
  
              GL.uniforms[id] = loc;
            }
          }
        }
      }};
  function _emscripten_glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _emscripten_glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glBeginQuery(target, id) {
      GLctx['beginQuery'](target, GL.queries[id]);
    }

  function _emscripten_glBeginQueryEXT(target, id) {
      GLctx.disjointTimerQueryExt['beginQueryEXT'](target, GL.timerQueriesEXT[id]);
    }

  function _emscripten_glBeginTransformFeedback(x0) { GLctx['beginTransformFeedback'](x0) }

  function _emscripten_glBindAttribLocation(program, index, name) {
      GLctx.bindAttribLocation(GL.programs[program], index, UTF8ToString(name));
    }

  function _emscripten_glBindBuffer(target, buffer) {
  
      if (target == 0x88EB /*GL_PIXEL_PACK_BUFFER*/) {
        // In WebGL 2 glReadPixels entry point, we need to use a different WebGL 2 API function call when a buffer is bound to
        // GL_PIXEL_PACK_BUFFER_BINDING point, so must keep track whether that binding point is non-null to know what is
        // the proper API function to call.
        GLctx.currentPixelPackBufferBinding = buffer;
      } else if (target == 0x88EC /*GL_PIXEL_UNPACK_BUFFER*/) {
        // In WebGL 2 gl(Compressed)Tex(Sub)Image[23]D entry points, we need to
        // use a different WebGL 2 API function call when a buffer is bound to
        // GL_PIXEL_UNPACK_BUFFER_BINDING point, so must keep track whether that
        // binding point is non-null to know what is the proper API function to
        // call.
        GLctx.currentPixelUnpackBufferBinding = buffer;
      }
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    }

  function _emscripten_glBindBufferBase(target, index, buffer) {
      GLctx['bindBufferBase'](target, index, GL.buffers[buffer]);
    }

  function _emscripten_glBindBufferRange(target, index, buffer, offset, ptrsize) {
      GLctx['bindBufferRange'](target, index, GL.buffers[buffer], offset, ptrsize);
    }

  function _emscripten_glBindFramebuffer(target, framebuffer) {
  
      GLctx.bindFramebuffer(target, GL.framebuffers[framebuffer]);
  
    }

  function _emscripten_glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, GL.renderbuffers[renderbuffer]);
    }

  function _emscripten_glBindSampler(unit, sampler) {
      GLctx['bindSampler'](unit, GL.samplers[sampler]);
    }

  function _emscripten_glBindTexture(target, texture) {
      GLctx.bindTexture(target, GL.textures[texture]);
    }

  function _emscripten_glBindTransformFeedback(target, id) {
      GLctx['bindTransformFeedback'](target, GL.transformFeedbacks[id]);
    }

  function _emscripten_glBindVertexArray(vao) {
      GLctx['bindVertexArray'](GL.vaos[vao]);
    }

  function _emscripten_glBindVertexArrayOES(vao) {
      GLctx['bindVertexArray'](GL.vaos[vao]);
    }

  function _emscripten_glBlendColor(x0, x1, x2, x3) { GLctx['blendColor'](x0, x1, x2, x3) }

  function _emscripten_glBlendEquation(x0) { GLctx['blendEquation'](x0) }

  function _emscripten_glBlendEquationSeparate(x0, x1) { GLctx['blendEquationSeparate'](x0, x1) }

  function _emscripten_glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }

  function _emscripten_glBlendFuncSeparate(x0, x1, x2, x3) { GLctx['blendFuncSeparate'](x0, x1, x2, x3) }

  function _emscripten_glBlitFramebuffer(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9) { GLctx['blitFramebuffer'](x0, x1, x2, x3, x4, x5, x6, x7, x8, x9) }

  function _emscripten_glBufferData(target, size, data, usage) {
  
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        if (data) {
          GLctx.bufferData(target, HEAPU8, usage, data, size);
        } else {
          GLctx.bufferData(target, size, usage);
        }
      } else {
        // N.b. here first form specifies a heap subarray, second form an integer size, so the ?: code here is polymorphic. It is advised to avoid
        // randomly mixing both uses in calling code, to avoid any potential JS engine JIT issues.
        GLctx.bufferData(target, data ? HEAPU8.subarray(data, data+size) : size, usage);
      }
    }

  function _emscripten_glBufferSubData(target, offset, size, data) {
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        GLctx.bufferSubData(target, offset, HEAPU8, data, size);
        return;
      }
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _emscripten_glCheckFramebufferStatus(x0) { return GLctx['checkFramebufferStatus'](x0) }

  function _emscripten_glClear(x0) { GLctx['clear'](x0) }

  function _emscripten_glClearBufferfi(x0, x1, x2, x3) { GLctx['clearBufferfi'](x0, x1, x2, x3) }

  function _emscripten_glClearBufferfv(buffer, drawbuffer, value) {
  
      GLctx['clearBufferfv'](buffer, drawbuffer, HEAPF32, value>>2);
    }

  function _emscripten_glClearBufferiv(buffer, drawbuffer, value) {
  
      GLctx['clearBufferiv'](buffer, drawbuffer, HEAP32, value>>2);
    }

  function _emscripten_glClearBufferuiv(buffer, drawbuffer, value) {
  
      GLctx['clearBufferuiv'](buffer, drawbuffer, HEAPU32, value>>2);
    }

  function _emscripten_glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _emscripten_glClearDepthf(x0) { GLctx['clearDepth'](x0) }

  function _emscripten_glClearStencil(x0) { GLctx['clearStencil'](x0) }

  function convertI32PairToI53(lo, hi) {
      // This function should not be getting called with too large unsigned numbers
      // in high part (if hi >= 0x7FFFFFFFF, one should have been calling
      // convertU32PairToI53())
      assert(hi === (hi|0));
      return (lo >>> 0) + hi * 4294967296;
    }
  function _emscripten_glClientWaitSync(sync, flags, timeoutLo, timeoutHi) {
      // WebGL2 vs GLES3 differences: in GLES3, the timeout parameter is a uint64, where 0xFFFFFFFFFFFFFFFFULL means GL_TIMEOUT_IGNORED.
      // In JS, there's no 64-bit value types, so instead timeout is taken to be signed, and GL_TIMEOUT_IGNORED is given value -1.
      // Inherently the value accepted in the timeout is lossy, and can't take in arbitrary u64 bit pattern (but most likely doesn't matter)
      // See https://www.khronos.org/registry/webgl/specs/latest/2.0/#5.15
      return GLctx.clientWaitSync(GL.syncs[sync], flags, convertI32PairToI53(timeoutLo, timeoutHi));
    }

  function _emscripten_glColorMask(red, green, blue, alpha) {
      GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
    }

  function _emscripten_glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _emscripten_glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        if (GLctx.currentPixelUnpackBufferBinding) {
          GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, imageSize, data);
        } else {
          GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, HEAPU8, data, imageSize);
        }
        return;
      }
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _emscripten_glCompressedTexImage3D(target, level, internalFormat, width, height, depth, border, imageSize, data) {
      if (GLctx.currentPixelUnpackBufferBinding) {
        GLctx['compressedTexImage3D'](target, level, internalFormat, width, height, depth, border, imageSize, data);
      } else {
        GLctx['compressedTexImage3D'](target, level, internalFormat, width, height, depth, border, HEAPU8, data, imageSize);
      }
    }

  function _emscripten_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        if (GLctx.currentPixelUnpackBufferBinding) {
          GLctx['compressedTexSubImage2D'](target, level, xoffset, yoffset, width, height, format, imageSize, data);
        } else {
          GLctx['compressedTexSubImage2D'](target, level, xoffset, yoffset, width, height, format, HEAPU8, data, imageSize);
        }
        return;
      }
      GLctx['compressedTexSubImage2D'](target, level, xoffset, yoffset, width, height, format, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _emscripten_glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) {
      if (GLctx.currentPixelUnpackBufferBinding) {
        GLctx['compressedTexSubImage3D'](target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
      } else {
        GLctx['compressedTexSubImage3D'](target, level, xoffset, yoffset, zoffset, width, height, depth, format, HEAPU8, data, imageSize);
      }
    }

  function _emscripten_glCopyBufferSubData(x0, x1, x2, x3, x4) { GLctx['copyBufferSubData'](x0, x1, x2, x3, x4) }

  function _emscripten_glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexSubImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glCopyTexSubImage3D(x0, x1, x2, x3, x4, x5, x6, x7, x8) { GLctx['copyTexSubImage3D'](x0, x1, x2, x3, x4, x5, x6, x7, x8) }

  function _emscripten_glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _emscripten_glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _emscripten_glCullFace(x0) { GLctx['cullFace'](x0) }

  function _emscripten_glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = ((SAFE_HEAP_LOAD((((buffers)+(i*4))|0), 4, 0))|0);
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GLctx.currentPixelPackBufferBinding) GLctx.currentPixelPackBufferBinding = 0;
        if (id == GLctx.currentPixelUnpackBufferBinding) GLctx.currentPixelUnpackBufferBinding = 0;
      }
    }

  function _emscripten_glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = ((SAFE_HEAP_LOAD((((framebuffers)+(i*4))|0), 4, 0))|0);
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _emscripten_glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _emscripten_glDeleteQueries(n, ids) {
      for (var i = 0; i < n; i++) {
        var id = ((SAFE_HEAP_LOAD((((ids)+(i*4))|0), 4, 0))|0);
        var query = GL.queries[id];
        if (!query) continue; // GL spec: "unused names in ids are ignored, as is the name zero."
        GLctx['deleteQuery'](query);
        GL.queries[id] = null;
      }
    }

  function _emscripten_glDeleteQueriesEXT(n, ids) {
      for (var i = 0; i < n; i++) {
        var id = ((SAFE_HEAP_LOAD((((ids)+(i*4))|0), 4, 0))|0);
        var query = GL.timerQueriesEXT[id];
        if (!query) continue; // GL spec: "unused names in ids are ignored, as is the name zero."
        GLctx.disjointTimerQueryExt['deleteQueryEXT'](query);
        GL.timerQueriesEXT[id] = null;
      }
    }

  function _emscripten_glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = ((SAFE_HEAP_LOAD((((renderbuffers)+(i*4))|0), 4, 0))|0);
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

  function _emscripten_glDeleteSamplers(n, samplers) {
      for (var i = 0; i < n; i++) {
        var id = ((SAFE_HEAP_LOAD((((samplers)+(i*4))|0), 4, 0))|0);
        var sampler = GL.samplers[id];
        if (!sampler) continue;
        GLctx['deleteSampler'](sampler);
        sampler.name = 0;
        GL.samplers[id] = null;
      }
    }

  function _emscripten_glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _emscripten_glDeleteSync(id) {
      if (!id) return;
      var sync = GL.syncs[id];
      if (!sync) { // glDeleteSync signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteSync(sync);
      sync.name = 0;
      GL.syncs[id] = null;
    }

  function _emscripten_glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = ((SAFE_HEAP_LOAD((((textures)+(i*4))|0), 4, 0))|0);
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _emscripten_glDeleteTransformFeedbacks(n, ids) {
      for (var i = 0; i < n; i++) {
        var id = ((SAFE_HEAP_LOAD((((ids)+(i*4))|0), 4, 0))|0);
        var transformFeedback = GL.transformFeedbacks[id];
        if (!transformFeedback) continue; // GL spec: "unused names in ids are ignored, as is the name zero."
        GLctx['deleteTransformFeedback'](transformFeedback);
        transformFeedback.name = 0;
        GL.transformFeedbacks[id] = null;
      }
    }

  function _emscripten_glDeleteVertexArrays(n, vaos) {
      for (var i = 0; i < n; i++) {
        var id = ((SAFE_HEAP_LOAD((((vaos)+(i*4))|0), 4, 0))|0);
        GLctx['deleteVertexArray'](GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }

  function _emscripten_glDeleteVertexArraysOES(n, vaos) {
      for (var i = 0; i < n; i++) {
        var id = ((SAFE_HEAP_LOAD((((vaos)+(i*4))|0), 4, 0))|0);
        GLctx['deleteVertexArray'](GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }

  function _emscripten_glDepthFunc(x0) { GLctx['depthFunc'](x0) }

  function _emscripten_glDepthMask(flag) {
      GLctx.depthMask(!!flag);
    }

  function _emscripten_glDepthRangef(x0, x1) { GLctx['depthRange'](x0, x1) }

  function _emscripten_glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glDisable(x0) { GLctx['disable'](x0) }

  function _emscripten_glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _emscripten_glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _emscripten_glDrawArraysInstanced(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }

  function _emscripten_glDrawArraysInstancedANGLE(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }

  function _emscripten_glDrawArraysInstancedARB(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }

  function _emscripten_glDrawArraysInstancedEXT(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }

  function _emscripten_glDrawArraysInstancedNV(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }

  var tempFixedLengthArray=[];
  function _emscripten_glDrawBuffers(n, bufs) {
  
      var bufArray = tempFixedLengthArray[n];
      for (var i = 0; i < n; i++) {
        bufArray[i] = ((SAFE_HEAP_LOAD((((bufs)+(i*4))|0), 4, 0))|0);
      }
  
      GLctx['drawBuffers'](bufArray);
    }

  function _emscripten_glDrawBuffersEXT(n, bufs) {
  
      var bufArray = tempFixedLengthArray[n];
      for (var i = 0; i < n; i++) {
        bufArray[i] = ((SAFE_HEAP_LOAD((((bufs)+(i*4))|0), 4, 0))|0);
      }
  
      GLctx['drawBuffers'](bufArray);
    }

  function _emscripten_glDrawBuffersWEBGL(n, bufs) {
  
      var bufArray = tempFixedLengthArray[n];
      for (var i = 0; i < n; i++) {
        bufArray[i] = ((SAFE_HEAP_LOAD((((bufs)+(i*4))|0), 4, 0))|0);
      }
  
      GLctx['drawBuffers'](bufArray);
    }

  function _emscripten_glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _emscripten_glDrawElementsInstanced(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }

  function _emscripten_glDrawElementsInstancedANGLE(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }

  function _emscripten_glDrawElementsInstancedARB(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }

  function _emscripten_glDrawElementsInstancedEXT(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }

  function _emscripten_glDrawElementsInstancedNV(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }

  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }
  function _emscripten_glDrawRangeElements(mode, start, end, count, type, indices) {
      // TODO: This should be a trivial pass-though function registered at the bottom of this page as
      // glFuncs[6][1] += ' drawRangeElements';
      // but due to https://bugzilla.mozilla.org/show_bug.cgi?id=1202427,
      // we work around by ignoring the range.
      _glDrawElements(mode, count, type, indices);
    }

  function _emscripten_glEnable(x0) { GLctx['enable'](x0) }

  function _emscripten_glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _emscripten_glEndQuery(x0) { GLctx['endQuery'](x0) }

  function _emscripten_glEndQueryEXT(target) {
      GLctx.disjointTimerQueryExt['endQueryEXT'](target);
    }

  function _emscripten_glEndTransformFeedback() { GLctx['endTransformFeedback']() }

  function _emscripten_glFenceSync(condition, flags) {
      var sync = GLctx.fenceSync(condition, flags);
      if (sync) {
        var id = GL.getNewId(GL.syncs);
        sync.name = id;
        GL.syncs[id] = sync;
        return id;
      } else {
        return 0; // Failed to create a sync object
      }
    }

  function _emscripten_glFinish() { GLctx['finish']() }

  function _emscripten_glFlush() { GLctx['flush']() }

  function _emscripten_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    }

  function _emscripten_glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }

  function _emscripten_glFramebufferTextureLayer(target, attachment, texture, level, layer) {
      GLctx.framebufferTextureLayer(target, attachment, GL.textures[texture], level, layer);
    }

  function _emscripten_glFrontFace(x0) { GLctx['frontFace'](x0) }

  function __glGenObject(n, buffers, createFunction, objectTable
      ) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx[createFunction]();
        var id = buffer && GL.getNewId(objectTable);
        if (buffer) {
          buffer.name = id;
          objectTable[id] = buffer;
        } else {
          GL.recordError(0x502 /* GL_INVALID_OPERATION */);
        }
        SAFE_HEAP_STORE((((buffers)+(i*4))|0), ((id)|0), 4);
      }
    }
  function _emscripten_glGenBuffers(n, buffers) {
      __glGenObject(n, buffers, 'createBuffer', GL.buffers
        );
    }

  function _emscripten_glGenFramebuffers(n, ids) {
      __glGenObject(n, ids, 'createFramebuffer', GL.framebuffers
        );
    }

  function _emscripten_glGenQueries(n, ids) {
      __glGenObject(n, ids, 'createQuery', GL.queries
        );
    }

  function _emscripten_glGenQueriesEXT(n, ids) {
      for (var i = 0; i < n; i++) {
        var query = GLctx.disjointTimerQueryExt['createQueryEXT']();
        if (!query) {
          GL.recordError(0x502 /* GL_INVALID_OPERATION */);
          while(i < n) SAFE_HEAP_STORE((((ids)+(i++*4))|0), ((0)|0), 4);
          return;
        }
        var id = GL.getNewId(GL.timerQueriesEXT);
        query.name = id;
        GL.timerQueriesEXT[id] = query;
        SAFE_HEAP_STORE((((ids)+(i*4))|0), ((id)|0), 4);
      }
    }

  function _emscripten_glGenRenderbuffers(n, renderbuffers) {
      __glGenObject(n, renderbuffers, 'createRenderbuffer', GL.renderbuffers
        );
    }

  function _emscripten_glGenSamplers(n, samplers) {
      __glGenObject(n, samplers, 'createSampler', GL.samplers
        );
    }

  function _emscripten_glGenTextures(n, textures) {
      __glGenObject(n, textures, 'createTexture', GL.textures
        );
    }

  function _emscripten_glGenTransformFeedbacks(n, ids) {
      __glGenObject(n, ids, 'createTransformFeedback', GL.transformFeedbacks
        );
    }

  function _emscripten_glGenVertexArrays(n, arrays) {
      __glGenObject(n, arrays, 'createVertexArray', GL.vaos
        );
    }

  function _emscripten_glGenVertexArraysOES(n, arrays) {
      __glGenObject(n, arrays, 'createVertexArray', GL.vaos
        );
    }

  function _emscripten_glGenerateMipmap(x0) { GLctx['generateMipmap'](x0) }

  function __glGetActiveAttribOrUniform(funcName, program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx[funcName](program, index);
      if (info) { // If an error occurs, nothing will be written to length, size and type and name.
        var numBytesWrittenExclNull = name && stringToUTF8(info.name, name, bufSize);
        if (length) SAFE_HEAP_STORE(((length)|0), ((numBytesWrittenExclNull)|0), 4);
        if (size) SAFE_HEAP_STORE(((size)|0), ((info.size)|0), 4);
        if (type) SAFE_HEAP_STORE(((type)|0), ((info.type)|0), 4);
      }
    }
  function _emscripten_glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
      __glGetActiveAttribOrUniform('getActiveAttrib', program, index, bufSize, length, size, type, name);
    }

  function _emscripten_glGetActiveUniform(program, index, bufSize, length, size, type, name) {
      __glGetActiveAttribOrUniform('getActiveUniform', program, index, bufSize, length, size, type, name);
    }

  function _emscripten_glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) {
      program = GL.programs[program];
  
      var result = GLctx['getActiveUniformBlockName'](program, uniformBlockIndex);
      if (!result) return; // If an error occurs, nothing will be written to uniformBlockName or length.
      if (uniformBlockName && bufSize > 0) {
        var numBytesWrittenExclNull = stringToUTF8(result, uniformBlockName, bufSize);
        if (length) SAFE_HEAP_STORE(((length)|0), ((numBytesWrittenExclNull)|0), 4);
      } else {
        if (length) SAFE_HEAP_STORE(((length)|0), ((0)|0), 4);
      }
    }

  function _emscripten_glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      program = GL.programs[program];
  
      switch(pname) {
        case 0x8A41: /* GL_UNIFORM_BLOCK_NAME_LENGTH */
          var name = GLctx['getActiveUniformBlockName'](program, uniformBlockIndex);
          SAFE_HEAP_STORE(((params)|0), ((name.length+1)|0), 4);
          return;
        default:
          var result = GLctx['getActiveUniformBlockParameter'](program, uniformBlockIndex, pname);
          if (!result) return; // If an error occurs, nothing will be written to params.
          if (typeof result == 'number') {
            SAFE_HEAP_STORE(((params)|0), ((result)|0), 4);
          } else {
            for (var i = 0; i < result.length; i++) {
              SAFE_HEAP_STORE((((params)+(i*4))|0), ((result[i])|0), 4);
            }
          }
      }
    }

  function _emscripten_glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      if (uniformCount > 0 && uniformIndices == 0) {
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      program = GL.programs[program];
      var ids = [];
      for (var i = 0; i < uniformCount; i++) {
        ids.push(((SAFE_HEAP_LOAD((((uniformIndices)+(i*4))|0), 4, 0))|0));
      }
  
      var result = GLctx['getActiveUniforms'](program, ids, pname);
      if (!result) return; // GL spec: If an error is generated, nothing is written out to params.
  
      var len = result.length;
      for (var i = 0; i < len; i++) {
        SAFE_HEAP_STORE((((params)+(i*4))|0), ((result[i])|0), 4);
      }
    }

  function _emscripten_glGetAttachedShaders(program, maxCount, count, shaders) {
      var result = GLctx.getAttachedShaders(GL.programs[program]);
      var len = result.length;
      if (len > maxCount) {
        len = maxCount;
      }
      SAFE_HEAP_STORE(((count)|0), ((len)|0), 4);
      for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        SAFE_HEAP_STORE((((shaders)+(i*4))|0), ((id)|0), 4);
      }
    }

  function _emscripten_glGetAttribLocation(program, name) {
      return GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name));
    }

  function readI53FromI64(ptr) {
      return HEAPU32[ptr>>2] + HEAP32[ptr+4>>2] * 4294967296;
    }
  
  function readI53FromU64(ptr) {
      return HEAPU32[ptr>>2] + HEAPU32[ptr+4>>2] * 4294967296;
    }
  function writeI53ToI64(ptr, num) {
      HEAPU32[ptr>>2] = num;
      HEAPU32[ptr+4>>2] = (num - HEAPU32[ptr>>2])/4294967296;
      var deserialized = (num >= 0) ? readI53FromU64(ptr) : readI53FromI64(ptr);
      if (deserialized != num) warnOnce('writeI53ToI64() out of range: serialized JS Number ' + num + ' to Wasm heap as bytes lo=0x' + HEAPU32[ptr>>2].toString(16) + ', hi=0x' + HEAPU32[ptr+4>>2].toString(16) + ', which deserializes back to ' + deserialized + ' instead!');
    }
  function emscriptenWebGLGet(name_, p, type) {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
      // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
      // better to report an error instead of doing anything random.
      if (!p) {
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch(name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type != 0 && type != 1) {
            GL.recordError(0x500); // GL_INVALID_ENUM
          }
          return; // Do not write anything to the out pointer, since no binary formats are supported.
        case 0x87FE: // GL_NUM_PROGRAM_BINARY_FORMATS
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
          // so implement it ourselves to allow C++ GLES2 code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats ? formats.length : 0;
          break;
        case 0x821D: // GL_NUM_EXTENSIONS
          if (GL.currentContext.version < 2) {
            GL.recordError(0x502 /* GL_INVALID_OPERATION */); // Calling GLES3/WebGL2 function with a GLES2/WebGL1 context
            return;
          }
          // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
          var exts = GLctx.getSupportedExtensions() || [];
          ret = 2 * exts.length; // each extension is duplicated, first in unprefixed WebGL form, and then a second time with "GL_" prefix.
          break;
        case 0x821B: // GL_MAJOR_VERSION
        case 0x821C: // GL_MINOR_VERSION
          if (GL.currentContext.version < 2) {
            GL.recordError(0x500); // GL_INVALID_ENUM
            return;
          }
          ret = name_ == 0x821B ? 3 : 0; // return version 3.0
          break;
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof(result)) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
              // can mean an invalid name_, which we need to report as an error
              switch(name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING or DRAW_FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x85B5: // WebGL 2 GL_VERTEX_ARRAY_BINDING, or WebGL 1 extension OES_vertex_array_object GL_VERTEX_ARRAY_BINDING_OES
                case 0x8F36: // COPY_READ_BUFFER_BINDING or COPY_READ_BUFFER
                case 0x8F37: // COPY_WRITE_BUFFER_BINDING or COPY_WRITE_BUFFER
                case 0x88ED: // PIXEL_PACK_BUFFER_BINDING
                case 0x88EF: // PIXEL_UNPACK_BUFFER_BINDING
                case 0x8CAA: // READ_FRAMEBUFFER_BINDING
                case 0x8919: // SAMPLER_BINDING
                case 0x8C1D: // TEXTURE_BINDING_2D_ARRAY
                case 0x806A: // TEXTURE_BINDING_3D
                case 0x8E25: // TRANSFORM_FEEDBACK_BINDING
                case 0x8C8F: // TRANSFORM_FEEDBACK_BUFFER_BINDING
                case 0x8A28: // UNIFORM_BUFFER_BINDING
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 0: SAFE_HEAP_STORE((((p)+(i*4))|0), ((result[i])|0), 4); break;
                  case 2: SAFE_HEAP_STORE_D((((p)+(i*4))|0), Math_fround(result[i]), 4); break;
                  case 4: SAFE_HEAP_STORE((((p)+(i))|0), ((result[i] ? 1 : 0)|0), 1); break;
                }
              }
              return;
            } else {
              try {
                ret = result.name | 0;
              } catch(e) {
                GL.recordError(0x500); // GL_INVALID_ENUM
                err('GL_INVALID_ENUM in glGet' + type + 'v: Unknown object returned from WebGL getParameter(' + name_ + ')! (error: ' + e + ')');
                return;
              }
            }
            break;
          default:
            GL.recordError(0x500); // GL_INVALID_ENUM
            err('GL_INVALID_ENUM in glGet' + type + 'v: Native code calling glGet' + type + 'v(' + name_ + ') and it returns ' + result + ' of type ' + typeof(result) + '!');
            return;
        }
      }
  
      switch (type) {
        case 1: writeI53ToI64(p, ret); break;
        case 0: SAFE_HEAP_STORE(((p)|0), ((ret)|0), 4); break;
        case 2:   SAFE_HEAP_STORE_D(((p)|0), Math_fround(ret), 4); break;
        case 4: SAFE_HEAP_STORE(((p)|0), ((ret ? 1 : 0)|0), 1); break;
      }
    }
  function _emscripten_glGetBooleanv(name_, p) {
      emscriptenWebGLGet(name_, p, 4);
    }

  function _emscripten_glGetBufferParameteri64v(target, value, data) {
      if (!data) {
        // GLES2 specification does not specify how to behave if data is a null pointer. Since calling this function does not make sense
        // if data == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      writeI53ToI64(data, GLctx.getBufferParameter(target, value));
    }

  function _emscripten_glGetBufferParameteriv(target, value, data) {
      if (!data) {
        // GLES2 specification does not specify how to behave if data is a null pointer. Since calling this function does not make sense
        // if data == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      SAFE_HEAP_STORE(((data)|0), ((GLctx.getBufferParameter(target, value))|0), 4);
    }

  function _emscripten_glGetError() {
      var error = GLctx.getError() || GL.lastError;
      GL.lastError = 0/*GL_NO_ERROR*/;
      return error;
    }

  function _emscripten_glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 2);
    }

  function _emscripten_glGetFragDataLocation(program, name) {
      return GLctx['getFragDataLocation'](GL.programs[program], UTF8ToString(name));
    }

  function _emscripten_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
      var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
      if (result instanceof WebGLRenderbuffer ||
          result instanceof WebGLTexture) {
        result = result.name | 0;
      }
      SAFE_HEAP_STORE(((params)|0), ((result)|0), 4);
    }

  function emscriptenWebGLGetIndexed(target, index, data, type) {
      if (!data) {
        // GLES2 specification does not specify how to behave if data is a null pointer. Since calling this function does not make sense
        // if data == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var result = GLctx['getIndexedParameter'](target, index);
      var ret;
      switch (typeof result) {
        case 'boolean':
          ret = result ? 1 : 0;
          break;
        case 'number':
          ret = result;
          break;
        case 'object':
          if (result === null) {
            switch (target) {
              case 0x8C8F: // TRANSFORM_FEEDBACK_BUFFER_BINDING
              case 0x8A28: // UNIFORM_BUFFER_BINDING
                ret = 0;
                break;
              default: {
                GL.recordError(0x500); // GL_INVALID_ENUM
                return;
              }
            }
          } else if (result instanceof WebGLBuffer) {
            ret = result.name | 0;
          } else {
            GL.recordError(0x500); // GL_INVALID_ENUM
            return;
          }
          break;
        default:
          GL.recordError(0x500); // GL_INVALID_ENUM
          return;
      }
  
      switch (type) {
        case 1: writeI53ToI64(data, ret); break;
        case 0: SAFE_HEAP_STORE(((data)|0), ((ret)|0), 4); break;
        case 2: SAFE_HEAP_STORE_D(((data)|0), Math_fround(ret), 4); break;
        case 4: SAFE_HEAP_STORE(((data)|0), ((ret ? 1 : 0)|0), 1); break;
        default: throw 'internal emscriptenWebGLGetIndexed() error, bad type: ' + type;
      }
    }
  function _emscripten_glGetInteger64i_v(target, index, data) {
      emscriptenWebGLGetIndexed(target, index, data, 1);
    }

  function _emscripten_glGetInteger64v(name_, p) {
      emscriptenWebGLGet(name_, p, 1);
    }

  function _emscripten_glGetIntegeri_v(target, index, data) {
      emscriptenWebGLGetIndexed(target, index, data, 0);
    }

  function _emscripten_glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 0);
    }

  function _emscripten_glGetInternalformativ(target, internalformat, pname, bufSize, params) {
      if (bufSize < 0) {
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      if (!params) {
        // GLES3 specification does not specify how to behave if values is a null pointer. Since calling this function does not make sense
        // if values == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = GLctx['getInternalformatParameter'](target, internalformat, pname);
      if (ret === null) return;
      for (var i = 0; i < ret.length && i < bufSize; ++i) {
        SAFE_HEAP_STORE((((params)+(i))|0), ((ret[i])|0), 4);
      }
    }

  function _emscripten_glGetProgramBinary(program, bufSize, length, binaryFormat, binary) {
      GL.recordError(0x502/*GL_INVALID_OPERATION*/);
    }

  function _emscripten_glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) SAFE_HEAP_STORE(((length)|0), ((numBytesWrittenExclNull)|0), 4);
    }

  function _emscripten_glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        SAFE_HEAP_STORE(((p)|0), ((log.length + 1)|0), 4);
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        SAFE_HEAP_STORE(((p)|0), ((ptable.maxUniformLength)|0), 4);
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, 0x8B89/*GL_ACTIVE_ATTRIBUTES*/);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        SAFE_HEAP_STORE(((p)|0), ((ptable.maxAttributeLength)|0), 4);
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, 0x8A36/*GL_ACTIVE_UNIFORM_BLOCKS*/);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        SAFE_HEAP_STORE(((p)|0), ((ptable.maxUniformBlockNameLength)|0), 4);
      } else {
        SAFE_HEAP_STORE(((p)|0), ((GLctx.getProgramParameter(GL.programs[program], pname))|0), 4);
      }
    }

  function _emscripten_glGetQueryObjecti64vEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      writeI53ToI64(params, ret);
    }

  function _emscripten_glGetQueryObjectivEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      SAFE_HEAP_STORE(((params)|0), ((ret)|0), 4);
    }

  function _emscripten_glGetQueryObjectui64vEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      writeI53ToI64(params, ret);
    }

  function _emscripten_glGetQueryObjectuiv(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.queries[id];
      var param = GLctx['getQueryParameter'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      SAFE_HEAP_STORE(((params)|0), ((ret)|0), 4);
    }

  function _emscripten_glGetQueryObjectuivEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      SAFE_HEAP_STORE(((params)|0), ((ret)|0), 4);
    }

  function _emscripten_glGetQueryiv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      SAFE_HEAP_STORE(((params)|0), ((GLctx['getQuery'](target, pname))|0), 4);
    }

  function _emscripten_glGetQueryivEXT(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      SAFE_HEAP_STORE(((params)|0), ((GLctx.disjointTimerQueryExt['getQueryEXT'](target, pname))|0), 4);
    }

  function _emscripten_glGetRenderbufferParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      SAFE_HEAP_STORE(((params)|0), ((GLctx.getRenderbufferParameter(target, pname))|0), 4);
    }

  function _emscripten_glGetSamplerParameterfv(sampler, pname, params) {
      if (!params) {
        // GLES3 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      sampler = GL.samplers[sampler];
      SAFE_HEAP_STORE_D(((params)|0), Math_fround(GLctx['getSamplerParameter'](sampler, pname)), 4);
    }

  function _emscripten_glGetSamplerParameteriv(sampler, pname, params) {
      if (!params) {
        // GLES3 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      sampler = GL.samplers[sampler];
      SAFE_HEAP_STORE(((params)|0), ((GLctx['getSamplerParameter'](sampler, pname))|0), 4);
    }

  function _emscripten_glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) SAFE_HEAP_STORE(((length)|0), ((numBytesWrittenExclNull)|0), 4);
    }

  function _emscripten_glGetShaderPrecisionFormat(shaderType, precisionType, range, precision) {
      var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
      SAFE_HEAP_STORE(((range)|0), ((result.rangeMin)|0), 4);
      SAFE_HEAP_STORE((((range)+(4))|0), ((result.rangeMax)|0), 4);
      SAFE_HEAP_STORE(((precision)|0), ((result.precision)|0), 4);
    }

  function _emscripten_glGetShaderSource(shader, bufSize, length, source) {
      var result = GLctx.getShaderSource(GL.shaders[shader]);
      if (!result) return; // If an error occurs, nothing will be written to length or source.
      var numBytesWrittenExclNull = (bufSize > 0 && source) ? stringToUTF8(result, source, bufSize) : 0;
      if (length) SAFE_HEAP_STORE(((length)|0), ((numBytesWrittenExclNull)|0), 4);
    }

  function _emscripten_glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        // The GLES2 specification says that if the shader has an empty info log,
        // a value of 0 is returned. Otherwise the log has a null char appended.
        // (An empty string is falsey, so we can just check that instead of
        // looking at log.length.)
        var logLength = log ? log.length + 1 : 0;
        SAFE_HEAP_STORE(((p)|0), ((logLength)|0), 4);
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        // source may be a null, or the empty string, both of which are falsey
        // values that we report a 0 length for.
        var sourceLength = source ? source.length + 1 : 0;
        SAFE_HEAP_STORE(((p)|0), ((sourceLength)|0), 4);
      } else {
        SAFE_HEAP_STORE(((p)|0), ((GLctx.getShaderParameter(GL.shaders[shader], pname))|0), 4);
      }
    }

  function stringToNewUTF8(jsString) {
      var length = lengthBytesUTF8(jsString)+1;
      var cString = _malloc(length);
      stringToUTF8(jsString, cString, length);
      return cString;
    }
  function _emscripten_glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret;
      switch(name_) {
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions() || []; // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
          exts = exts.concat(exts.map(function(e) { return "GL_" + e; }));
          ret = stringToNewUTF8(exts.join(' '));
          break;
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          var s = GLctx.getParameter(name_);
          if (!s) {
            GL.recordError(0x500/*GL_INVALID_ENUM*/);
          }
          ret = stringToNewUTF8(s);
          break;
  
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(0x1F02 /*GL_VERSION*/);
          // return GLES version string corresponding to the version of the WebGL context
          if (GL.currentContext.version >= 2) glVersion = 'OpenGL ES 3.0 (' + glVersion + ')';
          else
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = stringToNewUTF8(glVersion);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(0x8B8C /*GL_SHADING_LANGUAGE_VERSION*/);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = stringToNewUTF8(glslVersion);
          break;
        default:
          GL.recordError(0x500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _emscripten_glGetStringi(name, index) {
      if (GL.currentContext.version < 2) {
        GL.recordError(0x502 /* GL_INVALID_OPERATION */); // Calling GLES3/WebGL2 function with a GLES2/WebGL1 context
        return 0;
      }
      var stringiCache = GL.stringiCache[name];
      if (stringiCache) {
        if (index < 0 || index >= stringiCache.length) {
          GL.recordError(0x501/*GL_INVALID_VALUE*/);
          return 0;
        }
        return stringiCache[index];
      }
      switch(name) {
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions() || []; // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
          exts = exts.concat(exts.map(function(e) { return "GL_" + e; }));
          exts = exts.map(function(e) { return stringToNewUTF8(e); });
  
          stringiCache = GL.stringiCache[name] = exts;
          if (index < 0 || index >= stringiCache.length) {
            GL.recordError(0x501/*GL_INVALID_VALUE*/);
            return 0;
          }
          return stringiCache[index];
        default:
          GL.recordError(0x500/*GL_INVALID_ENUM*/);
          return 0;
      }
    }

  function _emscripten_glGetSynciv(sync, pname, bufSize, length, values) {
      if (bufSize < 0) {
        // GLES3 specification does not specify how to behave if bufSize < 0, however in the spec wording for glGetInternalformativ, it does say that GL_INVALID_VALUE should be raised,
        // so raise GL_INVALID_VALUE here as well.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      if (!values) {
        // GLES3 specification does not specify how to behave if values is a null pointer. Since calling this function does not make sense
        // if values == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = GLctx.getSyncParameter(GL.syncs[sync], pname);
      SAFE_HEAP_STORE(((length)|0), ((ret)|0), 4);
      if (ret !== null && length) SAFE_HEAP_STORE(((length)|0), ((1)|0), 4); // Report a single value outputted.
    }

  function _emscripten_glGetTexParameterfv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      SAFE_HEAP_STORE_D(((params)|0), Math_fround(GLctx.getTexParameter(target, pname)), 4);
    }

  function _emscripten_glGetTexParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      SAFE_HEAP_STORE(((params)|0), ((GLctx.getTexParameter(target, pname))|0), 4);
    }

  function _emscripten_glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx['getTransformFeedbackVarying'](program, index);
      if (!info) return; // If an error occurred, the return parameters length, size, type and name will be unmodified.
  
      if (name && bufSize > 0) {
        var numBytesWrittenExclNull = stringToUTF8(info.name, name, bufSize);
        if (length) SAFE_HEAP_STORE(((length)|0), ((numBytesWrittenExclNull)|0), 4);
      } else {
        if (length) SAFE_HEAP_STORE(((length)|0), ((0)|0), 4);
      }
  
      if (size) SAFE_HEAP_STORE(((size)|0), ((info.size)|0), 4);
      if (type) SAFE_HEAP_STORE(((type)|0), ((info.type)|0), 4);
    }

  function _emscripten_glGetUniformBlockIndex(program, uniformBlockName) {
      return GLctx['getUniformBlockIndex'](GL.programs[program], UTF8ToString(uniformBlockName));
    }

  function _emscripten_glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) {
      if (!uniformIndices) {
        // GLES2 specification does not specify how to behave if uniformIndices is a null pointer. Since calling this function does not make sense
        // if uniformIndices == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      if (uniformCount > 0 && (uniformNames == 0 || uniformIndices == 0)) {
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      program = GL.programs[program];
      var names = [];
      for (var i = 0; i < uniformCount; i++)
        names.push(UTF8ToString(((SAFE_HEAP_LOAD((((uniformNames)+(i*4))|0), 4, 0))|0)));
  
      var result = GLctx['getUniformIndices'](program, names);
      if (!result) return; // GL spec: If an error is generated, nothing is written out to uniformIndices.
  
      var len = result.length;
      for (var i = 0; i < len; i++) {
        SAFE_HEAP_STORE((((uniformIndices)+(i*4))|0), ((result[i])|0), 4);
      }
    }

  /** @suppress {checkTypes} */
  function jstoi_q(str) {
      return parseInt(str);
    }
  function _emscripten_glGetUniformLocation(program, name) {
      name = UTF8ToString(name);
  
      var arrayIndex = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name[name.length - 1] == ']') {
        var leftBrace = name.lastIndexOf('[');
        arrayIndex = name[leftBrace+1] != ']' ? jstoi_q(name.slice(leftBrace + 1)) : 0; // "index]", parseInt will ignore the ']' at the end; but treat "foo[]" as "foo[0]"
        name = name.slice(0, leftBrace);
      }
  
      var uniformInfo = GL.programInfos[program] && GL.programInfos[program].uniforms[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayIndex >= 0 && arrayIndex < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1] + arrayIndex;
      } else {
        return -1;
      }
    }

  /** @suppress{checkTypes} */
  function emscriptenWebGLGetUniform(program, location, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);
      if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 0: SAFE_HEAP_STORE(((params)|0), ((data)|0), 4); break;
          case 2: SAFE_HEAP_STORE_D(((params)|0), Math_fround(data), 4); break;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 0: SAFE_HEAP_STORE((((params)+(i*4))|0), ((data[i])|0), 4); break;
            case 2: SAFE_HEAP_STORE_D((((params)+(i*4))|0), Math_fround(data[i]), 4); break;
          }
        }
      }
    }
  function _emscripten_glGetUniformfv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 2);
    }

  function _emscripten_glGetUniformiv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 0);
    }

  function _emscripten_glGetUniformuiv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 0);
    }

  /** @suppress{checkTypes} */
  function emscriptenWebGLGetVertexAttrib(index, pname, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getVertexAttrib(index, pname);
      if (pname == 0x889F/*VERTEX_ATTRIB_ARRAY_BUFFER_BINDING*/) {
        SAFE_HEAP_STORE(((params)|0), ((data && data["name"])|0), 4);
      } else if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 0: SAFE_HEAP_STORE(((params)|0), ((data)|0), 4); break;
          case 2: SAFE_HEAP_STORE_D(((params)|0), Math_fround(data), 4); break;
          case 5: SAFE_HEAP_STORE(((params)|0), ((Math.fround(data))|0), 4); break;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 0: SAFE_HEAP_STORE((((params)+(i*4))|0), ((data[i])|0), 4); break;
            case 2: SAFE_HEAP_STORE_D((((params)+(i*4))|0), Math_fround(data[i]), 4); break;
            case 5: SAFE_HEAP_STORE((((params)+(i*4))|0), ((Math.fround(data[i]))|0), 4); break;
          }
        }
      }
    }
  function _emscripten_glGetVertexAttribIiv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttribI4iv(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 0);
    }

  function _emscripten_glGetVertexAttribIuiv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttribI4iv(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 0);
    }

  function _emscripten_glGetVertexAttribPointerv(index, pname, pointer) {
      if (!pointer) {
        // GLES2 specification does not specify how to behave if pointer is a null pointer. Since calling this function does not make sense
        // if pointer == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      SAFE_HEAP_STORE(((pointer)|0), ((GLctx.getVertexAttribOffset(index, pname))|0), 4);
    }

  function _emscripten_glGetVertexAttribfv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 2);
    }

  function _emscripten_glGetVertexAttribiv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 5);
    }

  function _emscripten_glHint(x0, x1) { GLctx['hint'](x0, x1) }

  function _emscripten_glInvalidateFramebuffer(target, numAttachments, attachments) {
      var list = tempFixedLengthArray[numAttachments];
      for (var i = 0; i < numAttachments; i++) {
        list[i] = ((SAFE_HEAP_LOAD((((attachments)+(i*4))|0), 4, 0))|0);
      }
  
      GLctx['invalidateFramebuffer'](target, list);
    }

  function _emscripten_glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) {
      var list = tempFixedLengthArray[numAttachments];
      for (var i = 0; i < numAttachments; i++) {
        list[i] = ((SAFE_HEAP_LOAD((((attachments)+(i*4))|0), 4, 0))|0);
      }
  
      GLctx['invalidateSubFramebuffer'](target, list, x, y, width, height);
    }

  function _emscripten_glIsBuffer(buffer) {
      var b = GL.buffers[buffer];
      if (!b) return 0;
      return GLctx.isBuffer(b);
    }

  function _emscripten_glIsEnabled(x0) { return GLctx['isEnabled'](x0) }

  function _emscripten_glIsFramebuffer(framebuffer) {
      var fb = GL.framebuffers[framebuffer];
      if (!fb) return 0;
      return GLctx.isFramebuffer(fb);
    }

  function _emscripten_glIsProgram(program) {
      program = GL.programs[program];
      if (!program) return 0;
      return GLctx.isProgram(program);
    }

  function _emscripten_glIsQuery(id) {
      var query = GL.queries[id];
      if (!query) return 0;
      return GLctx['isQuery'](query);
    }

  function _emscripten_glIsQueryEXT(id) {
      var query = GL.timerQueriesEXT[id];
      if (!query) return 0;
      return GLctx.disjointTimerQueryExt['isQueryEXT'](query);
    }

  function _emscripten_glIsRenderbuffer(renderbuffer) {
      var rb = GL.renderbuffers[renderbuffer];
      if (!rb) return 0;
      return GLctx.isRenderbuffer(rb);
    }

  function _emscripten_glIsSampler(id) {
      var sampler = GL.samplers[id];
      if (!sampler) return 0;
      return GLctx['isSampler'](sampler);
    }

  function _emscripten_glIsShader(shader) {
      var s = GL.shaders[shader];
      if (!s) return 0;
      return GLctx.isShader(s);
    }

  function _emscripten_glIsSync(sync) {
      return GLctx.isSync(GL.syncs[sync]);
    }

  function _emscripten_glIsTexture(id) {
      var texture = GL.textures[id];
      if (!texture) return 0;
      return GLctx.isTexture(texture);
    }

  function _emscripten_glIsTransformFeedback(id) {
      return GLctx['isTransformFeedback'](GL.transformFeedbacks[id]);
    }

  function _emscripten_glIsVertexArray(array) {
  
      var vao = GL.vaos[array];
      if (!vao) return 0;
      return GLctx['isVertexArray'](vao);
    }

  function _emscripten_glIsVertexArrayOES(array) {
  
      var vao = GL.vaos[array];
      if (!vao) return 0;
      return GLctx['isVertexArray'](vao);
    }

  function _emscripten_glLineWidth(x0) { GLctx['lineWidth'](x0) }

  function _emscripten_glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.populateUniformTable(program);
    }

  function _emscripten_glPauseTransformFeedback() { GLctx['pauseTransformFeedback']() }

  function _emscripten_glPixelStorei(pname, param) {
      if (pname == 0xCF5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _emscripten_glPolygonOffset(x0, x1) { GLctx['polygonOffset'](x0, x1) }

  function _emscripten_glProgramBinary(program, binaryFormat, binary, length) {
      GL.recordError(0x500/*GL_INVALID_ENUM*/);
    }

  function _emscripten_glProgramParameteri(program, pname, value) {
      GL.recordError(0x500/*GL_INVALID_ENUM*/);
    }

  function _emscripten_glQueryCounterEXT(id, target) {
      GLctx.disjointTimerQueryExt['queryCounterEXT'](GL.timerQueriesEXT[id], target);
    }

  function _emscripten_glReadBuffer(x0) { GLctx['readBuffer'](x0) }

  function computeUnpackAlignedImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return (x + y - 1) & -y;
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return height * alignedRowSize;
    }
  
  function __colorChannelsInGlTextureFormat(format) {
      // Micro-optimizations for size: map format to size by subtracting smallest enum value (0x1902) from all values first.
      // Also omit the most common size value (1) from the list, which is assumed by formats not on the list.
      var colorChannels = {
        // 0x1902 /* GL_DEPTH_COMPONENT */ - 0x1902: 1,
        // 0x1906 /* GL_ALPHA */ - 0x1902: 1,
        5: 3,
        6: 4,
        // 0x1909 /* GL_LUMINANCE */ - 0x1902: 1,
        8: 2,
        29502: 3,
        29504: 4,
        // 0x1903 /* GL_RED */ - 0x1902: 1,
        26917: 2,
        26918: 2,
        // 0x8D94 /* GL_RED_INTEGER */ - 0x1902: 1,
        29846: 3,
        29847: 4
      };
      return colorChannels[format - 0x1902]||1;
    }
  
  function heapObjectForWebGLType(type) {
      // Micro-optimization for size: Subtract lowest GL enum number (0x1400/* GL_BYTE */) from type to compare
      // smaller values for the heap, for shorter generated code size.
      // Also the type HEAPU16 is not tested for explicitly, but any unrecognized type will return out HEAPU16.
      // (since most types are HEAPU16)
      type -= 0x1400;
      if (type == 0) return HEAP8;
  
      if (type == 1) return HEAPU8;
  
      if (type == 2) return HEAP16;
  
      if (type == 4) return HEAP32;
  
      if (type == 6) return HEAPF32;
  
      if (type == 5
        || type == 28922
        || type == 28520
        || type == 30779
        || type == 30782
        )
        return HEAPU32;
  
      return HEAPU16;
    }
  
  function heapAccessShiftForWebGLHeap(heap) {
      return 31 - Math.clz32(heap.BYTES_PER_ELEMENT);
    }
  function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var heap = heapObjectForWebGLType(type);
      var shift = heapAccessShiftForWebGLHeap(heap);
      var byteSize = 1<<shift;
      var sizePerPixel = __colorChannelsInGlTextureFormat(format) * byteSize;
      var bytes = computeUnpackAlignedImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      return heap.subarray(pixels >> shift, pixels + bytes >> shift);
    }
  function _emscripten_glReadPixels(x, y, width, height, format, type, pixels) {
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        if (GLctx.currentPixelPackBufferBinding) {
          GLctx.readPixels(x, y, width, height, format, type, pixels);
        } else {
          var heap = heapObjectForWebGLType(type);
          GLctx.readPixels(x, y, width, height, format, type, heap, pixels >> heapAccessShiftForWebGLHeap(heap));
        }
        return;
      }
      var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
      if (!pixelData) {
        GL.recordError(0x500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, pixelData);
    }

  function _emscripten_glReleaseShaderCompiler() {
      // NOP (as allowed by GLES 2.0 spec)
    }

  function _emscripten_glRenderbufferStorage(x0, x1, x2, x3) { GLctx['renderbufferStorage'](x0, x1, x2, x3) }

  function _emscripten_glRenderbufferStorageMultisample(x0, x1, x2, x3, x4) { GLctx['renderbufferStorageMultisample'](x0, x1, x2, x3, x4) }

  function _emscripten_glResumeTransformFeedback() { GLctx['resumeTransformFeedback']() }

  function _emscripten_glSampleCoverage(value, invert) {
      GLctx.sampleCoverage(value, !!invert);
    }

  function _emscripten_glSamplerParameterf(sampler, pname, param) {
      GLctx['samplerParameterf'](GL.samplers[sampler], pname, param);
    }

  function _emscripten_glSamplerParameterfv(sampler, pname, params) {
      var param = Math_fround(SAFE_HEAP_LOAD_D(((params)|0), 4, 0));
      GLctx['samplerParameterf'](GL.samplers[sampler], pname, param);
    }

  function _emscripten_glSamplerParameteri(sampler, pname, param) {
      GLctx['samplerParameteri'](GL.samplers[sampler], pname, param);
    }

  function _emscripten_glSamplerParameteriv(sampler, pname, params) {
      var param = ((SAFE_HEAP_LOAD(((params)|0), 4, 0))|0);
      GLctx['samplerParameteri'](GL.samplers[sampler], pname, param);
    }

  function _emscripten_glScissor(x0, x1, x2, x3) { GLctx['scissor'](x0, x1, x2, x3) }

  function _emscripten_glShaderBinary() {
      GL.recordError(0x500/*GL_INVALID_ENUM*/);
    }

  function _emscripten_glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _emscripten_glStencilFunc(x0, x1, x2) { GLctx['stencilFunc'](x0, x1, x2) }

  function _emscripten_glStencilFuncSeparate(x0, x1, x2, x3) { GLctx['stencilFuncSeparate'](x0, x1, x2, x3) }

  function _emscripten_glStencilMask(x0) { GLctx['stencilMask'](x0) }

  function _emscripten_glStencilMaskSeparate(x0, x1) { GLctx['stencilMaskSeparate'](x0, x1) }

  function _emscripten_glStencilOp(x0, x1, x2) { GLctx['stencilOp'](x0, x1, x2) }

  function _emscripten_glStencilOpSeparate(x0, x1, x2, x3) { GLctx['stencilOpSeparate'](x0, x1, x2, x3) }

  function _emscripten_glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (GL.currentContext.version >= 2) {
        // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        if (GLctx.currentPixelUnpackBufferBinding) {
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
        } else if (pixels) {
          var heap = heapObjectForWebGLType(type);
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, heap, pixels >> heapAccessShiftForWebGLHeap(heap));
        } else {
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, null);
        }
        return;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null);
    }

  function _emscripten_glTexImage3D(target, level, internalFormat, width, height, depth, border, format, type, pixels) {
      if (GLctx.currentPixelUnpackBufferBinding) {
        GLctx['texImage3D'](target, level, internalFormat, width, height, depth, border, format, type, pixels);
      } else if (pixels) {
        var heap = heapObjectForWebGLType(type);
        GLctx['texImage3D'](target, level, internalFormat, width, height, depth, border, format, type, heap, pixels >> heapAccessShiftForWebGLHeap(heap));
      } else {
        GLctx['texImage3D'](target, level, internalFormat, width, height, depth, border, format, type, null);
      }
    }

  function _emscripten_glTexParameterf(x0, x1, x2) { GLctx['texParameterf'](x0, x1, x2) }

  function _emscripten_glTexParameterfv(target, pname, params) {
      var param = Math_fround(SAFE_HEAP_LOAD_D(((params)|0), 4, 0));
      GLctx.texParameterf(target, pname, param);
    }

  function _emscripten_glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _emscripten_glTexParameteriv(target, pname, params) {
      var param = ((SAFE_HEAP_LOAD(((params)|0), 4, 0))|0);
      GLctx.texParameteri(target, pname, param);
    }

  function _emscripten_glTexStorage2D(x0, x1, x2, x3, x4) { GLctx['texStorage2D'](x0, x1, x2, x3, x4) }

  function _emscripten_glTexStorage3D(x0, x1, x2, x3, x4, x5) { GLctx['texStorage3D'](x0, x1, x2, x3, x4, x5) }

  function _emscripten_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      if (GL.currentContext.version >= 2) {
        // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        if (GLctx.currentPixelUnpackBufferBinding) {
          GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
        } else if (pixels) {
          var heap = heapObjectForWebGLType(type);
          GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, heap, pixels >> heapAccessShiftForWebGLHeap(heap));
        } else {
          GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, null);
        }
        return;
      }
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0);
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
    }

  function _emscripten_glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) {
      if (GLctx.currentPixelUnpackBufferBinding) {
        GLctx['texSubImage3D'](target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
      } else if (pixels) {
        var heap = heapObjectForWebGLType(type);
        GLctx['texSubImage3D'](target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, heap, pixels >> heapAccessShiftForWebGLHeap(heap));
      } else {
        GLctx['texSubImage3D'](target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, null);
      }
    }

  function _emscripten_glTransformFeedbackVaryings(program, count, varyings, bufferMode) {
      program = GL.programs[program];
      var vars = [];
      for (var i = 0; i < count; i++)
        vars.push(UTF8ToString(((SAFE_HEAP_LOAD((((varyings)+(i*4))|0), 4, 0))|0)));
  
      GLctx['transformFeedbackVaryings'](program, vars, bufferMode);
    }

  function _emscripten_glUniform1f(location, v0) {
      GLctx.uniform1f(GL.uniforms[location], v0);
    }

  var miniTempWebGLFloatBuffers=[];
  function _emscripten_glUniform1fv(location, count, value) {
  
  
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        GLctx.uniform1fv(GL.uniforms[location], HEAPF32, value>>2, count);
        return;
      }
  
      if (count <= 288) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLFloatBuffers[count-1];
        for (var i = 0; i < count; ++i) {
          view[i] = Math_fround(SAFE_HEAP_LOAD_D((((value)+(4*i))|0), 4, 0));
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  var __miniTempWebGLIntBuffers=[];
  function _emscripten_glUniform1iv(location, count, value) {
  
  
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        GLctx.uniform1iv(GL.uniforms[location], HEAP32, value>>2, count);
        return;
      }
  
      if (count <= 288) {
        // avoid allocation when uploading few enough uniforms
        var view = __miniTempWebGLIntBuffers[count-1];
        for (var i = 0; i < count; ++i) {
          view[i] = ((SAFE_HEAP_LOAD((((value)+(4*i))|0), 4, 0))|0);
        }
      } else
      {
        var view = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1iv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform1ui(location, v0) {
      GLctx.uniform1ui(GL.uniforms[location], v0);
    }

  function _emscripten_glUniform1uiv(location, count, value) {
      GLctx.uniform1uiv(GL.uniforms[location], HEAPU32, value>>2, count);
    }

  function _emscripten_glUniform2f(location, v0, v1) {
      GLctx.uniform2f(GL.uniforms[location], v0, v1);
    }

  function _emscripten_glUniform2fv(location, count, value) {
  
  
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        GLctx.uniform2fv(GL.uniforms[location], HEAPF32, value>>2, count*2);
        return;
      }
  
      if (count <= 144) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLFloatBuffers[2*count-1];
        for (var i = 0; i < 2*count; i += 2) {
          view[i] = Math_fround(SAFE_HEAP_LOAD_D((((value)+(4*i))|0), 4, 0));
          view[i+1] = Math_fround(SAFE_HEAP_LOAD_D((((value)+(4*i+4))|0), 4, 0));
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform2i(location, v0, v1) {
      GLctx.uniform2i(GL.uniforms[location], v0, v1);
    }

  function _emscripten_glUniform2iv(location, count, value) {
  
  
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        GLctx.uniform2iv(GL.uniforms[location], HEAP32, value>>2, count*2);
        return;
      }
  
      if (count <= 144) {
        // avoid allocation when uploading few enough uniforms
        var view = __miniTempWebGLIntBuffers[2*count-1];
        for (var i = 0; i < 2*count; i += 2) {
          view[i] = ((SAFE_HEAP_LOAD((((value)+(4*i))|0), 4, 0))|0);
          view[i+1] = ((SAFE_HEAP_LOAD((((value)+(4*i+4))|0), 4, 0))|0);
        }
      } else
      {
        var view = HEAP32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2iv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform2ui(location, v0, v1) {
      GLctx.uniform2ui(GL.uniforms[location], v0, v1);
    }

  function _emscripten_glUniform2uiv(location, count, value) {
      GLctx.uniform2uiv(GL.uniforms[location], HEAPU32, value>>2, count*2);
    }

  function _emscripten_glUniform3f(location, v0, v1, v2) {
      GLctx.uniform3f(GL.uniforms[location], v0, v1, v2);
    }

  function _emscripten_glUniform3fv(location, count, value) {
  
  
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        GLctx.uniform3fv(GL.uniforms[location], HEAPF32, value>>2, count*3);
        return;
      }
  
      if (count <= 96) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLFloatBuffers[3*count-1];
        for (var i = 0; i < 3*count; i += 3) {
          view[i] = Math_fround(SAFE_HEAP_LOAD_D((((value)+(4*i))|0), 4, 0));
          view[i+1] = Math_fround(SAFE_HEAP_LOAD_D((((value)+(4*i+4))|0), 4, 0));
          view[i+2] = Math_fround(SAFE_HEAP_LOAD_D((((value)+(4*i+8))|0), 4, 0));
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform3i(location, v0, v1, v2) {
      GLctx.uniform3i(GL.uniforms[location], v0, v1, v2);
    }

  function _emscripten_glUniform3iv(location, count, value) {
  
  
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        GLctx.uniform3iv(GL.uniforms[location], HEAP32, value>>2, count*3);
        return;
      }
  
      if (count <= 96) {
        // avoid allocation when uploading few enough uniforms
        var view = __miniTempWebGLIntBuffers[3*count-1];
        for (var i = 0; i < 3*count; i += 3) {
          view[i] = ((SAFE_HEAP_LOAD((((value)+(4*i))|0), 4, 0))|0);
          view[i+1] = ((SAFE_HEAP_LOAD((((value)+(4*i+4))|0), 4, 0))|0);
          view[i+2] = ((SAFE_HEAP_LOAD((((value)+(4*i+8))|0), 4, 0))|0);
        }
      } else
      {
        var view = HEAP32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3iv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform3ui(location, v0, v1, v2) {
      GLctx.uniform3ui(GL.uniforms[location], v0, v1, v2);
    }

  function _emscripten_glUniform3uiv(location, count, value) {
      GLctx.uniform3uiv(GL.uniforms[location], HEAPU32, value>>2, count*3);
    }

  function _emscripten_glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _emscripten_glUniform4fv(location, count, value) {
  
  
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        GLctx.uniform4fv(GL.uniforms[location], HEAPF32, value>>2, count*4);
        return;
      }
  
      if (count <= 72) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLFloatBuffers[4*count-1];
        // hoist the heap out of the loop for size and for pthreads+growth.
        var heap = HEAPF32;
        value >>= 2;
        for (var i = 0; i < 4 * count; i += 4) {
          var dst = value + i;
          view[i] = heap[dst];
          view[i + 1] = heap[dst + 1];
          view[i + 2] = heap[dst + 2];
          view[i + 3] = heap[dst + 3];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform4i(location, v0, v1, v2, v3) {
      GLctx.uniform4i(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _emscripten_glUniform4iv(location, count, value) {
  
  
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        GLctx.uniform4iv(GL.uniforms[location], HEAP32, value>>2, count*4);
        return;
      }
  
      if (count <= 72) {
        // avoid allocation when uploading few enough uniforms
        var view = __miniTempWebGLIntBuffers[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = ((SAFE_HEAP_LOAD((((value)+(4*i))|0), 4, 0))|0);
          view[i+1] = ((SAFE_HEAP_LOAD((((value)+(4*i+4))|0), 4, 0))|0);
          view[i+2] = ((SAFE_HEAP_LOAD((((value)+(4*i+8))|0), 4, 0))|0);
          view[i+3] = ((SAFE_HEAP_LOAD((((value)+(4*i+12))|0), 4, 0))|0);
        }
      } else
      {
        var view = HEAP32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4iv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform4ui(location, v0, v1, v2, v3) {
      GLctx.uniform4ui(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _emscripten_glUniform4uiv(location, count, value) {
      GLctx.uniform4uiv(GL.uniforms[location], HEAPU32, value>>2, count*4);
    }

  function _emscripten_glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) {
      program = GL.programs[program];
  
      GLctx['uniformBlockBinding'](program, uniformBlockIndex, uniformBlockBinding);
    }

  function _emscripten_glUniformMatrix2fv(location, count, transpose, value) {
  
  
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        GLctx.uniformMatrix2fv(GL.uniforms[location], !!transpose, HEAPF32, value>>2, count*4);
        return;
      }
  
      if (count <= 72) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLFloatBuffers[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = Math_fround(SAFE_HEAP_LOAD_D((((value)+(4*i))|0), 4, 0));
          view[i+1] = Math_fround(SAFE_HEAP_LOAD_D((((value)+(4*i+4))|0), 4, 0));
          view[i+2] = Math_fround(SAFE_HEAP_LOAD_D((((value)+(4*i+8))|0), 4, 0));
          view[i+3] = Math_fround(SAFE_HEAP_LOAD_D((((value)+(4*i+12))|0), 4, 0));
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniformMatrix2fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glUniformMatrix2x3fv(location, count, transpose, value) {
      GLctx.uniformMatrix2x3fv(GL.uniforms[location], !!transpose, HEAPF32, value>>2, count*6);
    }

  function _emscripten_glUniformMatrix2x4fv(location, count, transpose, value) {
      GLctx.uniformMatrix2x4fv(GL.uniforms[location], !!transpose, HEAPF32, value>>2, count*8);
    }

  function _emscripten_glUniformMatrix3fv(location, count, transpose, value) {
  
  
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        GLctx.uniformMatrix3fv(GL.uniforms[location], !!transpose, HEAPF32, value>>2, count*9);
        return;
      }
  
      if (count <= 32) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLFloatBuffers[9*count-1];
        for (var i = 0; i < 9*count; i += 9) {
          view[i] = Math_fround(SAFE_HEAP_LOAD_D((((value)+(4*i))|0), 4, 0));
          view[i+1] = Math_fround(SAFE_HEAP_LOAD_D((((value)+(4*i+4))|0), 4, 0));
          view[i+2] = Math_fround(SAFE_HEAP_LOAD_D((((value)+(4*i+8))|0), 4, 0));
          view[i+3] = Math_fround(SAFE_HEAP_LOAD_D((((value)+(4*i+12))|0), 4, 0));
          view[i+4] = Math_fround(SAFE_HEAP_LOAD_D((((value)+(4*i+16))|0), 4, 0));
          view[i+5] = Math_fround(SAFE_HEAP_LOAD_D((((value)+(4*i+20))|0), 4, 0));
          view[i+6] = Math_fround(SAFE_HEAP_LOAD_D((((value)+(4*i+24))|0), 4, 0));
          view[i+7] = Math_fround(SAFE_HEAP_LOAD_D((((value)+(4*i+28))|0), 4, 0));
          view[i+8] = Math_fround(SAFE_HEAP_LOAD_D((((value)+(4*i+32))|0), 4, 0));
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*36)>>2);
      }
      GLctx.uniformMatrix3fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glUniformMatrix3x2fv(location, count, transpose, value) {
      GLctx.uniformMatrix3x2fv(GL.uniforms[location], !!transpose, HEAPF32, value>>2, count*6);
    }

  function _emscripten_glUniformMatrix3x4fv(location, count, transpose, value) {
      GLctx.uniformMatrix3x4fv(GL.uniforms[location], !!transpose, HEAPF32, value>>2, count*12);
    }

  function _emscripten_glUniformMatrix4fv(location, count, transpose, value) {
  
  
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, HEAPF32, value>>2, count*16);
        return;
      }
  
      if (count <= 18) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLFloatBuffers[16*count-1];
        // hoist the heap out of the loop for size and for pthreads+growth.
        var heap = HEAPF32;
        value >>= 2;
        for (var i = 0; i < 16 * count; i += 16) {
          var dst = value + i;
          view[i] = heap[dst];
          view[i + 1] = heap[dst + 1];
          view[i + 2] = heap[dst + 2];
          view[i + 3] = heap[dst + 3];
          view[i + 4] = heap[dst + 4];
          view[i + 5] = heap[dst + 5];
          view[i + 6] = heap[dst + 6];
          view[i + 7] = heap[dst + 7];
          view[i + 8] = heap[dst + 8];
          view[i + 9] = heap[dst + 9];
          view[i + 10] = heap[dst + 10];
          view[i + 11] = heap[dst + 11];
          view[i + 12] = heap[dst + 12];
          view[i + 13] = heap[dst + 13];
          view[i + 14] = heap[dst + 14];
          view[i + 15] = heap[dst + 15];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glUniformMatrix4x2fv(location, count, transpose, value) {
      GLctx.uniformMatrix4x2fv(GL.uniforms[location], !!transpose, HEAPF32, value>>2, count*8);
    }

  function _emscripten_glUniformMatrix4x3fv(location, count, transpose, value) {
      GLctx.uniformMatrix4x3fv(GL.uniforms[location], !!transpose, HEAPF32, value>>2, count*12);
    }

  function _emscripten_glUseProgram(program) {
      GLctx.useProgram(GL.programs[program]);
    }

  function _emscripten_glValidateProgram(program) {
      GLctx.validateProgram(GL.programs[program]);
    }

  function _emscripten_glVertexAttrib1f(x0, x1) { GLctx['vertexAttrib1f'](x0, x1) }

  function _emscripten_glVertexAttrib1fv(index, v) {
  
      GLctx.vertexAttrib1f(index, HEAPF32[v>>2]);
    }

  function _emscripten_glVertexAttrib2f(x0, x1, x2) { GLctx['vertexAttrib2f'](x0, x1, x2) }

  function _emscripten_glVertexAttrib2fv(index, v) {
  
      GLctx.vertexAttrib2f(index, HEAPF32[v>>2], HEAPF32[v+4>>2]);
    }

  function _emscripten_glVertexAttrib3f(x0, x1, x2, x3) { GLctx['vertexAttrib3f'](x0, x1, x2, x3) }

  function _emscripten_glVertexAttrib3fv(index, v) {
  
      GLctx.vertexAttrib3f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2]);
    }

  function _emscripten_glVertexAttrib4f(x0, x1, x2, x3, x4) { GLctx['vertexAttrib4f'](x0, x1, x2, x3, x4) }

  function _emscripten_glVertexAttrib4fv(index, v) {
  
      GLctx.vertexAttrib4f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2], HEAPF32[v+12>>2]);
    }

  function _emscripten_glVertexAttribDivisor(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }

  function _emscripten_glVertexAttribDivisorANGLE(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }

  function _emscripten_glVertexAttribDivisorARB(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }

  function _emscripten_glVertexAttribDivisorEXT(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }

  function _emscripten_glVertexAttribDivisorNV(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }

  function _emscripten_glVertexAttribI4i(x0, x1, x2, x3, x4) { GLctx['vertexAttribI4i'](x0, x1, x2, x3, x4) }

  function _emscripten_glVertexAttribI4iv(index, v) {
      GLctx.vertexAttribI4i(index, HEAP32[v>>2], HEAP32[v+4>>2], HEAP32[v+8>>2], HEAP32[v+12>>2]);
    }

  function _emscripten_glVertexAttribI4ui(x0, x1, x2, x3, x4) { GLctx['vertexAttribI4ui'](x0, x1, x2, x3, x4) }

  function _emscripten_glVertexAttribI4uiv(index, v) {
      GLctx.vertexAttribI4ui(index, HEAPU32[v>>2], HEAPU32[v+4>>2], HEAPU32[v+8>>2], HEAPU32[v+12>>2]);
    }

  function _emscripten_glVertexAttribIPointer(index, size, type, stride, ptr) {
      GLctx['vertexAttribIPointer'](index, size, type, stride, ptr);
    }

  function _emscripten_glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _emscripten_glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  function _emscripten_glWaitSync(sync, flags, timeoutLo, timeoutHi) {
      // See WebGL2 vs GLES3 difference on GL_TIMEOUT_IGNORED above (https://www.khronos.org/registry/webgl/specs/latest/2.0/#5.15)
      GLctx.waitSync(GL.syncs[sync], flags, convertI32PairToI53(timeoutLo, timeoutHi));
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  function _emscripten_request_pointerlock(target, deferUntilInEventHandler) {
      target = findEventTarget(target);
      if (!target) return -4;
      if (!target.requestPointerLock
        && !target.msRequestPointerLock
        ) {
        return -1;
      }
  
      var canPerformRequests = JSEvents.canPerformEventHandlerRequests();
  
      // Queue this function call if we're not currently in an event handler and the user saw it appropriate to do so.
      if (!canPerformRequests) {
        if (deferUntilInEventHandler) {
          JSEvents.deferCall(__requestPointerLock, 2 /* priority below fullscreen */, [target]);
          return 1;
        } else {
          return -2;
        }
      }
  
      return __requestPointerLock(target);
    }

  function _emscripten_get_heap_size() {
      return HEAPU8.length;
    }
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s INITIAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }
  function _emscripten_resize_heap(requestedSize) {
      requestedSize = requestedSize >>> 0;
      abortOnCannotGrowMemory(requestedSize);
    }

  function _emscripten_run_script(ptr) {
      eval(UTF8ToString(ptr));
    }

  function _emscripten_sample_gamepad_data() {
      return (JSEvents.lastGamepadState = (navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : null)))
        ? 0 : -1;
    }

  function __fillMouseEventData(eventStruct, e, target) {
      assert(eventStruct % 4 == 0);
      var idx = eventStruct >> 2;
      HEAP32[idx + 0] = e.screenX;
      HEAP32[idx + 1] = e.screenY;
      HEAP32[idx + 2] = e.clientX;
      HEAP32[idx + 3] = e.clientY;
      HEAP32[idx + 4] = e.ctrlKey;
      HEAP32[idx + 5] = e.shiftKey;
      HEAP32[idx + 6] = e.altKey;
      HEAP32[idx + 7] = e.metaKey;
      HEAP16[idx*2 + 16] = e.button;
      HEAP16[idx*2 + 17] = e.buttons;
  
      HEAP32[idx + 9] = e["movementX"]
        ;
  
      HEAP32[idx + 10] = e["movementY"]
        ;
  
      var rect = __getBoundingClientRect(target);
      HEAP32[idx + 11] = e.clientX - rect.left;
      HEAP32[idx + 12] = e.clientY - rect.top;
  
    }
  function __registerMouseEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.mouseEvent) JSEvents.mouseEvent = _malloc( 64 );
      target = findEventTarget(target);
  
      var mouseEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        // TODO: Make this access thread safe, or this could update live while app is reading it.
        __fillMouseEventData(JSEvents.mouseEvent, e, target);
  
        if (wasmTable.get(callbackfunc)(eventTypeId, JSEvents.mouseEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: eventTypeString != 'mousemove' && eventTypeString != 'mouseenter' && eventTypeString != 'mouseleave', // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: mouseEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }
  function _emscripten_set_click_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerMouseEventCallback(target, userData, useCapture, callbackfunc, 4, "click", targetThread);
      return 0;
    }

  function __fillFullscreenChangeEventData(eventStruct) {
      var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
      var isFullscreen = !!fullscreenElement;
      /** @suppress{checkTypes} */
      SAFE_HEAP_STORE(((eventStruct)|0), ((isFullscreen)|0), 4);
      SAFE_HEAP_STORE((((eventStruct)+(4))|0), ((JSEvents.fullscreenEnabled())|0), 4);
      // If transitioning to fullscreen, report info about the element that is now fullscreen.
      // If transitioning to windowed mode, report info about the element that just was fullscreen.
      var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
      var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
      var id = (reportedElement && reportedElement.id) ? reportedElement.id : '';
      stringToUTF8(nodeName, eventStruct + 8, 128);
      stringToUTF8(id, eventStruct + 136, 128);
      SAFE_HEAP_STORE((((eventStruct)+(264))|0), ((reportedElement ? reportedElement.clientWidth : 0)|0), 4);
      SAFE_HEAP_STORE((((eventStruct)+(268))|0), ((reportedElement ? reportedElement.clientHeight : 0)|0), 4);
      SAFE_HEAP_STORE((((eventStruct)+(272))|0), ((screen.width)|0), 4);
      SAFE_HEAP_STORE((((eventStruct)+(276))|0), ((screen.height)|0), 4);
      if (isFullscreen) {
        JSEvents.previousFullscreenElement = fullscreenElement;
      }
    }
  function __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.fullscreenChangeEvent) JSEvents.fullscreenChangeEvent = _malloc( 280 );
  
      var fullscreenChangeEventhandlerFunc = function(ev) {
        var e = ev || event;
  
        var fullscreenChangeEvent = JSEvents.fullscreenChangeEvent;
  
        __fillFullscreenChangeEventData(fullscreenChangeEvent);
  
        if (wasmTable.get(callbackfunc)(eventTypeId, fullscreenChangeEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: fullscreenChangeEventhandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }
  function _emscripten_set_fullscreenchange_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      if (!JSEvents.fullscreenEnabled()) return -1;
      target = findEventTarget(target);
      if (!target) return -4;
      __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "fullscreenchange", targetThread);
  
  
      // Unprefixed Fullscreen API shipped in Chromium 71 (https://bugs.chromium.org/p/chromium/issues/detail?id=383813)
      // As of Safari 13.0.3 on macOS Catalina 10.15.1 still ships with prefixed webkitfullscreenchange. TODO: revisit this check once Safari ships unprefixed version.
      __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "webkitfullscreenchange", targetThread);
  
      return 0;
    }

  function __registerGamepadEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.gamepadEvent) JSEvents.gamepadEvent = _malloc( 1432 );
  
      var gamepadEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        var gamepadEvent = JSEvents.gamepadEvent;
        __fillGamepadEventData(gamepadEvent, e["gamepad"]);
  
        if (wasmTable.get(callbackfunc)(eventTypeId, gamepadEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: findEventTarget(target),
        allowsDeferredCalls: true,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: gamepadEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }
  function _emscripten_set_gamepadconnected_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      __registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 26, "gamepadconnected", targetThread);
      return 0;
    }

  function _emscripten_set_gamepaddisconnected_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      __registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 27, "gamepaddisconnected", targetThread);
      return 0;
    }

  function __registerKeyEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.keyEvent) JSEvents.keyEvent = _malloc( 164 );
  
      var keyEventHandlerFunc = function(e) {
        assert(e);
  
        var keyEventData = JSEvents.keyEvent;
        var idx = keyEventData >> 2;
  
        HEAP32[idx + 0] = e.location;
        HEAP32[idx + 1] = e.ctrlKey;
        HEAP32[idx + 2] = e.shiftKey;
        HEAP32[idx + 3] = e.altKey;
        HEAP32[idx + 4] = e.metaKey;
        HEAP32[idx + 5] = e.repeat;
        HEAP32[idx + 6] = e.charCode;
        HEAP32[idx + 7] = e.keyCode;
        HEAP32[idx + 8] = e.which;
        stringToUTF8(e.key || '', keyEventData + 36, 32);
        stringToUTF8(e.code || '', keyEventData + 68, 32);
        stringToUTF8(e.char || '', keyEventData + 100, 32);
        stringToUTF8(e.locale || '', keyEventData + 132, 32);
  
        if (wasmTable.get(callbackfunc)(eventTypeId, keyEventData, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: findEventTarget(target),
        allowsDeferredCalls: true,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: keyEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }
  function _emscripten_set_keypress_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerKeyEventCallback(target, userData, useCapture, callbackfunc, 1, "keypress", targetThread);
      return 0;
    }

  /** @param {number|boolean=} noSetTiming */
  function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      var browserIterationFunc = function() { wasmTable.get(func)(); };
      setMainLoop(browserIterationFunc, fps, simulateInfiniteLoop, arg, noSetTiming);
    }

  function __registerTouchEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.touchEvent) JSEvents.touchEvent = _malloc( 1684 );
  
      target = findEventTarget(target);
  
      var touchEventHandlerFunc = function(e) {
        assert(e);
        var touches = {};
        var et = e.touches;
        for(var i = 0; i < et.length; ++i) {
          var touch = et[i];
          // Verify that browser does not recycle touch objects with old stale data, but reports new ones each time.
          assert(!touch.isChanged);
          assert(!touch.onTarget);
          touches[touch.identifier] = touch;
        }
        et = e.changedTouches;
        for(var i = 0; i < et.length; ++i) {
          var touch = et[i];
          // Verify that browser does not recycle touch objects with old stale data, but reports new ones each time.
          assert(!touch.onTarget);
          touch.isChanged = 1;
          touches[touch.identifier] = touch;
        }
        et = e.targetTouches;
        for(var i = 0; i < et.length; ++i) {
          touches[et[i].identifier].onTarget = 1;
        }
  
        var touchEvent = JSEvents.touchEvent;
        var idx = touchEvent>>2; // Pre-shift the ptr to index to HEAP32 to save code size
        HEAP32[idx + 1] = e.ctrlKey;
        HEAP32[idx + 2] = e.shiftKey;
        HEAP32[idx + 3] = e.altKey;
        HEAP32[idx + 4] = e.metaKey;
        idx += 5; // Advance to the start of the touch array.
        var targetRect = __getBoundingClientRect(target);
        var numTouches = 0;
        for(var i in touches) {
          var t = touches[i];
          HEAP32[idx + 0] = t.identifier;
          HEAP32[idx + 1] = t.screenX;
          HEAP32[idx + 2] = t.screenY;
          HEAP32[idx + 3] = t.clientX;
          HEAP32[idx + 4] = t.clientY;
          HEAP32[idx + 5] = t.pageX;
          HEAP32[idx + 6] = t.pageY;
          HEAP32[idx + 7] = t.isChanged;
          HEAP32[idx + 8] = t.onTarget;
          HEAP32[idx + 9] = t.clientX - targetRect.left;
          HEAP32[idx + 10] = t.clientY - targetRect.top;
  
          idx += 13;
  
          if (++numTouches > 31) {
            break;
          }
        }
        SAFE_HEAP_STORE(((touchEvent)|0), ((numTouches)|0), 4);
  
        if (wasmTable.get(callbackfunc)(eventTypeId, touchEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: eventTypeString == 'touchstart' || eventTypeString == 'touchend',
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: touchEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }
  function _emscripten_set_touchcancel_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel", targetThread);
      return 0;
    }

  function _emscripten_set_touchend_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend", targetThread);
      return 0;
    }

  function _emscripten_set_touchmove_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove", targetThread);
      return 0;
    }

  function _emscripten_set_touchstart_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart", targetThread);
      return 0;
    }

  function _exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }

  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      SAFE_HEAP_STORE(((pnum)|0), ((num)|0), 4)
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],SAFE_HEAP_STORE(((newOffset)|0), ((tempI64[0])|0), 4),SAFE_HEAP_STORE((((newOffset)+(4))|0), ((tempI64[1])|0), 4));
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      SAFE_HEAP_STORE(((pnum)|0), ((num)|0), 4)
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glBindAttribLocation(program, index, name) {
      GLctx.bindAttribLocation(GL.programs[program], index, UTF8ToString(name));
    }

  function _glBindBuffer(target, buffer) {
  
      if (target == 0x88EB /*GL_PIXEL_PACK_BUFFER*/) {
        // In WebGL 2 glReadPixels entry point, we need to use a different WebGL 2 API function call when a buffer is bound to
        // GL_PIXEL_PACK_BUFFER_BINDING point, so must keep track whether that binding point is non-null to know what is
        // the proper API function to call.
        GLctx.currentPixelPackBufferBinding = buffer;
      } else if (target == 0x88EC /*GL_PIXEL_UNPACK_BUFFER*/) {
        // In WebGL 2 gl(Compressed)Tex(Sub)Image[23]D entry points, we need to
        // use a different WebGL 2 API function call when a buffer is bound to
        // GL_PIXEL_UNPACK_BUFFER_BINDING point, so must keep track whether that
        // binding point is non-null to know what is the proper API function to
        // call.
        GLctx.currentPixelUnpackBufferBinding = buffer;
      }
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, GL.textures[texture]);
    }

  function _glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }

  function _glBufferData(target, size, data, usage) {
  
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        if (data) {
          GLctx.bufferData(target, HEAPU8, usage, data, size);
        } else {
          GLctx.bufferData(target, size, usage);
        }
      } else {
        // N.b. here first form specifies a heap subarray, second form an integer size, so the ?: code here is polymorphic. It is advised to avoid
        // randomly mixing both uses in calling code, to avoid any potential JS engine JIT issues.
        GLctx.bufferData(target, data ? HEAPU8.subarray(data, data+size) : size, usage);
      }
    }

  function _glBufferSubData(target, offset, size, data) {
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        GLctx.bufferSubData(target, offset, HEAPU8, data, size);
        return;
      }
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _glClear(x0) { GLctx['clear'](x0) }

  function _glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _glClearDepthf(x0) { GLctx['clearDepth'](x0) }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        if (GLctx.currentPixelUnpackBufferBinding) {
          GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, imageSize, data);
        } else {
          GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, HEAPU8, data, imageSize);
        }
        return;
      }
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glCullFace(x0) { GLctx['cullFace'](x0) }

  function _glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = ((SAFE_HEAP_LOAD((((buffers)+(i*4))|0), 4, 0))|0);
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GLctx.currentPixelPackBufferBinding) GLctx.currentPixelPackBufferBinding = 0;
        if (id == GLctx.currentPixelUnpackBufferBinding) GLctx.currentPixelUnpackBufferBinding = 0;
      }
    }

  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = ((SAFE_HEAP_LOAD((((textures)+(i*4))|0), 4, 0))|0);
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _glDepthFunc(x0) { GLctx['depthFunc'](x0) }

  function _glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glDisable(x0) { GLctx['disable'](x0) }

  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }


  function _glEnable(x0) { GLctx['enable'](x0) }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _glFrontFace(x0) { GLctx['frontFace'](x0) }

  function _glGenBuffers(n, buffers) {
      __glGenObject(n, buffers, 'createBuffer', GL.buffers
        );
    }

  function _glGenTextures(n, textures) {
      __glGenObject(n, textures, 'createTexture', GL.textures
        );
    }

  function _glGetAttribLocation(program, name) {
      return GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name));
    }

  function _glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 2);
    }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) SAFE_HEAP_STORE(((length)|0), ((numBytesWrittenExclNull)|0), 4);
    }

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        SAFE_HEAP_STORE(((p)|0), ((log.length + 1)|0), 4);
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        SAFE_HEAP_STORE(((p)|0), ((ptable.maxUniformLength)|0), 4);
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, 0x8B89/*GL_ACTIVE_ATTRIBUTES*/);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        SAFE_HEAP_STORE(((p)|0), ((ptable.maxAttributeLength)|0), 4);
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, 0x8A36/*GL_ACTIVE_UNIFORM_BLOCKS*/);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        SAFE_HEAP_STORE(((p)|0), ((ptable.maxUniformBlockNameLength)|0), 4);
      } else {
        SAFE_HEAP_STORE(((p)|0), ((GLctx.getProgramParameter(GL.programs[program], pname))|0), 4);
      }
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) SAFE_HEAP_STORE(((length)|0), ((numBytesWrittenExclNull)|0), 4);
    }

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        // The GLES2 specification says that if the shader has an empty info log,
        // a value of 0 is returned. Otherwise the log has a null char appended.
        // (An empty string is falsey, so we can just check that instead of
        // looking at log.length.)
        var logLength = log ? log.length + 1 : 0;
        SAFE_HEAP_STORE(((p)|0), ((logLength)|0), 4);
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        // source may be a null, or the empty string, both of which are falsey
        // values that we report a 0 length for.
        var sourceLength = source ? source.length + 1 : 0;
        SAFE_HEAP_STORE(((p)|0), ((sourceLength)|0), 4);
      } else {
        SAFE_HEAP_STORE(((p)|0), ((GLctx.getShaderParameter(GL.shaders[shader], pname))|0), 4);
      }
    }

  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret;
      switch(name_) {
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions() || []; // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
          exts = exts.concat(exts.map(function(e) { return "GL_" + e; }));
          ret = stringToNewUTF8(exts.join(' '));
          break;
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          var s = GLctx.getParameter(name_);
          if (!s) {
            GL.recordError(0x500/*GL_INVALID_ENUM*/);
          }
          ret = stringToNewUTF8(s);
          break;
  
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(0x1F02 /*GL_VERSION*/);
          // return GLES version string corresponding to the version of the WebGL context
          if (GL.currentContext.version >= 2) glVersion = 'OpenGL ES 3.0 (' + glVersion + ')';
          else
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = stringToNewUTF8(glVersion);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(0x8B8C /*GL_SHADING_LANGUAGE_VERSION*/);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = stringToNewUTF8(glslVersion);
          break;
        default:
          GL.recordError(0x500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _glGetUniformLocation(program, name) {
      name = UTF8ToString(name);
  
      var arrayIndex = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name[name.length - 1] == ']') {
        var leftBrace = name.lastIndexOf('[');
        arrayIndex = name[leftBrace+1] != ']' ? jstoi_q(name.slice(leftBrace + 1)) : 0; // "index]", parseInt will ignore the ']' at the end; but treat "foo[]" as "foo[0]"
        name = name.slice(0, leftBrace);
      }
  
      var uniformInfo = GL.programInfos[program] && GL.programInfos[program].uniforms[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayIndex >= 0 && arrayIndex < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1] + arrayIndex;
      } else {
        return -1;
      }
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.populateUniformTable(program);
    }

  function _glPixelStorei(pname, param) {
      if (pname == 0xCF5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _glReadPixels(x, y, width, height, format, type, pixels) {
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        if (GLctx.currentPixelPackBufferBinding) {
          GLctx.readPixels(x, y, width, height, format, type, pixels);
        } else {
          var heap = heapObjectForWebGLType(type);
          GLctx.readPixels(x, y, width, height, format, type, heap, pixels >> heapAccessShiftForWebGLHeap(heap));
        }
        return;
      }
      var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
      if (!pixelData) {
        GL.recordError(0x500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, pixelData);
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (GL.currentContext.version >= 2) {
        // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        if (GLctx.currentPixelUnpackBufferBinding) {
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
        } else if (pixels) {
          var heap = heapObjectForWebGLType(type);
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, heap, pixels >> heapAccessShiftForWebGLHeap(heap));
        } else {
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, null);
        }
        return;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null);
    }

  function _glTexParameterf(x0, x1, x2) { GLctx['texParameterf'](x0, x1, x2) }

  function _glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function _glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _glUniformMatrix4fv(location, count, transpose, value) {
  
  
      if (GL.currentContext.version >= 2) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, HEAPF32, value>>2, count*16);
        return;
      }
  
      if (count <= 18) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLFloatBuffers[16*count-1];
        // hoist the heap out of the loop for size and for pthreads+growth.
        var heap = HEAPF32;
        value >>= 2;
        for (var i = 0; i < 16 * count; i += 16) {
          var dst = value + i;
          view[i] = heap[dst];
          view[i + 1] = heap[dst + 1];
          view[i + 2] = heap[dst + 2];
          view[i + 3] = heap[dst + 3];
          view[i + 4] = heap[dst + 4];
          view[i + 5] = heap[dst + 5];
          view[i + 6] = heap[dst + 6];
          view[i + 7] = heap[dst + 7];
          view[i + 8] = heap[dst + 8];
          view[i + 9] = heap[dst + 9];
          view[i + 10] = heap[dst + 10];
          view[i + 11] = heap[dst + 11];
          view[i + 12] = heap[dst + 12];
          view[i + 13] = heap[dst + 13];
          view[i + 14] = heap[dst + 14];
          view[i + 15] = heap[dst + 15];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _glUseProgram(program) {
      GLctx.useProgram(GL.programs[program]);
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  /** @constructor */
  function GLFW_Window(id, width, height, title, monitor, share) {
        this.id = id;
        this.x = 0;
        this.y = 0;
        this.fullscreen = false; // Used to determine if app in fullscreen mode
        this.storedX = 0; // Used to store X before fullscreen
        this.storedY = 0; // Used to store Y before fullscreen
        this.width = width;
        this.height = height;
        this.storedWidth = width; // Used to store width before fullscreen
        this.storedHeight = height; // Used to store height before fullscreen
        this.title = title;
        this.monitor = monitor;
        this.share = share;
        this.attributes = GLFW.hints;
        this.inputModes = {
          0x00033001:0x00034001, // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
          0x00033002:0, // GLFW_STICKY_KEYS
          0x00033003:0, // GLFW_STICKY_MOUSE_BUTTONS
        };
        this.buttons = 0;
        this.keys = new Array();
        this.domKeys = new Array();
        this.shouldClose = 0;
        this.title = null;
        this.windowPosFunc = null; // GLFWwindowposfun
        this.windowSizeFunc = null; // GLFWwindowsizefun
        this.windowCloseFunc = null; // GLFWwindowclosefun
        this.windowRefreshFunc = null; // GLFWwindowrefreshfun
        this.windowFocusFunc = null; // GLFWwindowfocusfun
        this.windowIconifyFunc = null; // GLFWwindowiconifyfun
        this.framebufferSizeFunc = null; // GLFWframebuffersizefun
        this.mouseButtonFunc = null; // GLFWmousebuttonfun
        this.cursorPosFunc = null; // GLFWcursorposfun
        this.cursorEnterFunc = null; // GLFWcursorenterfun
        this.scrollFunc = null; // GLFWscrollfun
        this.dropFunc = null; // GLFWdropfun
        this.keyFunc = null; // GLFWkeyfun
        this.charFunc = null; // GLFWcharfun
        this.userptr = null;
      }
  var GLFW={WindowFromId:function(id) {
        if (id <= 0 || !GLFW.windows) return null;
        return GLFW.windows[id - 1];
      },joystickFunc:null,errorFunc:null,monitorFunc:null,active:null,windows:null,monitors:null,monitorString:null,versionString:null,initialTime:null,extensions:null,hints:null,defaultHints:{131073:0,131074:0,131075:1,131076:1,131077:1,135169:8,135170:8,135171:8,135172:8,135173:24,135174:8,135175:0,135176:0,135177:0,135178:0,135179:0,135180:0,135181:0,135182:0,135183:0,139265:196609,139266:1,139267:0,139268:0,139269:0,139270:0,139271:0,139272:0},DOMToGLFWKeyCode:function(keycode) {
        switch (keycode) {
          // these keycodes are only defined for GLFW3, assume they are the same for GLFW2
          case 0x20:return 32; // DOM_VK_SPACE -> GLFW_KEY_SPACE
          case 0xDE:return 39; // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
          case 0xBC:return 44; // DOM_VK_COMMA -> GLFW_KEY_COMMA
          case 0xAD:return 45; // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
          case 0xBD:return 45; // DOM_VK_MINUS -> GLFW_KEY_MINUS
          case 0xBE:return 46; // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
          case 0xBF:return 47; // DOM_VK_SLASH -> GLFW_KEY_SLASH
          case 0x30:return 48; // DOM_VK_0 -> GLFW_KEY_0
          case 0x31:return 49; // DOM_VK_1 -> GLFW_KEY_1
          case 0x32:return 50; // DOM_VK_2 -> GLFW_KEY_2
          case 0x33:return 51; // DOM_VK_3 -> GLFW_KEY_3
          case 0x34:return 52; // DOM_VK_4 -> GLFW_KEY_4
          case 0x35:return 53; // DOM_VK_5 -> GLFW_KEY_5
          case 0x36:return 54; // DOM_VK_6 -> GLFW_KEY_6
          case 0x37:return 55; // DOM_VK_7 -> GLFW_KEY_7
          case 0x38:return 56; // DOM_VK_8 -> GLFW_KEY_8
          case 0x39:return 57; // DOM_VK_9 -> GLFW_KEY_9
          case 0x3B:return 59; // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
          case 0x3D:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0xBB:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0x41:return 65; // DOM_VK_A -> GLFW_KEY_A
          case 0x42:return 66; // DOM_VK_B -> GLFW_KEY_B
          case 0x43:return 67; // DOM_VK_C -> GLFW_KEY_C
          case 0x44:return 68; // DOM_VK_D -> GLFW_KEY_D
          case 0x45:return 69; // DOM_VK_E -> GLFW_KEY_E
          case 0x46:return 70; // DOM_VK_F -> GLFW_KEY_F
          case 0x47:return 71; // DOM_VK_G -> GLFW_KEY_G
          case 0x48:return 72; // DOM_VK_H -> GLFW_KEY_H
          case 0x49:return 73; // DOM_VK_I -> GLFW_KEY_I
          case 0x4A:return 74; // DOM_VK_J -> GLFW_KEY_J
          case 0x4B:return 75; // DOM_VK_K -> GLFW_KEY_K
          case 0x4C:return 76; // DOM_VK_L -> GLFW_KEY_L
          case 0x4D:return 77; // DOM_VK_M -> GLFW_KEY_M
          case 0x4E:return 78; // DOM_VK_N -> GLFW_KEY_N
          case 0x4F:return 79; // DOM_VK_O -> GLFW_KEY_O
          case 0x50:return 80; // DOM_VK_P -> GLFW_KEY_P
          case 0x51:return 81; // DOM_VK_Q -> GLFW_KEY_Q
          case 0x52:return 82; // DOM_VK_R -> GLFW_KEY_R
          case 0x53:return 83; // DOM_VK_S -> GLFW_KEY_S
          case 0x54:return 84; // DOM_VK_T -> GLFW_KEY_T
          case 0x55:return 85; // DOM_VK_U -> GLFW_KEY_U
          case 0x56:return 86; // DOM_VK_V -> GLFW_KEY_V
          case 0x57:return 87; // DOM_VK_W -> GLFW_KEY_W
          case 0x58:return 88; // DOM_VK_X -> GLFW_KEY_X
          case 0x59:return 89; // DOM_VK_Y -> GLFW_KEY_Y
          case 0x5a:return 90; // DOM_VK_Z -> GLFW_KEY_Z
          case 0xDB:return 91; // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
          case 0xDC:return 92; // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
          case 0xDD:return 93; // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
          case 0xC0:return 94; // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
  
  
          case 0x1B:return 256; // DOM_VK_ESCAPE -> GLFW_KEY_ESCAPE
          case 0x0D:return 257; // DOM_VK_RETURN -> GLFW_KEY_ENTER
          case 0x09:return 258; // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x08:return 259; // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
          case 0x2D:return 260; // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 0x2E:return 261; // DOM_VK_DELETE -> GLFW_KEY_DELETE
          case 0x27:return 262; // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x25:return 263; // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x28:return 264; // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x26:return 265; // DOM_VK_UP -> GLFW_KEY_UP
          case 0x21:return 266; // DOM_VK_PAGE_UP -> GLFW_KEY_PAGE_UP
          case 0x22:return 267; // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGE_DOWN
          case 0x24:return 268; // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23:return 269; // DOM_VK_END -> GLFW_KEY_END
          case 0x14:return 280; // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
          case 0x91:return 281; // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
          case 0x90:return 282; // DOM_VK_NUM_LOCK -> GLFW_KEY_NUM_LOCK
          case 0x2C:return 283; // DOM_VK_SNAPSHOT -> GLFW_KEY_PRINT_SCREEN
          case 0x13:return 284; // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
          case 0x70:return 290; // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71:return 291; // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72:return 292; // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73:return 293; // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74:return 294; // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75:return 295; // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76:return 296; // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77:return 297; // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78:return 298; // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79:return 299; // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7A:return 300; // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7B:return 301; // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x7C:return 302; // DOM_VK_F13 -> GLFW_KEY_F13
          case 0x7D:return 303; // DOM_VK_F14 -> GLFW_KEY_F14
          case 0x7E:return 304; // DOM_VK_F15 -> GLFW_KEY_F15
          case 0x7F:return 305; // DOM_VK_F16 -> GLFW_KEY_F16
          case 0x80:return 306; // DOM_VK_F17 -> GLFW_KEY_F17
          case 0x81:return 307; // DOM_VK_F18 -> GLFW_KEY_F18
          case 0x82:return 308; // DOM_VK_F19 -> GLFW_KEY_F19
          case 0x83:return 309; // DOM_VK_F20 -> GLFW_KEY_F20
          case 0x84:return 310; // DOM_VK_F21 -> GLFW_KEY_F21
          case 0x85:return 311; // DOM_VK_F22 -> GLFW_KEY_F22
          case 0x86:return 312; // DOM_VK_F23 -> GLFW_KEY_F23
          case 0x87:return 313; // DOM_VK_F24 -> GLFW_KEY_F24
          case 0x88:return 314; // 0x88 (not used?) -> GLFW_KEY_F25
          case 0x60:return 320; // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
          case 0x61:return 321; // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
          case 0x62:return 322; // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
          case 0x63:return 323; // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
          case 0x64:return 324; // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
          case 0x65:return 325; // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
          case 0x66:return 326; // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
          case 0x67:return 327; // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
          case 0x68:return 328; // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
          case 0x69:return 329; // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
          case 0x6E:return 330; // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F:return 331; // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x6A:return 332; // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6D:return 333; // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6B:return 334; // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          // case 0x0D:return 335; // DOM_VK_RETURN -> GLFW_KEY_KP_ENTER (DOM_KEY_LOCATION_RIGHT)
          // case 0x61:return 336; // DOM_VK_EQUALS -> GLFW_KEY_KP_EQUAL (DOM_KEY_LOCATION_RIGHT)
          case 0x10:return 340; // DOM_VK_SHIFT -> GLFW_KEY_LEFT_SHIFT
          case 0x11:return 341; // DOM_VK_CONTROL -> GLFW_KEY_LEFT_CONTROL
          case 0x12:return 342; // DOM_VK_ALT -> GLFW_KEY_LEFT_ALT
          case 0x5B:return 343; // DOM_VK_WIN -> GLFW_KEY_LEFT_SUPER
          // case 0x10:return 344; // DOM_VK_SHIFT -> GLFW_KEY_RIGHT_SHIFT (DOM_KEY_LOCATION_RIGHT)
          // case 0x11:return 345; // DOM_VK_CONTROL -> GLFW_KEY_RIGHT_CONTROL (DOM_KEY_LOCATION_RIGHT)
          // case 0x12:return 346; // DOM_VK_ALT -> GLFW_KEY_RIGHT_ALT (DOM_KEY_LOCATION_RIGHT)
          // case 0x5B:return 347; // DOM_VK_WIN -> GLFW_KEY_RIGHT_SUPER (DOM_KEY_LOCATION_RIGHT)
          case 0x5D:return 348; // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
          // XXX: GLFW_KEY_WORLD_1, GLFW_KEY_WORLD_2 what are these?
          default:return -1; // GLFW_KEY_UNKNOWN
        };
      },getModBits:function(win) {
        var mod = 0;
        if (win.keys[340]) mod |= 0x0001; // GLFW_MOD_SHIFT
        if (win.keys[341]) mod |= 0x0002; // GLFW_MOD_CONTROL
        if (win.keys[342]) mod |= 0x0004; // GLFW_MOD_ALT
        if (win.keys[343]) mod |= 0x0008; // GLFW_MOD_SUPER
        return mod;
      },onKeyPress:function(event) {
        if (!GLFW.active || !GLFW.active.charFunc) return;
        if (event.ctrlKey || event.metaKey) return;
  
        // correct unicode charCode is only available with onKeyPress event
        var charCode = event.charCode;
        if (charCode == 0 || (charCode >= 0x00 && charCode <= 0x1F)) return;
  
  
        wasmTable.get(GLFW.active.charFunc)(GLFW.active.id, charCode);
      },onKeyChanged:function(keyCode, status) {
        if (!GLFW.active) return;
  
        var key = GLFW.DOMToGLFWKeyCode(keyCode);
        if (key == -1) return;
  
        var repeat = status && GLFW.active.keys[key];
        GLFW.active.keys[key] = status;
        GLFW.active.domKeys[keyCode] = status;
        if (!GLFW.active.keyFunc) return;
  
  
        if (repeat) status = 2; // GLFW_REPEAT
        wasmTable.get(GLFW.active.keyFunc)(GLFW.active.id, key, keyCode, status, GLFW.getModBits(GLFW.active));
      },onGamepadConnected:function(event) {
        GLFW.refreshJoysticks();
      },onGamepadDisconnected:function(event) {
        GLFW.refreshJoysticks();
      },onKeydown:function(event) {
        GLFW.onKeyChanged(event.keyCode, 1); // GLFW_PRESS or GLFW_REPEAT
  
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function(event) {
        GLFW.onKeyChanged(event.keyCode, 0); // GLFW_RELEASE
      },onBlur:function(event) {
        if (!GLFW.active) return;
  
        for (var i = 0; i < GLFW.active.domKeys.length; ++i) {
          if (GLFW.active.domKeys[i]) {
            GLFW.onKeyChanged(i, 0); // GLFW_RELEASE
          }
        }
      },onMousemove:function(event) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
  
  
        wasmTable.get(GLFW.active.cursorPosFunc)(GLFW.active.id, Browser.mouseX, Browser.mouseY);
      },DOMToGLFWMouseButton:function(event) {
        // DOM and glfw have different button codes.
        // See http://www.w3schools.com/jsref/event_button.asp.
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
        return eventButton;
      },onMouseenter:function(event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        wasmTable.get(GLFW.active.cursorEnterFunc)(GLFW.active.id, 1);
      },onMouseleave:function(event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        wasmTable.get(GLFW.active.cursorEnterFunc)(GLFW.active.id, 0);
      },onMouseButtonChanged:function(event, status) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) return;
  
        var eventButton = GLFW.DOMToGLFWMouseButton(event);
  
        if (status == 1) { // GLFW_PRESS
          GLFW.active.buttons |= (1 << eventButton);
          try {
            event.target.setCapture();
          } catch (e) {}
        } else {  // GLFW_RELEASE
          GLFW.active.buttons &= ~(1 << eventButton);
        }
  
        if (!GLFW.active.mouseButtonFunc) return;
  
  
        wasmTable.get(GLFW.active.mouseButtonFunc)(GLFW.active.id, eventButton, status, GLFW.getModBits(GLFW.active));
      },onMouseButtonDown:function(event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 1); // GLFW_PRESS
      },onMouseButtonUp:function(event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 0); // GLFW_RELEASE
      },onMouseWheel:function(event) {
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
        GLFW.wheelPos += delta;
  
        if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module['canvas']) return;
  
  
        var sx = 0;
        var sy = 0;
        if (event.type == 'mousewheel') {
          sx = event.wheelDeltaX;
          sy = event.wheelDeltaY;
        } else {
          sx = event.deltaX;
          sy = event.deltaY;
        }
  
        wasmTable.get(GLFW.active.scrollFunc)(GLFW.active.id, sx, sy);
  
        event.preventDefault();
      },onCanvasResize:function(width, height) {
        if (!GLFW.active) return;
  
        var resizeNeeded = true;
  
        // If the client is requesting fullscreen mode
        if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          GLFW.active.storedX = GLFW.active.x;
          GLFW.active.storedY = GLFW.active.y;
          GLFW.active.storedWidth = GLFW.active.width;
          GLFW.active.storedHeight = GLFW.active.height;
          GLFW.active.x = GLFW.active.y = 0;
          GLFW.active.width = screen.width;
          GLFW.active.height = screen.height;
          GLFW.active.fullscreen = true;
  
        // If the client is reverting from fullscreen mode
        } else if (GLFW.active.fullscreen == true) {
          GLFW.active.x = GLFW.active.storedX;
          GLFW.active.y = GLFW.active.storedY;
          GLFW.active.width = GLFW.active.storedWidth;
          GLFW.active.height = GLFW.active.storedHeight;
          GLFW.active.fullscreen = false;
  
        // If the width/height values do not match current active window sizes
        } else if (GLFW.active.width != width || GLFW.active.height != height) {
            GLFW.active.width = width;
            GLFW.active.height = height;
        } else {
          resizeNeeded = false;
        }
  
        // If any of the above conditions were true, we need to resize the canvas
        if (resizeNeeded) {
          // resets the canvas size to counter the aspect preservation of Browser.updateCanvasDimensions
          Browser.setCanvasSize(GLFW.active.width, GLFW.active.height, true);
          // TODO: Client dimensions (clientWidth/clientHeight) vs pixel dimensions (width/height) of
          // the canvas should drive window and framebuffer size respectfully.
          GLFW.onWindowSizeChanged();
          GLFW.onFramebufferSizeChanged();
        }
      },onWindowSizeChanged:function() {
        if (!GLFW.active) return;
  
        if (!GLFW.active.windowSizeFunc) return;
  
  
        wasmTable.get(GLFW.active.windowSizeFunc)(GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },onFramebufferSizeChanged:function() {
        if (!GLFW.active) return;
  
        if (!GLFW.active.framebufferSizeFunc) return;
  
        wasmTable.get(GLFW.active.framebufferSizeFunc)(GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },getTime:function() {
        return _emscripten_get_now() / 1000;
      },setWindowTitle:function(winid, title) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        win.title = UTF8ToString(title);
        if (GLFW.active.id == win.id) {
          document.title = win.title;
        }
      },setJoystickCallback:function(cbfun) {
        GLFW.joystickFunc = cbfun;
        GLFW.refreshJoysticks();
      },joys:{},lastGamepadState:null,lastGamepadStateFrame:null,refreshJoysticks:function() {
        // Produce a new Gamepad API sample if we are ticking a new game frame, or if not using emscripten_set_main_loop() at all to drive animation.
        if (Browser.mainLoop.currentFrameNumber !== GLFW.lastGamepadStateFrame || !Browser.mainLoop.currentFrameNumber) {
          GLFW.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : null);
          GLFW.lastGamepadStateFrame = Browser.mainLoop.currentFrameNumber;
  
          for (var joy = 0; joy < GLFW.lastGamepadState.length; ++joy) {
            var gamepad = GLFW.lastGamepadState[joy];
  
            if (gamepad) {
              if (!GLFW.joys[joy]) {
                console.log('glfw joystick connected:',joy);
                GLFW.joys[joy] = {
                  id: allocate(intArrayFromString(gamepad.id), ALLOC_NORMAL),
                  buttonsCount: gamepad.buttons.length,
                  axesCount: gamepad.axes.length,
                  buttons: allocate(new Array(gamepad.buttons.length), ALLOC_NORMAL),
                  axes: allocate(new Array(gamepad.axes.length*4), 'float', ALLOC_NORMAL)
                };
  
                if (GLFW.joystickFunc) {
                  wasmTable.get(GLFW.joystickFunc)(joy, 0x00040001); // GLFW_CONNECTED
                }
              }
  
              var data = GLFW.joys[joy];
  
              for (var i = 0; i < gamepad.buttons.length;  ++i) {
                setValue(data.buttons + i, gamepad.buttons[i].pressed, 'i8');
              }
  
              for (var i = 0; i < gamepad.axes.length; ++i) {
                setValue(data.axes + i*4, gamepad.axes[i], 'float');
              }
            } else {
              if (GLFW.joys[joy]) {
                console.log('glfw joystick disconnected',joy);
  
                if (GLFW.joystickFunc) {
                  wasmTable.get(GLFW.joystickFunc)(joy, 0x00040002); // GLFW_DISCONNECTED
                }
  
                _free(GLFW.joys[joy].id);
                _free(GLFW.joys[joy].buttons);
                _free(GLFW.joys[joy].axes);
  
                delete GLFW.joys[joy];
              }
            }
          }
        }
      },setKeyCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.keyFunc;
        win.keyFunc = cbfun;
        return prevcbfun;
      },setCharCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.charFunc;
        win.charFunc = cbfun;
        return prevcbfun;
      },setMouseButtonCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.mouseButtonFunc;
        win.mouseButtonFunc = cbfun;
        return prevcbfun;
      },setCursorPosCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.cursorPosFunc;
        win.cursorPosFunc = cbfun;
        return prevcbfun;
      },setScrollCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.scrollFunc;
        win.scrollFunc = cbfun;
        return prevcbfun;
      },setDropCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.dropFunc;
        win.dropFunc = cbfun;
        return prevcbfun;
      },onDrop:function(event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
        if (!event.dataTransfer || !event.dataTransfer.files || event.dataTransfer.files.length == 0) return;
  
        event.preventDefault();
  
        var filenames = allocate(new Array(event.dataTransfer.files.length*4), ALLOC_NORMAL);
        var filenamesArray = [];
        var count = event.dataTransfer.files.length;
  
        // Read and save the files to emscripten's FS
        var written = 0;
        var drop_dir = '.glfw_dropped_files';
        FS.createPath('/', drop_dir);
  
        function save(file) {
          var path = '/' + drop_dir + '/' + file.name.replace(/\//g, '_');
          var reader = new FileReader();
          reader.onloadend = function(e) {
            if (reader.readyState != 2) { // not DONE
              ++written;
              console.log('failed to read dropped file: '+file.name+': '+reader.error);
              return;
            }
  
            var data = e.target.result;
            FS.writeFile(path, new Uint8Array(data));
            if (++written === count) {
              wasmTable.get(GLFW.active.dropFunc)(GLFW.active.id, count, filenames);
  
              for (var i = 0; i < filenamesArray.length; ++i) {
                _free(filenamesArray[i]);
              }
              _free(filenames);
            }
          };
          reader.readAsArrayBuffer(file);
  
          var filename = allocate(intArrayFromString(path), ALLOC_NORMAL);
          filenamesArray.push(filename);
          setValue(filenames + i*4, filename, 'i8*');
        }
  
        for (var i = 0; i < count; ++i) {
          save(event.dataTransfer.files[i]);
        }
  
        return false;
      },onDragover:function(event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
  
        event.preventDefault();
        return false;
      },setWindowSizeCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.windowSizeFunc;
        win.windowSizeFunc = cbfun;
  
  
        return prevcbfun;
      },setWindowCloseCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.windowCloseFunc;
        win.windowCloseFunc = cbfun;
        return prevcbfun;
      },setWindowRefreshCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.windowRefreshFunc;
        win.windowRefreshFunc = cbfun;
        return prevcbfun;
      },onClickRequestPointerLock:function(e) {
        if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
          Module['canvas'].requestPointerLock();
          e.preventDefault();
        }
      },setInputMode:function(winid, mode, value) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        switch(mode) {
          case 0x00033001: { // GLFW_CURSOR
            switch(value) {
              case 0x00034001: { // GLFW_CURSOR_NORMAL
                win.inputModes[mode] = value;
                Module['canvas'].removeEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].exitPointerLock();
                break;
              }
              case 0x00034002: { // GLFW_CURSOR_HIDDEN
                console.log("glfwSetInputMode called with GLFW_CURSOR_HIDDEN value not implemented.");
                break;
              }
              case 0x00034003: { // GLFW_CURSOR_DISABLED
                win.inputModes[mode] = value;
                Module['canvas'].addEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].requestPointerLock();
                break;
              }
              default: {
                console.log("glfwSetInputMode called with unknown value parameter value: " + value + ".");
                break;
              }
            }
            break;
          }
          case 0x00033002: { // GLFW_STICKY_KEYS
            console.log("glfwSetInputMode called with GLFW_STICKY_KEYS mode not implemented.");
            break;
          }
          case 0x00033003: { // GLFW_STICKY_MOUSE_BUTTONS
            console.log("glfwSetInputMode called with GLFW_STICKY_MOUSE_BUTTONS mode not implemented.");
            break;
          }
          default: {
            console.log("glfwSetInputMode called with unknown mode parameter value: " + mode + ".");
            break;
          }
        }
      },getKey:function(winid, key) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return win.keys[key];
      },getMouseButton:function(winid, button) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return (win.buttons & (1 << button)) > 0;
      },getCursorPos:function(winid, x, y) {
        setValue(x, Browser.mouseX, 'double');
        setValue(y, Browser.mouseY, 'double');
      },getMousePos:function(winid, x, y) {
        setValue(x, Browser.mouseX, 'i32');
        setValue(y, Browser.mouseY, 'i32');
      },setCursorPos:function(winid, x, y) {
      },getWindowPos:function(winid, x, y) {
        var wx = 0;
        var wy = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          wx = win.x;
          wy = win.y;
        }
  
        if (x) {
          setValue(x, wx, 'i32');
        }
  
        if (y) {
          setValue(y, wy, 'i32');
        }
      },setWindowPos:function(winid, x, y) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.x = x;
        win.y = y;
      },getWindowSize:function(winid, width, height) {
        var ww = 0;
        var wh = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          ww = win.width;
          wh = win.height;
        }
  
        if (width) {
          setValue(width, ww, 'i32');
        }
  
        if (height) {
          setValue(height, wh, 'i32');
        }
      },setWindowSize:function(winid, width, height) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (GLFW.active.id == win.id) {
          if (width == screen.width && height == screen.height) {
            Browser.requestFullscreen();
          } else {
            Browser.exitFullscreen();
            Browser.setCanvasSize(width, height);
            win.width = width;
            win.height = height;
          }
        }
  
        if (!win.windowSizeFunc) return;
  
  
        wasmTable.get(win.windowSizeFunc)(win.id, width, height);
      },createWindow:function(width, height, title, monitor, share) {
        var i, id;
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++) {
          // no-op
        }
        if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
  
        // id for window
        id = i + 1;
  
        // not valid
        if (width <= 0 || height <= 0) return 0;
  
        if (monitor) {
          Browser.requestFullscreen();
        } else {
          Browser.setCanvasSize(width, height);
        }
  
        // Create context when there are no existing alive windows
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++) {
          // no-op
        }
        if (i == GLFW.windows.length) {
          var contextAttributes = {
            antialias: (GLFW.hints[0x0002100D] > 1), // GLFW_SAMPLES
            depth: (GLFW.hints[0x00021005] > 0),     // GLFW_DEPTH_BITS
            stencil: (GLFW.hints[0x00021006] > 0),   // GLFW_STENCIL_BITS
            alpha: (GLFW.hints[0x00021004] > 0)      // GLFW_ALPHA_BITS
          }
          Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
        }
  
        // If context creation failed, do not return a valid window
        if (!Module.ctx) return 0;
  
        // Get non alive id
        var win = new GLFW_Window(id, width, height, title, monitor, share);
  
        // Set window to array
        if (id - 1 == GLFW.windows.length) {
          GLFW.windows.push(win);
        } else {
          GLFW.windows[id - 1] = win;
        }
  
        GLFW.active = win;
        return win.id;
      },destroyWindow:function(winid) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (win.windowCloseFunc)
          wasmTable.get(win.windowCloseFunc)(win.id);
  
        GLFW.windows[win.id - 1] = null;
        if (GLFW.active.id == win.id)
          GLFW.active = null;
  
        // Destroy context when no alive windows
        for (var i = 0; i < GLFW.windows.length; i++)
          if (GLFW.windows[i] !== null) return;
  
        Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      },swapBuffers:function(winid) {
      },GLFW2ParamToGLFW3Param:function(param) {
        var table = {
          0x00030001:0, // GLFW_MOUSE_CURSOR
          0x00030002:0, // GLFW_STICKY_KEYS
          0x00030003:0, // GLFW_STICKY_MOUSE_BUTTONS
          0x00030004:0, // GLFW_SYSTEM_KEYS
          0x00030005:0, // GLFW_KEY_REPEAT
          0x00030006:0, // GLFW_AUTO_POLL_EVENTS
          0x00020001:0, // GLFW_OPENED
          0x00020002:0, // GLFW_ACTIVE
          0x00020003:0, // GLFW_ICONIFIED
          0x00020004:0, // GLFW_ACCELERATED
          0x00020005:0x00021001, // GLFW_RED_BITS
          0x00020006:0x00021002, // GLFW_GREEN_BITS
          0x00020007:0x00021003, // GLFW_BLUE_BITS
          0x00020008:0x00021004, // GLFW_ALPHA_BITS
          0x00020009:0x00021005, // GLFW_DEPTH_BITS
          0x0002000A:0x00021006, // GLFW_STENCIL_BITS
          0x0002000B:0x0002100F, // GLFW_REFRESH_RATE
          0x0002000C:0x00021007, // GLFW_ACCUM_RED_BITS
          0x0002000D:0x00021008, // GLFW_ACCUM_GREEN_BITS
          0x0002000E:0x00021009, // GLFW_ACCUM_BLUE_BITS
          0x0002000F:0x0002100A, // GLFW_ACCUM_ALPHA_BITS
          0x00020010:0x0002100B, // GLFW_AUX_BUFFERS
          0x00020011:0x0002100C, // GLFW_STEREO
          0x00020012:0, // GLFW_WINDOW_NO_RESIZE
          0x00020013:0x0002100D, // GLFW_FSAA_SAMPLES
          0x00020014:0x00022002, // GLFW_OPENGL_VERSION_MAJOR
          0x00020015:0x00022003, // GLFW_OPENGL_VERSION_MINOR
          0x00020016:0x00022006, // GLFW_OPENGL_FORWARD_COMPAT
          0x00020017:0x00022007, // GLFW_OPENGL_DEBUG_CONTEXT
          0x00020018:0x00022008, // GLFW_OPENGL_PROFILE
        };
        return table[param];
      }};
  function _glfwCreateWindow(width, height, title, monitor, share) {
      return GLFW.createWindow(width, height, title, monitor, share);
    }

  function _glfwDefaultWindowHints() {
      GLFW.hints = GLFW.defaultHints;
    }

  function _glfwDestroyWindow(winid) {
      return GLFW.destroyWindow(winid);
    }

  function _glfwGetPrimaryMonitor() {
      return 1;
    }

  function _glfwGetTime() {
      return GLFW.getTime() - GLFW.initialTime;
    }

  function _glfwGetVideoModes(monitor, count) {
      setValue(count, 0, 'i32');
      return 0;
    }

  function _glfwInit() {
      if (GLFW.windows) return 1; // GL_TRUE
  
      GLFW.initialTime = GLFW.getTime();
      GLFW.hints = GLFW.defaultHints;
      GLFW.windows = new Array()
      GLFW.active = null;
  
      window.addEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.addEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      window.addEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].addEventListener("touchmove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("touchstart", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("touchcancel", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener("touchend", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].addEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].addEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].addEventListener('dragover', GLFW.onDragover, true);
  
      Browser.resizeListeners.push(function(width, height) {
         GLFW.onCanvasResize(width, height);
      });
      return 1; // GL_TRUE
    }

  function _glfwMakeContextCurrent(winid) {}

  function _glfwSetCharCallback(winid, cbfun) {
      return GLFW.setCharCallback(winid, cbfun);
    }

  function _glfwSetCursorEnterCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return null;
      var prevcbfun = win.cursorEnterFunc;
      win.cursorEnterFunc = cbfun;
      return prevcbfun;
    }

  function _glfwSetCursorPosCallback(winid, cbfun) {
      return GLFW.setCursorPosCallback(winid, cbfun);
    }

  function _glfwSetDropCallback(winid, cbfun) {
      return GLFW.setDropCallback(winid, cbfun);
    }

  function _glfwSetErrorCallback(cbfun) {
      var prevcbfun = GLFW.errorFunc;
      GLFW.errorFunc = cbfun;
      return prevcbfun;
    }

  function _glfwSetKeyCallback(winid, cbfun) {
      return GLFW.setKeyCallback(winid, cbfun);
    }

  function _glfwSetMouseButtonCallback(winid, cbfun) {
      return GLFW.setMouseButtonCallback(winid, cbfun);
    }

  function _glfwSetScrollCallback(winid, cbfun) {
      return GLFW.setScrollCallback(winid, cbfun);
    }

  function _glfwSetWindowIconifyCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return null;
      var prevcbfun = win.windowIconifyFunc;
      win.windowIconifyFunc = cbfun;
      return prevcbfun;
    }

  function _glfwSetWindowShouldClose(winid, value) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.shouldClose = value;
    }

  function _glfwSetWindowSizeCallback(winid, cbfun) {
      return GLFW.setWindowSizeCallback(winid, cbfun);
    }

  function _glfwSwapBuffers(winid) {
      GLFW.swapBuffers(winid);
    }

  function _glfwSwapInterval(interval) {
      interval = Math.abs(interval); // GLFW uses negative values to enable GLX_EXT_swap_control_tear, which we don't have, so just treat negative and positive the same.
      if (interval == 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 0);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, interval);
    }

  function _glfwTerminate() {
      window.removeEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.removeEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.removeEventListener("keydown", GLFW.onKeydown, true);
      window.removeEventListener("keypress", GLFW.onKeyPress, true);
      window.removeEventListener("keyup", GLFW.onKeyup, true);
      window.removeEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].removeEventListener("touchmove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("touchstart", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("touchcancel", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener("touchend", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].removeEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].removeEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].removeEventListener('dragover', GLFW.onDragover, true);
  
  
      Module["canvas"].width = Module["canvas"].height = 1;
      GLFW.windows = null;
      GLFW.active = null;
    }

  function _glfwWindowHint(target, hint) {
      GLFW.hints[target] = hint;
    }

  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var start = _emscripten_get_now();
      while (_emscripten_get_now() - start < useconds / 1000) {
        // Do nothing.
      }
    }
  function _nanosleep(rqtp, rmtp) {
      // int nanosleep(const struct timespec  *rqtp, struct timespec *rmtp);
      if (rqtp === 0) {
        setErrNo(28);
        return -1;
      }
      var seconds = ((SAFE_HEAP_LOAD(((rqtp)|0), 4, 0))|0);
      var nanoseconds = ((SAFE_HEAP_LOAD((((rqtp)+(4))|0), 4, 0))|0);
      if (nanoseconds < 0 || nanoseconds > 999999999 || seconds < 0) {
        setErrNo(28);
        return -1;
      }
      if (rmtp !== 0) {
        SAFE_HEAP_STORE(((rmtp)|0), ((0)|0), 4);
        SAFE_HEAP_STORE((((rmtp)+(4))|0), ((0)|0), 4);
      }
      return _usleep((seconds * 1e6) + (nanoseconds / 1000));
    }

  function _setTempRet0($i) {
      setTempRet0(($i) | 0);
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        SAFE_HEAP_STORE(((ptr)|0), ((ret)|0), 4);
      }
      return ret;
    }

Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas) { Browser.requestFullscreen(lockPointer, resizeCanvas) };
  Module["requestFullScreen"] = function Module_requestFullScreen() { Browser.requestFullScreen() };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
var FSNode = /** @constructor */ function(parent, name, mode, rdev) {
    if (!parent) {
      parent = this;  // root node sets parent to itself
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
  };
  var readMode = 292/*292*/ | 73/*73*/;
  var writeMode = 146/*146*/;
  Object.defineProperties(FSNode.prototype, {
   read: {
    get: /** @this{FSNode} */function() {
     return (this.mode & readMode) === readMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= readMode : this.mode &= ~readMode;
    }
   },
   write: {
    get: /** @this{FSNode} */function() {
     return (this.mode & writeMode) === writeMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= writeMode : this.mode &= ~writeMode;
    }
   },
   isFolder: {
    get: /** @this{FSNode} */function() {
     return FS.isDir(this.mode);
    }
   },
   isDevice: {
    get: /** @this{FSNode} */function() {
     return FS.isChrdev(this.mode);
    }
   }
  });
  FS.FSNode = FSNode;
  FS.staticInit();Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_emval();;
var GLctx;;
for (var i = 0; i < 32; ++i) tempFixedLengthArray.push(new Array(i));;
var miniTempWebGLFloatBuffersStorage = new Float32Array(288);
  for (/**@suppress{duplicate}*/var i = 0; i < 288; ++i) {
  miniTempWebGLFloatBuffers[i] = miniTempWebGLFloatBuffersStorage.subarray(0, i+1);
  }
  ;
var __miniTempWebGLIntBuffersStorage = new Int32Array(288);
  for (/**@suppress{duplicate}*/var i = 0; i < 288; ++i) {
  __miniTempWebGLIntBuffers[i] = __miniTempWebGLIntBuffersStorage.subarray(0, i+1);
  }
  ;
var ASSERTIONS = true;



/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



__ATINIT__.push({ func: function() { ___wasm_call_ctors() } });
var asmLibraryArg = { "__assert_fail": ___assert_fail, "__cxa_allocate_exception": ___cxa_allocate_exception, "__cxa_throw": ___cxa_throw, "__sys_fcntl64": ___sys_fcntl64, "__sys_ioctl": ___sys_ioctl, "__sys_open": ___sys_open, "_embind_register_bool": __embind_register_bool, "_embind_register_emval": __embind_register_emval, "_embind_register_float": __embind_register_float, "_embind_register_integer": __embind_register_integer, "_embind_register_memory_view": __embind_register_memory_view, "_embind_register_std_string": __embind_register_std_string, "_embind_register_std_wstring": __embind_register_std_wstring, "_embind_register_void": __embind_register_void, "abort": _abort, "alignfault": alignfault, "eglGetProcAddress": _eglGetProcAddress, "emscripten_exit_pointerlock": _emscripten_exit_pointerlock, "emscripten_get_element_css_size": _emscripten_get_element_css_size, "emscripten_get_gamepad_status": _emscripten_get_gamepad_status, "emscripten_get_num_gamepads": _emscripten_get_num_gamepads, "emscripten_get_pointerlock_status": _emscripten_get_pointerlock_status, "emscripten_glActiveTexture": _emscripten_glActiveTexture, "emscripten_glAttachShader": _emscripten_glAttachShader, "emscripten_glBeginQuery": _emscripten_glBeginQuery, "emscripten_glBeginQueryEXT": _emscripten_glBeginQueryEXT, "emscripten_glBeginTransformFeedback": _emscripten_glBeginTransformFeedback, "emscripten_glBindAttribLocation": _emscripten_glBindAttribLocation, "emscripten_glBindBuffer": _emscripten_glBindBuffer, "emscripten_glBindBufferBase": _emscripten_glBindBufferBase, "emscripten_glBindBufferRange": _emscripten_glBindBufferRange, "emscripten_glBindFramebuffer": _emscripten_glBindFramebuffer, "emscripten_glBindRenderbuffer": _emscripten_glBindRenderbuffer, "emscripten_glBindSampler": _emscripten_glBindSampler, "emscripten_glBindTexture": _emscripten_glBindTexture, "emscripten_glBindTransformFeedback": _emscripten_glBindTransformFeedback, "emscripten_glBindVertexArray": _emscripten_glBindVertexArray, "emscripten_glBindVertexArrayOES": _emscripten_glBindVertexArrayOES, "emscripten_glBlendColor": _emscripten_glBlendColor, "emscripten_glBlendEquation": _emscripten_glBlendEquation, "emscripten_glBlendEquationSeparate": _emscripten_glBlendEquationSeparate, "emscripten_glBlendFunc": _emscripten_glBlendFunc, "emscripten_glBlendFuncSeparate": _emscripten_glBlendFuncSeparate, "emscripten_glBlitFramebuffer": _emscripten_glBlitFramebuffer, "emscripten_glBufferData": _emscripten_glBufferData, "emscripten_glBufferSubData": _emscripten_glBufferSubData, "emscripten_glCheckFramebufferStatus": _emscripten_glCheckFramebufferStatus, "emscripten_glClear": _emscripten_glClear, "emscripten_glClearBufferfi": _emscripten_glClearBufferfi, "emscripten_glClearBufferfv": _emscripten_glClearBufferfv, "emscripten_glClearBufferiv": _emscripten_glClearBufferiv, "emscripten_glClearBufferuiv": _emscripten_glClearBufferuiv, "emscripten_glClearColor": _emscripten_glClearColor, "emscripten_glClearDepthf": _emscripten_glClearDepthf, "emscripten_glClearStencil": _emscripten_glClearStencil, "emscripten_glClientWaitSync": _emscripten_glClientWaitSync, "emscripten_glColorMask": _emscripten_glColorMask, "emscripten_glCompileShader": _emscripten_glCompileShader, "emscripten_glCompressedTexImage2D": _emscripten_glCompressedTexImage2D, "emscripten_glCompressedTexImage3D": _emscripten_glCompressedTexImage3D, "emscripten_glCompressedTexSubImage2D": _emscripten_glCompressedTexSubImage2D, "emscripten_glCompressedTexSubImage3D": _emscripten_glCompressedTexSubImage3D, "emscripten_glCopyBufferSubData": _emscripten_glCopyBufferSubData, "emscripten_glCopyTexImage2D": _emscripten_glCopyTexImage2D, "emscripten_glCopyTexSubImage2D": _emscripten_glCopyTexSubImage2D, "emscripten_glCopyTexSubImage3D": _emscripten_glCopyTexSubImage3D, "emscripten_glCreateProgram": _emscripten_glCreateProgram, "emscripten_glCreateShader": _emscripten_glCreateShader, "emscripten_glCullFace": _emscripten_glCullFace, "emscripten_glDeleteBuffers": _emscripten_glDeleteBuffers, "emscripten_glDeleteFramebuffers": _emscripten_glDeleteFramebuffers, "emscripten_glDeleteProgram": _emscripten_glDeleteProgram, "emscripten_glDeleteQueries": _emscripten_glDeleteQueries, "emscripten_glDeleteQueriesEXT": _emscripten_glDeleteQueriesEXT, "emscripten_glDeleteRenderbuffers": _emscripten_glDeleteRenderbuffers, "emscripten_glDeleteSamplers": _emscripten_glDeleteSamplers, "emscripten_glDeleteShader": _emscripten_glDeleteShader, "emscripten_glDeleteSync": _emscripten_glDeleteSync, "emscripten_glDeleteTextures": _emscripten_glDeleteTextures, "emscripten_glDeleteTransformFeedbacks": _emscripten_glDeleteTransformFeedbacks, "emscripten_glDeleteVertexArrays": _emscripten_glDeleteVertexArrays, "emscripten_glDeleteVertexArraysOES": _emscripten_glDeleteVertexArraysOES, "emscripten_glDepthFunc": _emscripten_glDepthFunc, "emscripten_glDepthMask": _emscripten_glDepthMask, "emscripten_glDepthRangef": _emscripten_glDepthRangef, "emscripten_glDetachShader": _emscripten_glDetachShader, "emscripten_glDisable": _emscripten_glDisable, "emscripten_glDisableVertexAttribArray": _emscripten_glDisableVertexAttribArray, "emscripten_glDrawArrays": _emscripten_glDrawArrays, "emscripten_glDrawArraysInstanced": _emscripten_glDrawArraysInstanced, "emscripten_glDrawArraysInstancedANGLE": _emscripten_glDrawArraysInstancedANGLE, "emscripten_glDrawArraysInstancedARB": _emscripten_glDrawArraysInstancedARB, "emscripten_glDrawArraysInstancedEXT": _emscripten_glDrawArraysInstancedEXT, "emscripten_glDrawArraysInstancedNV": _emscripten_glDrawArraysInstancedNV, "emscripten_glDrawBuffers": _emscripten_glDrawBuffers, "emscripten_glDrawBuffersEXT": _emscripten_glDrawBuffersEXT, "emscripten_glDrawBuffersWEBGL": _emscripten_glDrawBuffersWEBGL, "emscripten_glDrawElements": _emscripten_glDrawElements, "emscripten_glDrawElementsInstanced": _emscripten_glDrawElementsInstanced, "emscripten_glDrawElementsInstancedANGLE": _emscripten_glDrawElementsInstancedANGLE, "emscripten_glDrawElementsInstancedARB": _emscripten_glDrawElementsInstancedARB, "emscripten_glDrawElementsInstancedEXT": _emscripten_glDrawElementsInstancedEXT, "emscripten_glDrawElementsInstancedNV": _emscripten_glDrawElementsInstancedNV, "emscripten_glDrawRangeElements": _emscripten_glDrawRangeElements, "emscripten_glEnable": _emscripten_glEnable, "emscripten_glEnableVertexAttribArray": _emscripten_glEnableVertexAttribArray, "emscripten_glEndQuery": _emscripten_glEndQuery, "emscripten_glEndQueryEXT": _emscripten_glEndQueryEXT, "emscripten_glEndTransformFeedback": _emscripten_glEndTransformFeedback, "emscripten_glFenceSync": _emscripten_glFenceSync, "emscripten_glFinish": _emscripten_glFinish, "emscripten_glFlush": _emscripten_glFlush, "emscripten_glFramebufferRenderbuffer": _emscripten_glFramebufferRenderbuffer, "emscripten_glFramebufferTexture2D": _emscripten_glFramebufferTexture2D, "emscripten_glFramebufferTextureLayer": _emscripten_glFramebufferTextureLayer, "emscripten_glFrontFace": _emscripten_glFrontFace, "emscripten_glGenBuffers": _emscripten_glGenBuffers, "emscripten_glGenFramebuffers": _emscripten_glGenFramebuffers, "emscripten_glGenQueries": _emscripten_glGenQueries, "emscripten_glGenQueriesEXT": _emscripten_glGenQueriesEXT, "emscripten_glGenRenderbuffers": _emscripten_glGenRenderbuffers, "emscripten_glGenSamplers": _emscripten_glGenSamplers, "emscripten_glGenTextures": _emscripten_glGenTextures, "emscripten_glGenTransformFeedbacks": _emscripten_glGenTransformFeedbacks, "emscripten_glGenVertexArrays": _emscripten_glGenVertexArrays, "emscripten_glGenVertexArraysOES": _emscripten_glGenVertexArraysOES, "emscripten_glGenerateMipmap": _emscripten_glGenerateMipmap, "emscripten_glGetActiveAttrib": _emscripten_glGetActiveAttrib, "emscripten_glGetActiveUniform": _emscripten_glGetActiveUniform, "emscripten_glGetActiveUniformBlockName": _emscripten_glGetActiveUniformBlockName, "emscripten_glGetActiveUniformBlockiv": _emscripten_glGetActiveUniformBlockiv, "emscripten_glGetActiveUniformsiv": _emscripten_glGetActiveUniformsiv, "emscripten_glGetAttachedShaders": _emscripten_glGetAttachedShaders, "emscripten_glGetAttribLocation": _emscripten_glGetAttribLocation, "emscripten_glGetBooleanv": _emscripten_glGetBooleanv, "emscripten_glGetBufferParameteri64v": _emscripten_glGetBufferParameteri64v, "emscripten_glGetBufferParameteriv": _emscripten_glGetBufferParameteriv, "emscripten_glGetError": _emscripten_glGetError, "emscripten_glGetFloatv": _emscripten_glGetFloatv, "emscripten_glGetFragDataLocation": _emscripten_glGetFragDataLocation, "emscripten_glGetFramebufferAttachmentParameteriv": _emscripten_glGetFramebufferAttachmentParameteriv, "emscripten_glGetInteger64i_v": _emscripten_glGetInteger64i_v, "emscripten_glGetInteger64v": _emscripten_glGetInteger64v, "emscripten_glGetIntegeri_v": _emscripten_glGetIntegeri_v, "emscripten_glGetIntegerv": _emscripten_glGetIntegerv, "emscripten_glGetInternalformativ": _emscripten_glGetInternalformativ, "emscripten_glGetProgramBinary": _emscripten_glGetProgramBinary, "emscripten_glGetProgramInfoLog": _emscripten_glGetProgramInfoLog, "emscripten_glGetProgramiv": _emscripten_glGetProgramiv, "emscripten_glGetQueryObjecti64vEXT": _emscripten_glGetQueryObjecti64vEXT, "emscripten_glGetQueryObjectivEXT": _emscripten_glGetQueryObjectivEXT, "emscripten_glGetQueryObjectui64vEXT": _emscripten_glGetQueryObjectui64vEXT, "emscripten_glGetQueryObjectuiv": _emscripten_glGetQueryObjectuiv, "emscripten_glGetQueryObjectuivEXT": _emscripten_glGetQueryObjectuivEXT, "emscripten_glGetQueryiv": _emscripten_glGetQueryiv, "emscripten_glGetQueryivEXT": _emscripten_glGetQueryivEXT, "emscripten_glGetRenderbufferParameteriv": _emscripten_glGetRenderbufferParameteriv, "emscripten_glGetSamplerParameterfv": _emscripten_glGetSamplerParameterfv, "emscripten_glGetSamplerParameteriv": _emscripten_glGetSamplerParameteriv, "emscripten_glGetShaderInfoLog": _emscripten_glGetShaderInfoLog, "emscripten_glGetShaderPrecisionFormat": _emscripten_glGetShaderPrecisionFormat, "emscripten_glGetShaderSource": _emscripten_glGetShaderSource, "emscripten_glGetShaderiv": _emscripten_glGetShaderiv, "emscripten_glGetString": _emscripten_glGetString, "emscripten_glGetStringi": _emscripten_glGetStringi, "emscripten_glGetSynciv": _emscripten_glGetSynciv, "emscripten_glGetTexParameterfv": _emscripten_glGetTexParameterfv, "emscripten_glGetTexParameteriv": _emscripten_glGetTexParameteriv, "emscripten_glGetTransformFeedbackVarying": _emscripten_glGetTransformFeedbackVarying, "emscripten_glGetUniformBlockIndex": _emscripten_glGetUniformBlockIndex, "emscripten_glGetUniformIndices": _emscripten_glGetUniformIndices, "emscripten_glGetUniformLocation": _emscripten_glGetUniformLocation, "emscripten_glGetUniformfv": _emscripten_glGetUniformfv, "emscripten_glGetUniformiv": _emscripten_glGetUniformiv, "emscripten_glGetUniformuiv": _emscripten_glGetUniformuiv, "emscripten_glGetVertexAttribIiv": _emscripten_glGetVertexAttribIiv, "emscripten_glGetVertexAttribIuiv": _emscripten_glGetVertexAttribIuiv, "emscripten_glGetVertexAttribPointerv": _emscripten_glGetVertexAttribPointerv, "emscripten_glGetVertexAttribfv": _emscripten_glGetVertexAttribfv, "emscripten_glGetVertexAttribiv": _emscripten_glGetVertexAttribiv, "emscripten_glHint": _emscripten_glHint, "emscripten_glInvalidateFramebuffer": _emscripten_glInvalidateFramebuffer, "emscripten_glInvalidateSubFramebuffer": _emscripten_glInvalidateSubFramebuffer, "emscripten_glIsBuffer": _emscripten_glIsBuffer, "emscripten_glIsEnabled": _emscripten_glIsEnabled, "emscripten_glIsFramebuffer": _emscripten_glIsFramebuffer, "emscripten_glIsProgram": _emscripten_glIsProgram, "emscripten_glIsQuery": _emscripten_glIsQuery, "emscripten_glIsQueryEXT": _emscripten_glIsQueryEXT, "emscripten_glIsRenderbuffer": _emscripten_glIsRenderbuffer, "emscripten_glIsSampler": _emscripten_glIsSampler, "emscripten_glIsShader": _emscripten_glIsShader, "emscripten_glIsSync": _emscripten_glIsSync, "emscripten_glIsTexture": _emscripten_glIsTexture, "emscripten_glIsTransformFeedback": _emscripten_glIsTransformFeedback, "emscripten_glIsVertexArray": _emscripten_glIsVertexArray, "emscripten_glIsVertexArrayOES": _emscripten_glIsVertexArrayOES, "emscripten_glLineWidth": _emscripten_glLineWidth, "emscripten_glLinkProgram": _emscripten_glLinkProgram, "emscripten_glPauseTransformFeedback": _emscripten_glPauseTransformFeedback, "emscripten_glPixelStorei": _emscripten_glPixelStorei, "emscripten_glPolygonOffset": _emscripten_glPolygonOffset, "emscripten_glProgramBinary": _emscripten_glProgramBinary, "emscripten_glProgramParameteri": _emscripten_glProgramParameteri, "emscripten_glQueryCounterEXT": _emscripten_glQueryCounterEXT, "emscripten_glReadBuffer": _emscripten_glReadBuffer, "emscripten_glReadPixels": _emscripten_glReadPixels, "emscripten_glReleaseShaderCompiler": _emscripten_glReleaseShaderCompiler, "emscripten_glRenderbufferStorage": _emscripten_glRenderbufferStorage, "emscripten_glRenderbufferStorageMultisample": _emscripten_glRenderbufferStorageMultisample, "emscripten_glResumeTransformFeedback": _emscripten_glResumeTransformFeedback, "emscripten_glSampleCoverage": _emscripten_glSampleCoverage, "emscripten_glSamplerParameterf": _emscripten_glSamplerParameterf, "emscripten_glSamplerParameterfv": _emscripten_glSamplerParameterfv, "emscripten_glSamplerParameteri": _emscripten_glSamplerParameteri, "emscripten_glSamplerParameteriv": _emscripten_glSamplerParameteriv, "emscripten_glScissor": _emscripten_glScissor, "emscripten_glShaderBinary": _emscripten_glShaderBinary, "emscripten_glShaderSource": _emscripten_glShaderSource, "emscripten_glStencilFunc": _emscripten_glStencilFunc, "emscripten_glStencilFuncSeparate": _emscripten_glStencilFuncSeparate, "emscripten_glStencilMask": _emscripten_glStencilMask, "emscripten_glStencilMaskSeparate": _emscripten_glStencilMaskSeparate, "emscripten_glStencilOp": _emscripten_glStencilOp, "emscripten_glStencilOpSeparate": _emscripten_glStencilOpSeparate, "emscripten_glTexImage2D": _emscripten_glTexImage2D, "emscripten_glTexImage3D": _emscripten_glTexImage3D, "emscripten_glTexParameterf": _emscripten_glTexParameterf, "emscripten_glTexParameterfv": _emscripten_glTexParameterfv, "emscripten_glTexParameteri": _emscripten_glTexParameteri, "emscripten_glTexParameteriv": _emscripten_glTexParameteriv, "emscripten_glTexStorage2D": _emscripten_glTexStorage2D, "emscripten_glTexStorage3D": _emscripten_glTexStorage3D, "emscripten_glTexSubImage2D": _emscripten_glTexSubImage2D, "emscripten_glTexSubImage3D": _emscripten_glTexSubImage3D, "emscripten_glTransformFeedbackVaryings": _emscripten_glTransformFeedbackVaryings, "emscripten_glUniform1f": _emscripten_glUniform1f, "emscripten_glUniform1fv": _emscripten_glUniform1fv, "emscripten_glUniform1i": _emscripten_glUniform1i, "emscripten_glUniform1iv": _emscripten_glUniform1iv, "emscripten_glUniform1ui": _emscripten_glUniform1ui, "emscripten_glUniform1uiv": _emscripten_glUniform1uiv, "emscripten_glUniform2f": _emscripten_glUniform2f, "emscripten_glUniform2fv": _emscripten_glUniform2fv, "emscripten_glUniform2i": _emscripten_glUniform2i, "emscripten_glUniform2iv": _emscripten_glUniform2iv, "emscripten_glUniform2ui": _emscripten_glUniform2ui, "emscripten_glUniform2uiv": _emscripten_glUniform2uiv, "emscripten_glUniform3f": _emscripten_glUniform3f, "emscripten_glUniform3fv": _emscripten_glUniform3fv, "emscripten_glUniform3i": _emscripten_glUniform3i, "emscripten_glUniform3iv": _emscripten_glUniform3iv, "emscripten_glUniform3ui": _emscripten_glUniform3ui, "emscripten_glUniform3uiv": _emscripten_glUniform3uiv, "emscripten_glUniform4f": _emscripten_glUniform4f, "emscripten_glUniform4fv": _emscripten_glUniform4fv, "emscripten_glUniform4i": _emscripten_glUniform4i, "emscripten_glUniform4iv": _emscripten_glUniform4iv, "emscripten_glUniform4ui": _emscripten_glUniform4ui, "emscripten_glUniform4uiv": _emscripten_glUniform4uiv, "emscripten_glUniformBlockBinding": _emscripten_glUniformBlockBinding, "emscripten_glUniformMatrix2fv": _emscripten_glUniformMatrix2fv, "emscripten_glUniformMatrix2x3fv": _emscripten_glUniformMatrix2x3fv, "emscripten_glUniformMatrix2x4fv": _emscripten_glUniformMatrix2x4fv, "emscripten_glUniformMatrix3fv": _emscripten_glUniformMatrix3fv, "emscripten_glUniformMatrix3x2fv": _emscripten_glUniformMatrix3x2fv, "emscripten_glUniformMatrix3x4fv": _emscripten_glUniformMatrix3x4fv, "emscripten_glUniformMatrix4fv": _emscripten_glUniformMatrix4fv, "emscripten_glUniformMatrix4x2fv": _emscripten_glUniformMatrix4x2fv, "emscripten_glUniformMatrix4x3fv": _emscripten_glUniformMatrix4x3fv, "emscripten_glUseProgram": _emscripten_glUseProgram, "emscripten_glValidateProgram": _emscripten_glValidateProgram, "emscripten_glVertexAttrib1f": _emscripten_glVertexAttrib1f, "emscripten_glVertexAttrib1fv": _emscripten_glVertexAttrib1fv, "emscripten_glVertexAttrib2f": _emscripten_glVertexAttrib2f, "emscripten_glVertexAttrib2fv": _emscripten_glVertexAttrib2fv, "emscripten_glVertexAttrib3f": _emscripten_glVertexAttrib3f, "emscripten_glVertexAttrib3fv": _emscripten_glVertexAttrib3fv, "emscripten_glVertexAttrib4f": _emscripten_glVertexAttrib4f, "emscripten_glVertexAttrib4fv": _emscripten_glVertexAttrib4fv, "emscripten_glVertexAttribDivisor": _emscripten_glVertexAttribDivisor, "emscripten_glVertexAttribDivisorANGLE": _emscripten_glVertexAttribDivisorANGLE, "emscripten_glVertexAttribDivisorARB": _emscripten_glVertexAttribDivisorARB, "emscripten_glVertexAttribDivisorEXT": _emscripten_glVertexAttribDivisorEXT, "emscripten_glVertexAttribDivisorNV": _emscripten_glVertexAttribDivisorNV, "emscripten_glVertexAttribI4i": _emscripten_glVertexAttribI4i, "emscripten_glVertexAttribI4iv": _emscripten_glVertexAttribI4iv, "emscripten_glVertexAttribI4ui": _emscripten_glVertexAttribI4ui, "emscripten_glVertexAttribI4uiv": _emscripten_glVertexAttribI4uiv, "emscripten_glVertexAttribIPointer": _emscripten_glVertexAttribIPointer, "emscripten_glVertexAttribPointer": _emscripten_glVertexAttribPointer, "emscripten_glViewport": _emscripten_glViewport, "emscripten_glWaitSync": _emscripten_glWaitSync, "emscripten_memcpy_big": _emscripten_memcpy_big, "emscripten_request_pointerlock": _emscripten_request_pointerlock, "emscripten_resize_heap": _emscripten_resize_heap, "emscripten_run_script": _emscripten_run_script, "emscripten_sample_gamepad_data": _emscripten_sample_gamepad_data, "emscripten_set_click_callback_on_thread": _emscripten_set_click_callback_on_thread, "emscripten_set_fullscreenchange_callback_on_thread": _emscripten_set_fullscreenchange_callback_on_thread, "emscripten_set_gamepadconnected_callback_on_thread": _emscripten_set_gamepadconnected_callback_on_thread, "emscripten_set_gamepaddisconnected_callback_on_thread": _emscripten_set_gamepaddisconnected_callback_on_thread, "emscripten_set_keypress_callback_on_thread": _emscripten_set_keypress_callback_on_thread, "emscripten_set_main_loop": _emscripten_set_main_loop, "emscripten_set_touchcancel_callback_on_thread": _emscripten_set_touchcancel_callback_on_thread, "emscripten_set_touchend_callback_on_thread": _emscripten_set_touchend_callback_on_thread, "emscripten_set_touchmove_callback_on_thread": _emscripten_set_touchmove_callback_on_thread, "emscripten_set_touchstart_callback_on_thread": _emscripten_set_touchstart_callback_on_thread, "exit": _exit, "fd_close": _fd_close, "fd_read": _fd_read, "fd_seek": _fd_seek, "fd_write": _fd_write, "glActiveTexture": _glActiveTexture, "glAttachShader": _glAttachShader, "glBindAttribLocation": _glBindAttribLocation, "glBindBuffer": _glBindBuffer, "glBindTexture": _glBindTexture, "glBlendFunc": _glBlendFunc, "glBufferData": _glBufferData, "glBufferSubData": _glBufferSubData, "glClear": _glClear, "glClearColor": _glClearColor, "glClearDepthf": _glClearDepthf, "glCompileShader": _glCompileShader, "glCompressedTexImage2D": _glCompressedTexImage2D, "glCreateProgram": _glCreateProgram, "glCreateShader": _glCreateShader, "glCullFace": _glCullFace, "glDeleteBuffers": _glDeleteBuffers, "glDeleteProgram": _glDeleteProgram, "glDeleteShader": _glDeleteShader, "glDeleteTextures": _glDeleteTextures, "glDepthFunc": _glDepthFunc, "glDetachShader": _glDetachShader, "glDisable": _glDisable, "glDisableVertexAttribArray": _glDisableVertexAttribArray, "glDrawArrays": _glDrawArrays, "glDrawElements": _glDrawElements, "glEnable": _glEnable, "glEnableVertexAttribArray": _glEnableVertexAttribArray, "glFrontFace": _glFrontFace, "glGenBuffers": _glGenBuffers, "glGenTextures": _glGenTextures, "glGetAttribLocation": _glGetAttribLocation, "glGetFloatv": _glGetFloatv, "glGetProgramInfoLog": _glGetProgramInfoLog, "glGetProgramiv": _glGetProgramiv, "glGetShaderInfoLog": _glGetShaderInfoLog, "glGetShaderiv": _glGetShaderiv, "glGetString": _glGetString, "glGetUniformLocation": _glGetUniformLocation, "glLinkProgram": _glLinkProgram, "glPixelStorei": _glPixelStorei, "glReadPixels": _glReadPixels, "glShaderSource": _glShaderSource, "glTexImage2D": _glTexImage2D, "glTexParameterf": _glTexParameterf, "glTexParameteri": _glTexParameteri, "glUniform1i": _glUniform1i, "glUniform4f": _glUniform4f, "glUniformMatrix4fv": _glUniformMatrix4fv, "glUseProgram": _glUseProgram, "glVertexAttribPointer": _glVertexAttribPointer, "glViewport": _glViewport, "glfwCreateWindow": _glfwCreateWindow, "glfwDefaultWindowHints": _glfwDefaultWindowHints, "glfwDestroyWindow": _glfwDestroyWindow, "glfwGetPrimaryMonitor": _glfwGetPrimaryMonitor, "glfwGetTime": _glfwGetTime, "glfwGetVideoModes": _glfwGetVideoModes, "glfwInit": _glfwInit, "glfwMakeContextCurrent": _glfwMakeContextCurrent, "glfwSetCharCallback": _glfwSetCharCallback, "glfwSetCursorEnterCallback": _glfwSetCursorEnterCallback, "glfwSetCursorPosCallback": _glfwSetCursorPosCallback, "glfwSetDropCallback": _glfwSetDropCallback, "glfwSetErrorCallback": _glfwSetErrorCallback, "glfwSetKeyCallback": _glfwSetKeyCallback, "glfwSetMouseButtonCallback": _glfwSetMouseButtonCallback, "glfwSetScrollCallback": _glfwSetScrollCallback, "glfwSetWindowIconifyCallback": _glfwSetWindowIconifyCallback, "glfwSetWindowShouldClose": _glfwSetWindowShouldClose, "glfwSetWindowSizeCallback": _glfwSetWindowSizeCallback, "glfwSwapBuffers": _glfwSwapBuffers, "glfwSwapInterval": _glfwSwapInterval, "glfwTerminate": _glfwTerminate, "glfwWindowHint": _glfwWindowHint, "memory": wasmMemory, "nanosleep": _nanosleep, "segfault": segfault, "setTempRet0": _setTempRet0, "time": _time };
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");

/** @type {function(...*):?} */
var _main = Module["_main"] = createExportWrapper("main");

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = createExportWrapper("malloc");

/** @type {function(...*):?} */
var _free = Module["_free"] = createExportWrapper("free");

/** @type {function(...*):?} */
var _strstr = Module["_strstr"] = createExportWrapper("strstr");

/** @type {function(...*):?} */
var ___getTypeName = Module["___getTypeName"] = createExportWrapper("__getTypeName");

/** @type {function(...*):?} */
var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = createExportWrapper("__embind_register_native_and_builtin_types");

/** @type {function(...*):?} */
var _emscripten_GetProcAddress = Module["_emscripten_GetProcAddress"] = createExportWrapper("emscripten_GetProcAddress");

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = createExportWrapper("fflush");

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = createExportWrapper("stackSave");

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");

/** @type {function(...*):?} */
var _setThrew = Module["_setThrew"] = createExportWrapper("setThrew");

/** @type {function(...*):?} */
var _sbrk = Module["_sbrk"] = createExportWrapper("sbrk");

/** @type {function(...*):?} */
var _emscripten_get_sbrk_ptr = Module["_emscripten_get_sbrk_ptr"] = createExportWrapper("emscripten_get_sbrk_ptr");

/** @type {function(...*):?} */
var _emscripten_main_thread_process_queued_calls = Module["_emscripten_main_thread_process_queued_calls"] = createExportWrapper("emscripten_main_thread_process_queued_calls");

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");

/** @type {function(...*):?} */
var __growWasmMemory = Module["__growWasmMemory"] = createExportWrapper("__growWasmMemory");





// === Auto-generated postamble setup entry stuff ===

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ccall")) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortOnCannotGrowMemory")) Module["abortOnCannotGrowMemory"] = function() { abort("'abortOnCannotGrowMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setErrNo")) Module["setErrNo"] = function() { abort("'setErrNo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getHostByName")) Module["getHostByName"] = function() { abort("'getHostByName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getRandomDevice")) Module["getRandomDevice"] = function() { abort("'getRandomDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "traverseStack")) Module["traverseStack"] = function() { abort("'traverseStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "withBuiltinMalloc")) Module["withBuiltinMalloc"] = function() { abort("'withBuiltinMalloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgsArray")) Module["readAsmConstArgsArray"] = function() { abort("'readAsmConstArgsArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mainThreadEM_ASM")) Module["mainThreadEM_ASM"] = function() { abort("'mainThreadEM_ASM' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getExecutableName")) Module["getExecutableName"] = function() { abort("'getExecutableName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "listenOnce")) Module["listenOnce"] = function() { abort("'listenOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "autoResumeAudioContext")) Module["autoResumeAudioContext"] = function() { abort("'autoResumeAudioContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCallLegacy")) Module["dynCallLegacy"] = function() { abort("'dynCallLegacy' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getDynCaller")) Module["getDynCaller"] = function() { abort("'getDynCaller' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callRuntimeCallbacks")) Module["callRuntimeCallbacks"] = function() { abort("'callRuntimeCallbacks' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortStackOverflow")) Module["abortStackOverflow"] = function() { abort("'abortStackOverflow' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative")) Module["reallyNegative"] = function() { abort("'reallyNegative' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unSign")) Module["unSign"] = function() { abort("'unSign' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reSign")) Module["reSign"] = function() { abort("'reSign' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "formatString")) Module["formatString"] = function() { abort("'formatString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets")) Module["specialHTMLTargets"] = function() { abort("'specialHTMLTargets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "maybeCStringToJsString")) Module["maybeCStringToJsString"] = function() { abort("'maybeCStringToJsString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findEventTarget")) Module["findEventTarget"] = function() { abort("'findEventTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findCanvasEventTarget")) Module["findCanvasEventTarget"] = function() { abort("'findCanvasEventTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "polyfillSetImmediate")) Module["polyfillSetImmediate"] = function() { abort("'polyfillSetImmediate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings")) Module["getEnvStrings"] = function() { abort("'getEnvStrings' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "checkWasiClock")) Module["checkWasiClock"] = function() { abort("'checkWasiClock' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionLast")) Module["exceptionLast"] = function() { abort("'exceptionLast' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionCaught")) Module["exceptionCaught"] = function() { abort("'exceptionCaught' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfoAttrs")) Module["ExceptionInfoAttrs"] = function() { abort("'ExceptionInfoAttrs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfo")) Module["ExceptionInfo"] = function() { abort("'ExceptionInfo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "CatchInfo")) Module["CatchInfo"] = function() { abort("'CatchInfo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_addRef")) Module["exception_addRef"] = function() { abort("'exception_addRef' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_decRef")) Module["exception_decRef"] = function() { abort("'exception_decRef' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "funcWrappers")) Module["funcWrappers"] = function() { abort("'funcWrappers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setMainLoop")) Module["setMainLoop"] = function() { abort("'setMainLoop' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mmapAlloc")) Module["mmapAlloc"] = function() { abort("'mmapAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "MEMFS")) Module["MEMFS"] = function() { abort("'MEMFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY")) Module["TTY"] = function() { abort("'TTY' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS")) Module["PIPEFS"] = function() { abort("'PIPEFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS")) Module["SOCKFS"] = function() { abort("'SOCKFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tempFixedLengthArray")) Module["tempFixedLengthArray"] = function() { abort("'tempFixedLengthArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "miniTempWebGLFloatBuffers")) Module["miniTempWebGLFloatBuffers"] = function() { abort("'miniTempWebGLFloatBuffers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapObjectForWebGLType")) Module["heapObjectForWebGLType"] = function() { abort("'heapObjectForWebGLType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapAccessShiftForWebGLHeap")) Module["heapAccessShiftForWebGLHeap"] = function() { abort("'heapAccessShiftForWebGLHeap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "computeUnpackAlignedImageSize")) Module["computeUnpackAlignedImageSize"] = function() { abort("'computeUnpackAlignedImageSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeGLArray")) Module["writeGLArray"] = function() { abort("'writeGLArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode")) Module["SDL_unicode"] = function() { abort("'SDL_unicode' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext")) Module["SDL_ttfContext"] = function() { abort("'SDL_ttfContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio")) Module["SDL_audio"] = function() { abort("'SDL_audio' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window")) Module["GLFW_Window"] = function() { abort("'GLFW_Window' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_handle_array")) Module["emval_handle_array"] = function() { abort("'emval_handle_array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_free_list")) Module["emval_free_list"] = function() { abort("'emval_free_list' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_symbols")) Module["emval_symbols"] = function() { abort("'emval_symbols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_emval")) Module["init_emval"] = function() { abort("'init_emval' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "count_emval_handles")) Module["count_emval_handles"] = function() { abort("'count_emval_handles' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "get_first_emval")) Module["get_first_emval"] = function() { abort("'get_first_emval' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getStringOrSymbol")) Module["getStringOrSymbol"] = function() { abort("'getStringOrSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireHandle")) Module["requireHandle"] = function() { abort("'requireHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_newers")) Module["emval_newers"] = function() { abort("'emval_newers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftEmvalAllocator")) Module["craftEmvalAllocator"] = function() { abort("'craftEmvalAllocator' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_get_global")) Module["emval_get_global"] = function() { abort("'emval_get_global' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_methodCallers")) Module["emval_methodCallers"] = function() { abort("'emval_methodCallers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "InternalError")) Module["InternalError"] = function() { abort("'InternalError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "BindingError")) Module["BindingError"] = function() { abort("'BindingError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UnboundTypeError")) Module["UnboundTypeError"] = function() { abort("'UnboundTypeError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PureVirtualError")) Module["PureVirtualError"] = function() { abort("'PureVirtualError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_embind")) Module["init_embind"] = function() { abort("'init_embind' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInternalError")) Module["throwInternalError"] = function() { abort("'throwInternalError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwBindingError")) Module["throwBindingError"] = function() { abort("'throwBindingError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwUnboundTypeError")) Module["throwUnboundTypeError"] = function() { abort("'throwUnboundTypeError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ensureOverloadTable")) Module["ensureOverloadTable"] = function() { abort("'ensureOverloadTable' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exposePublicSymbol")) Module["exposePublicSymbol"] = function() { abort("'exposePublicSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "replacePublicSymbol")) Module["replacePublicSymbol"] = function() { abort("'replacePublicSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "extendError")) Module["extendError"] = function() { abort("'extendError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "createNamedFunction")) Module["createNamedFunction"] = function() { abort("'createNamedFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredInstances")) Module["registeredInstances"] = function() { abort("'registeredInstances' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getBasestPointer")) Module["getBasestPointer"] = function() { abort("'getBasestPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerInheritedInstance")) Module["registerInheritedInstance"] = function() { abort("'registerInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unregisterInheritedInstance")) Module["unregisterInheritedInstance"] = function() { abort("'unregisterInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstance")) Module["getInheritedInstance"] = function() { abort("'getInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstanceCount")) Module["getInheritedInstanceCount"] = function() { abort("'getInheritedInstanceCount' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLiveInheritedInstances")) Module["getLiveInheritedInstances"] = function() { abort("'getLiveInheritedInstances' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredTypes")) Module["registeredTypes"] = function() { abort("'registeredTypes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "awaitingDependencies")) Module["awaitingDependencies"] = function() { abort("'awaitingDependencies' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "typeDependencies")) Module["typeDependencies"] = function() { abort("'typeDependencies' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredPointers")) Module["registeredPointers"] = function() { abort("'registeredPointers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerType")) Module["registerType"] = function() { abort("'registerType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "whenDependentTypesAreResolved")) Module["whenDependentTypesAreResolved"] = function() { abort("'whenDependentTypesAreResolved' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_charCodes")) Module["embind_charCodes"] = function() { abort("'embind_charCodes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_init_charCodes")) Module["embind_init_charCodes"] = function() { abort("'embind_init_charCodes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readLatin1String")) Module["readLatin1String"] = function() { abort("'readLatin1String' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTypeName")) Module["getTypeName"] = function() { abort("'getTypeName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heap32VectorToArray")) Module["heap32VectorToArray"] = function() { abort("'heap32VectorToArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireRegisteredType")) Module["requireRegisteredType"] = function() { abort("'requireRegisteredType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getShiftFromSize")) Module["getShiftFromSize"] = function() { abort("'getShiftFromSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "integerReadValueFromPointer")) Module["integerReadValueFromPointer"] = function() { abort("'integerReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "enumReadValueFromPointer")) Module["enumReadValueFromPointer"] = function() { abort("'enumReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "floatReadValueFromPointer")) Module["floatReadValueFromPointer"] = function() { abort("'floatReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "simpleReadValueFromPointer")) Module["simpleReadValueFromPointer"] = function() { abort("'simpleReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runDestructors")) Module["runDestructors"] = function() { abort("'runDestructors' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "new_")) Module["new_"] = function() { abort("'new_' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftInvokerFunction")) Module["craftInvokerFunction"] = function() { abort("'craftInvokerFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind__requireFunction")) Module["embind__requireFunction"] = function() { abort("'embind__requireFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tupleRegistrations")) Module["tupleRegistrations"] = function() { abort("'tupleRegistrations' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "structRegistrations")) Module["structRegistrations"] = function() { abort("'structRegistrations' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "genericPointerToWireType")) Module["genericPointerToWireType"] = function() { abort("'genericPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "constNoSmartPtrRawPointerToWireType")) Module["constNoSmartPtrRawPointerToWireType"] = function() { abort("'constNoSmartPtrRawPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "nonConstNoSmartPtrRawPointerToWireType")) Module["nonConstNoSmartPtrRawPointerToWireType"] = function() { abort("'nonConstNoSmartPtrRawPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_RegisteredPointer")) Module["init_RegisteredPointer"] = function() { abort("'init_RegisteredPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer")) Module["RegisteredPointer"] = function() { abort("'RegisteredPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_getPointee")) Module["RegisteredPointer_getPointee"] = function() { abort("'RegisteredPointer_getPointee' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_destructor")) Module["RegisteredPointer_destructor"] = function() { abort("'RegisteredPointer_destructor' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_deleteObject")) Module["RegisteredPointer_deleteObject"] = function() { abort("'RegisteredPointer_deleteObject' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_fromWireType")) Module["RegisteredPointer_fromWireType"] = function() { abort("'RegisteredPointer_fromWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runDestructor")) Module["runDestructor"] = function() { abort("'runDestructor' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "releaseClassHandle")) Module["releaseClassHandle"] = function() { abort("'releaseClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "finalizationGroup")) Module["finalizationGroup"] = function() { abort("'finalizationGroup' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer_deps")) Module["detachFinalizer_deps"] = function() { abort("'detachFinalizer_deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer")) Module["detachFinalizer"] = function() { abort("'detachFinalizer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "attachFinalizer")) Module["attachFinalizer"] = function() { abort("'attachFinalizer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeClassHandle")) Module["makeClassHandle"] = function() { abort("'makeClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_ClassHandle")) Module["init_ClassHandle"] = function() { abort("'init_ClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle")) Module["ClassHandle"] = function() { abort("'ClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isAliasOf")) Module["ClassHandle_isAliasOf"] = function() { abort("'ClassHandle_isAliasOf' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInstanceAlreadyDeleted")) Module["throwInstanceAlreadyDeleted"] = function() { abort("'throwInstanceAlreadyDeleted' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_clone")) Module["ClassHandle_clone"] = function() { abort("'ClassHandle_clone' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_delete")) Module["ClassHandle_delete"] = function() { abort("'ClassHandle_delete' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "deletionQueue")) Module["deletionQueue"] = function() { abort("'deletionQueue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isDeleted")) Module["ClassHandle_isDeleted"] = function() { abort("'ClassHandle_isDeleted' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_deleteLater")) Module["ClassHandle_deleteLater"] = function() { abort("'ClassHandle_deleteLater' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "flushPendingDeletes")) Module["flushPendingDeletes"] = function() { abort("'flushPendingDeletes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "delayFunction")) Module["delayFunction"] = function() { abort("'delayFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setDelayFunction")) Module["setDelayFunction"] = function() { abort("'setDelayFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredClass")) Module["RegisteredClass"] = function() { abort("'RegisteredClass' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "shallowCopyInternalPointer")) Module["shallowCopyInternalPointer"] = function() { abort("'shallowCopyInternalPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "downcastPointer")) Module["downcastPointer"] = function() { abort("'downcastPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "upcastPointer")) Module["upcastPointer"] = function() { abort("'upcastPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "validateThis")) Module["validateThis"] = function() { abort("'validateThis' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "char_0")) Module["char_0"] = function() { abort("'char_0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "char_9")) Module["char_9"] = function() { abort("'char_9' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeLegalFunctionName")) Module["makeLegalFunctionName"] = function() { abort("'makeLegalFunctionName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetIndexed")) Module["emscriptenWebGLGetIndexed"] = function() { abort("'emscriptenWebGLGetIndexed' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });


var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  var entryFunction = Module['_main'];


  args = args || [];

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(thisProgram);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;

  try {


    var ret = entryFunction(argc, argv);


    // In PROXY_TO_PTHREAD builds, we should never exit the runtime below, as execution is asynchronously handed
    // off to a pthread.
    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'unwind') {
      // running an evented main loop, don't immediately exit
      noExitRuntime = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      quit_(1, e);
    }
  } finally {
    calledMain = true;

  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (shouldRunNow) callMain(args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  if (!ABORT) checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      var msg = 'program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)';
      err(msg);
    }
  } else {

    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);

    ABORT = true;
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;

if (Module['noInitialRun']) shouldRunNow = false;


  noExitRuntime = true;

run();






// {{MODULE_ADDITIONS}}



